// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// AvailableBudgetsApi is an autogenerated mock type for the AvailableBudgetsApi type
type AvailableBudgetsApi struct {
	mock.Mock
}

// DeleteAvailableBudget provides a mock function with given fields: ctx, id
func (_m *AvailableBudgetsApi) DeleteAvailableBudget(ctx context.Context, id int32) firefly.ApiDeleteAvailableBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteAvailableBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteAvailableBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteAvailableBudgetRequest)
	}

	return r0
}

// DeleteAvailableBudgetExecute provides a mock function with given fields: r
func (_m *AvailableBudgetsApi) DeleteAvailableBudgetExecute(r firefly.ApiDeleteAvailableBudgetRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteAvailableBudgetRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteAvailableBudgetRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableBudget provides a mock function with given fields: ctx, id
func (_m *AvailableBudgetsApi) GetAvailableBudget(ctx context.Context, id int32) firefly.ApiGetAvailableBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetAvailableBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetAvailableBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetAvailableBudgetRequest)
	}

	return r0
}

// GetAvailableBudgetExecute provides a mock function with given fields: r
func (_m *AvailableBudgetsApi) GetAvailableBudgetExecute(r firefly.ApiGetAvailableBudgetRequest) (firefly.AvailableBudgetSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AvailableBudgetSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetAvailableBudgetRequest) firefly.AvailableBudgetSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AvailableBudgetSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetAvailableBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetAvailableBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAvailableBudget provides a mock function with given fields: ctx
func (_m *AvailableBudgetsApi) ListAvailableBudget(ctx context.Context) firefly.ApiListAvailableBudgetRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListAvailableBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListAvailableBudgetRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListAvailableBudgetRequest)
	}

	return r0
}

// ListAvailableBudgetExecute provides a mock function with given fields: r
func (_m *AvailableBudgetsApi) ListAvailableBudgetExecute(r firefly.ApiListAvailableBudgetRequest) (firefly.AvailableBudgetArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AvailableBudgetArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListAvailableBudgetRequest) firefly.AvailableBudgetArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AvailableBudgetArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListAvailableBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListAvailableBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreAvailableBudget provides a mock function with given fields: ctx
func (_m *AvailableBudgetsApi) StoreAvailableBudget(ctx context.Context) firefly.ApiStoreAvailableBudgetRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreAvailableBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreAvailableBudgetRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreAvailableBudgetRequest)
	}

	return r0
}

// StoreAvailableBudgetExecute provides a mock function with given fields: r
func (_m *AvailableBudgetsApi) StoreAvailableBudgetExecute(r firefly.ApiStoreAvailableBudgetRequest) (firefly.AvailableBudgetSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AvailableBudgetSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreAvailableBudgetRequest) firefly.AvailableBudgetSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AvailableBudgetSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreAvailableBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreAvailableBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateAvailableBudget provides a mock function with given fields: ctx, id
func (_m *AvailableBudgetsApi) UpdateAvailableBudget(ctx context.Context, id int32) firefly.ApiUpdateAvailableBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateAvailableBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateAvailableBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateAvailableBudgetRequest)
	}

	return r0
}

// UpdateAvailableBudgetExecute provides a mock function with given fields: r
func (_m *AvailableBudgetsApi) UpdateAvailableBudgetExecute(r firefly.ApiUpdateAvailableBudgetRequest) (firefly.AvailableBudgetSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AvailableBudgetSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateAvailableBudgetRequest) firefly.AvailableBudgetSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AvailableBudgetSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateAvailableBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateAvailableBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
