// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// ChartsApi is an autogenerated mock type for the ChartsApi type
type ChartsApi struct {
	mock.Mock
}

// GetChartABOverview provides a mock function with given fields: ctx, id
func (_m *ChartsApi) GetChartABOverview(ctx context.Context, id int32) firefly.ApiGetChartABOverviewRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetChartABOverviewRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetChartABOverviewRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetChartABOverviewRequest)
	}

	return r0
}

// GetChartABOverviewExecute provides a mock function with given fields: r
func (_m *ChartsApi) GetChartABOverviewExecute(r firefly.ApiGetChartABOverviewRequest) ([]firefly.ChartDataSet, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.ChartDataSet
	if rf, ok := ret.Get(0).(func(firefly.ApiGetChartABOverviewRequest) []firefly.ChartDataSet); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.ChartDataSet)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetChartABOverviewRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetChartABOverviewRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetChartAccountExpense provides a mock function with given fields: ctx
func (_m *ChartsApi) GetChartAccountExpense(ctx context.Context) firefly.ApiGetChartAccountExpenseRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetChartAccountExpenseRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetChartAccountExpenseRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetChartAccountExpenseRequest)
	}

	return r0
}

// GetChartAccountExpenseExecute provides a mock function with given fields: r
func (_m *ChartsApi) GetChartAccountExpenseExecute(r firefly.ApiGetChartAccountExpenseRequest) ([]firefly.ChartDataSet, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.ChartDataSet
	if rf, ok := ret.Get(0).(func(firefly.ApiGetChartAccountExpenseRequest) []firefly.ChartDataSet); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.ChartDataSet)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetChartAccountExpenseRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetChartAccountExpenseRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetChartAccountOverview provides a mock function with given fields: ctx
func (_m *ChartsApi) GetChartAccountOverview(ctx context.Context) firefly.ApiGetChartAccountOverviewRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetChartAccountOverviewRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetChartAccountOverviewRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetChartAccountOverviewRequest)
	}

	return r0
}

// GetChartAccountOverviewExecute provides a mock function with given fields: r
func (_m *ChartsApi) GetChartAccountOverviewExecute(r firefly.ApiGetChartAccountOverviewRequest) ([]firefly.ChartDataSet, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.ChartDataSet
	if rf, ok := ret.Get(0).(func(firefly.ApiGetChartAccountOverviewRequest) []firefly.ChartDataSet); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.ChartDataSet)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetChartAccountOverviewRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetChartAccountOverviewRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetChartAccountRevenue provides a mock function with given fields: ctx
func (_m *ChartsApi) GetChartAccountRevenue(ctx context.Context) firefly.ApiGetChartAccountRevenueRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetChartAccountRevenueRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetChartAccountRevenueRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetChartAccountRevenueRequest)
	}

	return r0
}

// GetChartAccountRevenueExecute provides a mock function with given fields: r
func (_m *ChartsApi) GetChartAccountRevenueExecute(r firefly.ApiGetChartAccountRevenueRequest) ([]firefly.ChartDataSet, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.ChartDataSet
	if rf, ok := ret.Get(0).(func(firefly.ApiGetChartAccountRevenueRequest) []firefly.ChartDataSet); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.ChartDataSet)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetChartAccountRevenueRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetChartAccountRevenueRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetChartCategoryOverview provides a mock function with given fields: ctx
func (_m *ChartsApi) GetChartCategoryOverview(ctx context.Context) firefly.ApiGetChartCategoryOverviewRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetChartCategoryOverviewRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetChartCategoryOverviewRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetChartCategoryOverviewRequest)
	}

	return r0
}

// GetChartCategoryOverviewExecute provides a mock function with given fields: r
func (_m *ChartsApi) GetChartCategoryOverviewExecute(r firefly.ApiGetChartCategoryOverviewRequest) ([]firefly.ChartDataSet, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.ChartDataSet
	if rf, ok := ret.Get(0).(func(firefly.ApiGetChartCategoryOverviewRequest) []firefly.ChartDataSet); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.ChartDataSet)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetChartCategoryOverviewRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetChartCategoryOverviewRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
