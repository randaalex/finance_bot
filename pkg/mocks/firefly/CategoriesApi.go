// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// CategoriesApi is an autogenerated mock type for the CategoriesApi type
type CategoriesApi struct {
	mock.Mock
}

// DeleteCategory provides a mock function with given fields: ctx, id
func (_m *CategoriesApi) DeleteCategory(ctx context.Context, id int32) firefly.ApiDeleteCategoryRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteCategoryRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteCategoryRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteCategoryRequest)
	}

	return r0
}

// DeleteCategoryExecute provides a mock function with given fields: r
func (_m *CategoriesApi) DeleteCategoryExecute(r firefly.ApiDeleteCategoryRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteCategoryRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteCategoryRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategory provides a mock function with given fields: ctx, id
func (_m *CategoriesApi) GetCategory(ctx context.Context, id int32) firefly.ApiGetCategoryRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetCategoryRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetCategoryRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetCategoryRequest)
	}

	return r0
}

// GetCategoryExecute provides a mock function with given fields: r
func (_m *CategoriesApi) GetCategoryExecute(r firefly.ApiGetCategoryRequest) (firefly.CategorySingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.CategorySingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetCategoryRequest) firefly.CategorySingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.CategorySingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetCategoryRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetCategoryRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAttachmentByCategory provides a mock function with given fields: ctx, id
func (_m *CategoriesApi) ListAttachmentByCategory(ctx context.Context, id int32) firefly.ApiListAttachmentByCategoryRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListAttachmentByCategoryRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListAttachmentByCategoryRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListAttachmentByCategoryRequest)
	}

	return r0
}

// ListAttachmentByCategoryExecute provides a mock function with given fields: r
func (_m *CategoriesApi) ListAttachmentByCategoryExecute(r firefly.ApiListAttachmentByCategoryRequest) (firefly.AttachmentArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AttachmentArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListAttachmentByCategoryRequest) firefly.AttachmentArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AttachmentArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListAttachmentByCategoryRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListAttachmentByCategoryRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListCategory provides a mock function with given fields: ctx
func (_m *CategoriesApi) ListCategory(ctx context.Context) firefly.ApiListCategoryRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListCategoryRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListCategoryRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListCategoryRequest)
	}

	return r0
}

// ListCategoryExecute provides a mock function with given fields: r
func (_m *CategoriesApi) ListCategoryExecute(r firefly.ApiListCategoryRequest) (firefly.CategoryArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.CategoryArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListCategoryRequest) firefly.CategoryArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.CategoryArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListCategoryRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListCategoryRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactionByCategory provides a mock function with given fields: ctx, id
func (_m *CategoriesApi) ListTransactionByCategory(ctx context.Context, id int32) firefly.ApiListTransactionByCategoryRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListTransactionByCategoryRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListTransactionByCategoryRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionByCategoryRequest)
	}

	return r0
}

// ListTransactionByCategoryExecute provides a mock function with given fields: r
func (_m *CategoriesApi) ListTransactionByCategoryExecute(r firefly.ApiListTransactionByCategoryRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionByCategoryRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionByCategoryRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionByCategoryRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreCategory provides a mock function with given fields: ctx
func (_m *CategoriesApi) StoreCategory(ctx context.Context) firefly.ApiStoreCategoryRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreCategoryRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreCategoryRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreCategoryRequest)
	}

	return r0
}

// StoreCategoryExecute provides a mock function with given fields: r
func (_m *CategoriesApi) StoreCategoryExecute(r firefly.ApiStoreCategoryRequest) (firefly.CategorySingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.CategorySingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreCategoryRequest) firefly.CategorySingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.CategorySingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreCategoryRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreCategoryRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateCategory provides a mock function with given fields: ctx, id
func (_m *CategoriesApi) UpdateCategory(ctx context.Context, id int32) firefly.ApiUpdateCategoryRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateCategoryRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateCategoryRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateCategoryRequest)
	}

	return r0
}

// UpdateCategoryExecute provides a mock function with given fields: r
func (_m *CategoriesApi) UpdateCategoryExecute(r firefly.ApiUpdateCategoryRequest) (firefly.CategorySingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.CategorySingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateCategoryRequest) firefly.CategorySingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.CategorySingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateCategoryRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateCategoryRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
