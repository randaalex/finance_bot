// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// UsersApi is an autogenerated mock type for the UsersApi type
type UsersApi struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UsersApi) DeleteUser(ctx context.Context, id int32) firefly.ApiDeleteUserRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteUserRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteUserRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteUserRequest)
	}

	return r0
}

// DeleteUserExecute provides a mock function with given fields: r
func (_m *UsersApi) DeleteUserExecute(r firefly.ApiDeleteUserRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteUserRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteUserRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *UsersApi) GetUser(ctx context.Context, id int32) firefly.ApiGetUserRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetUserRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetUserRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetUserRequest)
	}

	return r0
}

// GetUserExecute provides a mock function with given fields: r
func (_m *UsersApi) GetUserExecute(r firefly.ApiGetUserRequest) (firefly.UserSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.UserSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetUserRequest) firefly.UserSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.UserSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListUser provides a mock function with given fields: ctx
func (_m *UsersApi) ListUser(ctx context.Context) firefly.ApiListUserRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListUserRequest)
	}

	return r0
}

// ListUserExecute provides a mock function with given fields: r
func (_m *UsersApi) ListUserExecute(r firefly.ApiListUserRequest) (firefly.UserArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.UserArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListUserRequest) firefly.UserArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.UserArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreUser provides a mock function with given fields: ctx
func (_m *UsersApi) StoreUser(ctx context.Context) firefly.ApiStoreUserRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreUserRequest)
	}

	return r0
}

// StoreUserExecute provides a mock function with given fields: r
func (_m *UsersApi) StoreUserExecute(r firefly.ApiStoreUserRequest) (firefly.UserSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.UserSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreUserRequest) firefly.UserSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.UserSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUser provides a mock function with given fields: ctx, id
func (_m *UsersApi) UpdateUser(ctx context.Context, id int32) firefly.ApiUpdateUserRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateUserRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateUserRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateUserRequest)
	}

	return r0
}

// UpdateUserExecute provides a mock function with given fields: r
func (_m *UsersApi) UpdateUserExecute(r firefly.ApiUpdateUserRequest) (firefly.UserSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.UserSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateUserRequest) firefly.UserSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.UserSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
