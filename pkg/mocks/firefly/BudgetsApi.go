// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// BudgetsApi is an autogenerated mock type for the BudgetsApi type
type BudgetsApi struct {
	mock.Mock
}

// DeleteBudget provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) DeleteBudget(ctx context.Context, id int32) firefly.ApiDeleteBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteBudgetRequest)
	}

	return r0
}

// DeleteBudgetExecute provides a mock function with given fields: r
func (_m *BudgetsApi) DeleteBudgetExecute(r firefly.ApiDeleteBudgetRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteBudgetRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteBudgetRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBudgetLimit provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) DeleteBudgetLimit(ctx context.Context, id int32) firefly.ApiDeleteBudgetLimitRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteBudgetLimitRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteBudgetLimitRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteBudgetLimitRequest)
	}

	return r0
}

// DeleteBudgetLimitExecute provides a mock function with given fields: r
func (_m *BudgetsApi) DeleteBudgetLimitExecute(r firefly.ApiDeleteBudgetLimitRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteBudgetLimitRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteBudgetLimitRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudget provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) GetBudget(ctx context.Context, id int32) firefly.ApiGetBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetBudgetRequest)
	}

	return r0
}

// GetBudgetExecute provides a mock function with given fields: r
func (_m *BudgetsApi) GetBudgetExecute(r firefly.ApiGetBudgetRequest) (firefly.BudgetSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BudgetSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetBudgetRequest) firefly.BudgetSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BudgetSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBudgetLimit provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) GetBudgetLimit(ctx context.Context, id int32) firefly.ApiGetBudgetLimitRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetBudgetLimitRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetBudgetLimitRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetBudgetLimitRequest)
	}

	return r0
}

// GetBudgetLimitExecute provides a mock function with given fields: r
func (_m *BudgetsApi) GetBudgetLimitExecute(r firefly.ApiGetBudgetLimitRequest) (firefly.BudgetLimitSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BudgetLimitSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetBudgetLimitRequest) firefly.BudgetLimitSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BudgetLimitSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetBudgetLimitRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetBudgetLimitRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAttachmentByBudget provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) ListAttachmentByBudget(ctx context.Context, id int32) firefly.ApiListAttachmentByBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListAttachmentByBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListAttachmentByBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListAttachmentByBudgetRequest)
	}

	return r0
}

// ListAttachmentByBudgetExecute provides a mock function with given fields: r
func (_m *BudgetsApi) ListAttachmentByBudgetExecute(r firefly.ApiListAttachmentByBudgetRequest) (firefly.AttachmentArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AttachmentArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListAttachmentByBudgetRequest) firefly.AttachmentArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AttachmentArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListAttachmentByBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListAttachmentByBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBudget provides a mock function with given fields: ctx
func (_m *BudgetsApi) ListBudget(ctx context.Context) firefly.ApiListBudgetRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListBudgetRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListBudgetRequest)
	}

	return r0
}

// ListBudgetExecute provides a mock function with given fields: r
func (_m *BudgetsApi) ListBudgetExecute(r firefly.ApiListBudgetRequest) (firefly.BudgetArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BudgetArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListBudgetRequest) firefly.BudgetArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BudgetArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBudgetLimitByBudget provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) ListBudgetLimitByBudget(ctx context.Context, id int32) firefly.ApiListBudgetLimitByBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListBudgetLimitByBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListBudgetLimitByBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListBudgetLimitByBudgetRequest)
	}

	return r0
}

// ListBudgetLimitByBudgetExecute provides a mock function with given fields: r
func (_m *BudgetsApi) ListBudgetLimitByBudgetExecute(r firefly.ApiListBudgetLimitByBudgetRequest) (firefly.BudgetLimitArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BudgetLimitArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListBudgetLimitByBudgetRequest) firefly.BudgetLimitArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BudgetLimitArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListBudgetLimitByBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListBudgetLimitByBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactionByBudget provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) ListTransactionByBudget(ctx context.Context, id int32) firefly.ApiListTransactionByBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListTransactionByBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListTransactionByBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionByBudgetRequest)
	}

	return r0
}

// ListTransactionByBudgetExecute provides a mock function with given fields: r
func (_m *BudgetsApi) ListTransactionByBudgetExecute(r firefly.ApiListTransactionByBudgetRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionByBudgetRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionByBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionByBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactionByBudgetLimit provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) ListTransactionByBudgetLimit(ctx context.Context, id int32) firefly.ApiListTransactionByBudgetLimitRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListTransactionByBudgetLimitRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListTransactionByBudgetLimitRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionByBudgetLimitRequest)
	}

	return r0
}

// ListTransactionByBudgetLimitExecute provides a mock function with given fields: r
func (_m *BudgetsApi) ListTransactionByBudgetLimitExecute(r firefly.ApiListTransactionByBudgetLimitRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionByBudgetLimitRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionByBudgetLimitRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionByBudgetLimitRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreBudget provides a mock function with given fields: ctx
func (_m *BudgetsApi) StoreBudget(ctx context.Context) firefly.ApiStoreBudgetRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreBudgetRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreBudgetRequest)
	}

	return r0
}

// StoreBudgetExecute provides a mock function with given fields: r
func (_m *BudgetsApi) StoreBudgetExecute(r firefly.ApiStoreBudgetRequest) (firefly.BudgetSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BudgetSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreBudgetRequest) firefly.BudgetSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BudgetSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreBudgetLimit provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) StoreBudgetLimit(ctx context.Context, id int32) firefly.ApiStoreBudgetLimitRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiStoreBudgetLimitRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiStoreBudgetLimitRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreBudgetLimitRequest)
	}

	return r0
}

// StoreBudgetLimitExecute provides a mock function with given fields: r
func (_m *BudgetsApi) StoreBudgetLimitExecute(r firefly.ApiStoreBudgetLimitRequest) (firefly.BudgetLimitSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BudgetLimitSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreBudgetLimitRequest) firefly.BudgetLimitSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BudgetLimitSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreBudgetLimitRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreBudgetLimitRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateBudget provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) UpdateBudget(ctx context.Context, id int32) firefly.ApiUpdateBudgetRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateBudgetRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateBudgetRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateBudgetRequest)
	}

	return r0
}

// UpdateBudgetExecute provides a mock function with given fields: r
func (_m *BudgetsApi) UpdateBudgetExecute(r firefly.ApiUpdateBudgetRequest) (firefly.BudgetSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BudgetSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateBudgetRequest) firefly.BudgetSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BudgetSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateBudgetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateBudgetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateBudgetLimit provides a mock function with given fields: ctx, id
func (_m *BudgetsApi) UpdateBudgetLimit(ctx context.Context, id int32) firefly.ApiUpdateBudgetLimitRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateBudgetLimitRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateBudgetLimitRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateBudgetLimitRequest)
	}

	return r0
}

// UpdateBudgetLimitExecute provides a mock function with given fields: r
func (_m *BudgetsApi) UpdateBudgetLimitExecute(r firefly.ApiUpdateBudgetLimitRequest) (firefly.BudgetLimitSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BudgetLimitSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateBudgetLimitRequest) firefly.BudgetLimitSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BudgetLimitSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateBudgetLimitRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateBudgetLimitRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
