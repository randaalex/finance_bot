// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// TransactionsApi is an autogenerated mock type for the TransactionsApi type
type TransactionsApi struct {
	mock.Mock
}

// DeleteTransaction provides a mock function with given fields: ctx, id
func (_m *TransactionsApi) DeleteTransaction(ctx context.Context, id int32) firefly.ApiDeleteTransactionRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteTransactionRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteTransactionRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteTransactionRequest)
	}

	return r0
}

// DeleteTransactionExecute provides a mock function with given fields: r
func (_m *TransactionsApi) DeleteTransactionExecute(r firefly.ApiDeleteTransactionRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteTransactionRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteTransactionRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, id
func (_m *TransactionsApi) GetTransaction(ctx context.Context, id int32) firefly.ApiGetTransactionRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetTransactionRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetTransactionRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetTransactionRequest)
	}

	return r0
}

// GetTransactionByJournal provides a mock function with given fields: ctx, id
func (_m *TransactionsApi) GetTransactionByJournal(ctx context.Context, id int32) firefly.ApiGetTransactionByJournalRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetTransactionByJournalRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetTransactionByJournalRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetTransactionByJournalRequest)
	}

	return r0
}

// GetTransactionByJournalExecute provides a mock function with given fields: r
func (_m *TransactionsApi) GetTransactionByJournalExecute(r firefly.ApiGetTransactionByJournalRequest) (firefly.TransactionSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetTransactionByJournalRequest) firefly.TransactionSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetTransactionByJournalRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetTransactionByJournalRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTransactionExecute provides a mock function with given fields: r
func (_m *TransactionsApi) GetTransactionExecute(r firefly.ApiGetTransactionRequest) (firefly.TransactionSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetTransactionRequest) firefly.TransactionSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetTransactionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetTransactionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAttachmentByTransaction provides a mock function with given fields: ctx, id
func (_m *TransactionsApi) ListAttachmentByTransaction(ctx context.Context, id int32) firefly.ApiListAttachmentByTransactionRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListAttachmentByTransactionRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListAttachmentByTransactionRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListAttachmentByTransactionRequest)
	}

	return r0
}

// ListAttachmentByTransactionExecute provides a mock function with given fields: r
func (_m *TransactionsApi) ListAttachmentByTransactionExecute(r firefly.ApiListAttachmentByTransactionRequest) (firefly.AttachmentArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AttachmentArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListAttachmentByTransactionRequest) firefly.AttachmentArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AttachmentArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListAttachmentByTransactionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListAttachmentByTransactionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListEventByTransaction provides a mock function with given fields: ctx, id
func (_m *TransactionsApi) ListEventByTransaction(ctx context.Context, id int32) firefly.ApiListEventByTransactionRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListEventByTransactionRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListEventByTransactionRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListEventByTransactionRequest)
	}

	return r0
}

// ListEventByTransactionExecute provides a mock function with given fields: r
func (_m *TransactionsApi) ListEventByTransactionExecute(r firefly.ApiListEventByTransactionRequest) (firefly.PiggyBankEventArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.PiggyBankEventArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListEventByTransactionRequest) firefly.PiggyBankEventArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.PiggyBankEventArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListEventByTransactionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListEventByTransactionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransaction provides a mock function with given fields: ctx
func (_m *TransactionsApi) ListTransaction(ctx context.Context) firefly.ApiListTransactionRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListTransactionRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListTransactionRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionRequest)
	}

	return r0
}

// ListTransactionExecute provides a mock function with given fields: r
func (_m *TransactionsApi) ListTransactionExecute(r firefly.ApiListTransactionRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreTransaction provides a mock function with given fields: ctx
func (_m *TransactionsApi) StoreTransaction(ctx context.Context) firefly.ApiStoreTransactionRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreTransactionRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreTransactionRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreTransactionRequest)
	}

	return r0
}

// StoreTransactionExecute provides a mock function with given fields: r
func (_m *TransactionsApi) StoreTransactionExecute(r firefly.ApiStoreTransactionRequest) (firefly.TransactionSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreTransactionRequest) firefly.TransactionSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreTransactionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreTransactionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateTransaction provides a mock function with given fields: ctx, id
func (_m *TransactionsApi) UpdateTransaction(ctx context.Context, id int32) firefly.ApiUpdateTransactionRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateTransactionRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateTransactionRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateTransactionRequest)
	}

	return r0
}

// UpdateTransactionExecute provides a mock function with given fields: r
func (_m *TransactionsApi) UpdateTransactionExecute(r firefly.ApiUpdateTransactionRequest) (firefly.TransactionSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateTransactionRequest) firefly.TransactionSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateTransactionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateTransactionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
