// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// RulesApi is an autogenerated mock type for the RulesApi type
type RulesApi struct {
	mock.Mock
}

// DeleteRule provides a mock function with given fields: ctx, id
func (_m *RulesApi) DeleteRule(ctx context.Context, id int32) firefly.ApiDeleteRuleRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteRuleRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteRuleRequest)
	}

	return r0
}

// DeleteRuleExecute provides a mock function with given fields: r
func (_m *RulesApi) DeleteRuleExecute(r firefly.ApiDeleteRuleRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteRuleRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteRuleRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FireRule provides a mock function with given fields: ctx, id
func (_m *RulesApi) FireRule(ctx context.Context, id int32) firefly.ApiFireRuleRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiFireRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiFireRuleRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiFireRuleRequest)
	}

	return r0
}

// FireRuleExecute provides a mock function with given fields: r
func (_m *RulesApi) FireRuleExecute(r firefly.ApiFireRuleRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiFireRuleRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiFireRuleRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRule provides a mock function with given fields: ctx, id
func (_m *RulesApi) GetRule(ctx context.Context, id int32) firefly.ApiGetRuleRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetRuleRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetRuleRequest)
	}

	return r0
}

// GetRuleExecute provides a mock function with given fields: r
func (_m *RulesApi) GetRuleExecute(r firefly.ApiGetRuleRequest) (firefly.RuleSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RuleSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetRuleRequest) firefly.RuleSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RuleSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListRule provides a mock function with given fields: ctx
func (_m *RulesApi) ListRule(ctx context.Context) firefly.ApiListRuleRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListRuleRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListRuleRequest)
	}

	return r0
}

// ListRuleExecute provides a mock function with given fields: r
func (_m *RulesApi) ListRuleExecute(r firefly.ApiListRuleRequest) (firefly.RuleArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RuleArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListRuleRequest) firefly.RuleArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RuleArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreRule provides a mock function with given fields: ctx
func (_m *RulesApi) StoreRule(ctx context.Context) firefly.ApiStoreRuleRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreRuleRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreRuleRequest)
	}

	return r0
}

// StoreRuleExecute provides a mock function with given fields: r
func (_m *RulesApi) StoreRuleExecute(r firefly.ApiStoreRuleRequest) (firefly.RuleSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RuleSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreRuleRequest) firefly.RuleSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RuleSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TestRule provides a mock function with given fields: ctx, id
func (_m *RulesApi) TestRule(ctx context.Context, id int32) firefly.ApiTestRuleRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiTestRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiTestRuleRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiTestRuleRequest)
	}

	return r0
}

// TestRuleExecute provides a mock function with given fields: r
func (_m *RulesApi) TestRuleExecute(r firefly.ApiTestRuleRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiTestRuleRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiTestRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiTestRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRule provides a mock function with given fields: ctx, id
func (_m *RulesApi) UpdateRule(ctx context.Context, id int32) firefly.ApiUpdateRuleRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateRuleRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateRuleRequest)
	}

	return r0
}

// UpdateRuleExecute provides a mock function with given fields: r
func (_m *RulesApi) UpdateRuleExecute(r firefly.ApiUpdateRuleRequest) (firefly.RuleSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RuleSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateRuleRequest) firefly.RuleSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RuleSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
