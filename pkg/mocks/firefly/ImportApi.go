// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// ImportApi is an autogenerated mock type for the ImportApi type
type ImportApi struct {
	mock.Mock
}

// GetImport provides a mock function with given fields: ctx, key
func (_m *ImportApi) GetImport(ctx context.Context, key string) firefly.ApiGetImportRequest {
	ret := _m.Called(ctx, key)

	var r0 firefly.ApiGetImportRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiGetImportRequest); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetImportRequest)
	}

	return r0
}

// GetImportExecute provides a mock function with given fields: r
func (_m *ImportApi) GetImportExecute(r firefly.ApiGetImportRequest) (firefly.ImportJobSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.ImportJobSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetImportRequest) firefly.ImportJobSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.ImportJobSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetImportRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetImportRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListImport provides a mock function with given fields: ctx
func (_m *ImportApi) ListImport(ctx context.Context) firefly.ApiListImportRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListImportRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListImportRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListImportRequest)
	}

	return r0
}

// ListImportExecute provides a mock function with given fields: r
func (_m *ImportApi) ListImportExecute(r firefly.ApiListImportRequest) (firefly.ImportJobArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.ImportJobArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListImportRequest) firefly.ImportJobArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.ImportJobArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListImportRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListImportRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactionByImport provides a mock function with given fields: ctx, key
func (_m *ImportApi) ListTransactionByImport(ctx context.Context, key string) firefly.ApiListTransactionByImportRequest {
	ret := _m.Called(ctx, key)

	var r0 firefly.ApiListTransactionByImportRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiListTransactionByImportRequest); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionByImportRequest)
	}

	return r0
}

// ListTransactionByImportExecute provides a mock function with given fields: r
func (_m *ImportApi) ListTransactionByImportExecute(r firefly.ApiListTransactionByImportRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionByImportRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionByImportRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionByImportRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
