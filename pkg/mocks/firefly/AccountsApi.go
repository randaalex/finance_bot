// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// AccountsApi is an autogenerated mock type for the AccountsApi type
type AccountsApi struct {
	mock.Mock
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *AccountsApi) DeleteAccount(ctx context.Context, id int32) firefly.ApiDeleteAccountRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteAccountRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteAccountRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteAccountRequest)
	}

	return r0
}

// DeleteAccountExecute provides a mock function with given fields: r
func (_m *AccountsApi) DeleteAccountExecute(r firefly.ApiDeleteAccountRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteAccountRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteAccountRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *AccountsApi) GetAccount(ctx context.Context, id int32) firefly.ApiGetAccountRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetAccountRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetAccountRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetAccountRequest)
	}

	return r0
}

// GetAccountExecute provides a mock function with given fields: r
func (_m *AccountsApi) GetAccountExecute(r firefly.ApiGetAccountRequest) (firefly.AccountSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AccountSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetAccountRequest) firefly.AccountSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AccountSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetAccountRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetAccountRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAccount provides a mock function with given fields: ctx
func (_m *AccountsApi) ListAccount(ctx context.Context) firefly.ApiListAccountRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListAccountRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListAccountRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListAccountRequest)
	}

	return r0
}

// ListAccountExecute provides a mock function with given fields: r
func (_m *AccountsApi) ListAccountExecute(r firefly.ApiListAccountRequest) (firefly.AccountArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AccountArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListAccountRequest) firefly.AccountArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AccountArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListAccountRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListAccountRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAttachmentByAccount provides a mock function with given fields: ctx, id
func (_m *AccountsApi) ListAttachmentByAccount(ctx context.Context, id int32) firefly.ApiListAttachmentByAccountRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListAttachmentByAccountRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListAttachmentByAccountRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListAttachmentByAccountRequest)
	}

	return r0
}

// ListAttachmentByAccountExecute provides a mock function with given fields: r
func (_m *AccountsApi) ListAttachmentByAccountExecute(r firefly.ApiListAttachmentByAccountRequest) (firefly.AttachmentArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AttachmentArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListAttachmentByAccountRequest) firefly.AttachmentArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AttachmentArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListAttachmentByAccountRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListAttachmentByAccountRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPiggyBankByAccount provides a mock function with given fields: ctx, id
func (_m *AccountsApi) ListPiggyBankByAccount(ctx context.Context, id int32) firefly.ApiListPiggyBankByAccountRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListPiggyBankByAccountRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListPiggyBankByAccountRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListPiggyBankByAccountRequest)
	}

	return r0
}

// ListPiggyBankByAccountExecute provides a mock function with given fields: r
func (_m *AccountsApi) ListPiggyBankByAccountExecute(r firefly.ApiListPiggyBankByAccountRequest) (firefly.PiggyBankArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.PiggyBankArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListPiggyBankByAccountRequest) firefly.PiggyBankArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.PiggyBankArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListPiggyBankByAccountRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListPiggyBankByAccountRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactionByAccount provides a mock function with given fields: ctx, id
func (_m *AccountsApi) ListTransactionByAccount(ctx context.Context, id int32) firefly.ApiListTransactionByAccountRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListTransactionByAccountRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListTransactionByAccountRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionByAccountRequest)
	}

	return r0
}

// ListTransactionByAccountExecute provides a mock function with given fields: r
func (_m *AccountsApi) ListTransactionByAccountExecute(r firefly.ApiListTransactionByAccountRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionByAccountRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionByAccountRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionByAccountRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreAccount provides a mock function with given fields: ctx
func (_m *AccountsApi) StoreAccount(ctx context.Context) firefly.ApiStoreAccountRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreAccountRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreAccountRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreAccountRequest)
	}

	return r0
}

// StoreAccountExecute provides a mock function with given fields: r
func (_m *AccountsApi) StoreAccountExecute(r firefly.ApiStoreAccountRequest) (firefly.AccountSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AccountSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreAccountRequest) firefly.AccountSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AccountSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreAccountRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreAccountRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateAccount provides a mock function with given fields: ctx, id
func (_m *AccountsApi) UpdateAccount(ctx context.Context, id int32) firefly.ApiUpdateAccountRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateAccountRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateAccountRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateAccountRequest)
	}

	return r0
}

// UpdateAccountExecute provides a mock function with given fields: r
func (_m *AccountsApi) UpdateAccountExecute(r firefly.ApiUpdateAccountRequest) (firefly.AccountSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AccountSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateAccountRequest) firefly.AccountSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AccountSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateAccountRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateAccountRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
