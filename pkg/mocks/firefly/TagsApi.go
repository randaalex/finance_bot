// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// TagsApi is an autogenerated mock type for the TagsApi type
type TagsApi struct {
	mock.Mock
}

// DeleteTag provides a mock function with given fields: ctx, tag
func (_m *TagsApi) DeleteTag(ctx context.Context, tag string) firefly.ApiDeleteTagRequest {
	ret := _m.Called(ctx, tag)

	var r0 firefly.ApiDeleteTagRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiDeleteTagRequest); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteTagRequest)
	}

	return r0
}

// DeleteTagExecute provides a mock function with given fields: r
func (_m *TagsApi) DeleteTagExecute(r firefly.ApiDeleteTagRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteTagRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteTagRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTag provides a mock function with given fields: ctx, tag
func (_m *TagsApi) GetTag(ctx context.Context, tag string) firefly.ApiGetTagRequest {
	ret := _m.Called(ctx, tag)

	var r0 firefly.ApiGetTagRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiGetTagRequest); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetTagRequest)
	}

	return r0
}

// GetTagCloud provides a mock function with given fields: ctx
func (_m *TagsApi) GetTagCloud(ctx context.Context) firefly.ApiGetTagCloudRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetTagCloudRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetTagCloudRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetTagCloudRequest)
	}

	return r0
}

// GetTagCloudExecute provides a mock function with given fields: r
func (_m *TagsApi) GetTagCloudExecute(r firefly.ApiGetTagCloudRequest) (firefly.TagCloud, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TagCloud
	if rf, ok := ret.Get(0).(func(firefly.ApiGetTagCloudRequest) firefly.TagCloud); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TagCloud)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetTagCloudRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetTagCloudRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTagExecute provides a mock function with given fields: r
func (_m *TagsApi) GetTagExecute(r firefly.ApiGetTagRequest) (firefly.TagSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TagSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetTagRequest) firefly.TagSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TagSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetTagRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetTagRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAttachmentByTag provides a mock function with given fields: ctx, tag
func (_m *TagsApi) ListAttachmentByTag(ctx context.Context, tag string) firefly.ApiListAttachmentByTagRequest {
	ret := _m.Called(ctx, tag)

	var r0 firefly.ApiListAttachmentByTagRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiListAttachmentByTagRequest); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Get(0).(firefly.ApiListAttachmentByTagRequest)
	}

	return r0
}

// ListAttachmentByTagExecute provides a mock function with given fields: r
func (_m *TagsApi) ListAttachmentByTagExecute(r firefly.ApiListAttachmentByTagRequest) (firefly.AttachmentArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AttachmentArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListAttachmentByTagRequest) firefly.AttachmentArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AttachmentArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListAttachmentByTagRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListAttachmentByTagRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTag provides a mock function with given fields: ctx
func (_m *TagsApi) ListTag(ctx context.Context) firefly.ApiListTagRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListTagRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListTagRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTagRequest)
	}

	return r0
}

// ListTagExecute provides a mock function with given fields: r
func (_m *TagsApi) ListTagExecute(r firefly.ApiListTagRequest) (firefly.TagArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TagArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTagRequest) firefly.TagArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TagArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTagRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTagRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactionByTag provides a mock function with given fields: ctx, tag
func (_m *TagsApi) ListTransactionByTag(ctx context.Context, tag string) firefly.ApiListTransactionByTagRequest {
	ret := _m.Called(ctx, tag)

	var r0 firefly.ApiListTransactionByTagRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiListTransactionByTagRequest); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionByTagRequest)
	}

	return r0
}

// ListTransactionByTagExecute provides a mock function with given fields: r
func (_m *TagsApi) ListTransactionByTagExecute(r firefly.ApiListTransactionByTagRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionByTagRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionByTagRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionByTagRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreTag provides a mock function with given fields: ctx
func (_m *TagsApi) StoreTag(ctx context.Context) firefly.ApiStoreTagRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreTagRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreTagRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreTagRequest)
	}

	return r0
}

// StoreTagExecute provides a mock function with given fields: r
func (_m *TagsApi) StoreTagExecute(r firefly.ApiStoreTagRequest) (firefly.TagSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TagSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreTagRequest) firefly.TagSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TagSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreTagRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreTagRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateTag provides a mock function with given fields: ctx, tag
func (_m *TagsApi) UpdateTag(ctx context.Context, tag string) firefly.ApiUpdateTagRequest {
	ret := _m.Called(ctx, tag)

	var r0 firefly.ApiUpdateTagRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiUpdateTagRequest); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateTagRequest)
	}

	return r0
}

// UpdateTagExecute provides a mock function with given fields: r
func (_m *TagsApi) UpdateTagExecute(r firefly.ApiUpdateTagRequest) (firefly.TagSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TagSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateTagRequest) firefly.TagSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TagSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateTagRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateTagRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
