// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// BillsApi is an autogenerated mock type for the BillsApi type
type BillsApi struct {
	mock.Mock
}

// DeleteBill provides a mock function with given fields: ctx, id
func (_m *BillsApi) DeleteBill(ctx context.Context, id int32) firefly.ApiDeleteBillRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteBillRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteBillRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteBillRequest)
	}

	return r0
}

// DeleteBillExecute provides a mock function with given fields: r
func (_m *BillsApi) DeleteBillExecute(r firefly.ApiDeleteBillRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteBillRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteBillRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBill provides a mock function with given fields: ctx, id
func (_m *BillsApi) GetBill(ctx context.Context, id int32) firefly.ApiGetBillRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetBillRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetBillRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetBillRequest)
	}

	return r0
}

// GetBillExecute provides a mock function with given fields: r
func (_m *BillsApi) GetBillExecute(r firefly.ApiGetBillRequest) (firefly.BillSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BillSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetBillRequest) firefly.BillSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BillSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetBillRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetBillRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListAttachmentByBill provides a mock function with given fields: ctx, id
func (_m *BillsApi) ListAttachmentByBill(ctx context.Context, id int32) firefly.ApiListAttachmentByBillRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListAttachmentByBillRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListAttachmentByBillRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListAttachmentByBillRequest)
	}

	return r0
}

// ListAttachmentByBillExecute provides a mock function with given fields: r
func (_m *BillsApi) ListAttachmentByBillExecute(r firefly.ApiListAttachmentByBillRequest) (firefly.AttachmentArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.AttachmentArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListAttachmentByBillRequest) firefly.AttachmentArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.AttachmentArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListAttachmentByBillRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListAttachmentByBillRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBill provides a mock function with given fields: ctx
func (_m *BillsApi) ListBill(ctx context.Context) firefly.ApiListBillRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListBillRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListBillRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListBillRequest)
	}

	return r0
}

// ListBillExecute provides a mock function with given fields: r
func (_m *BillsApi) ListBillExecute(r firefly.ApiListBillRequest) (firefly.BillArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BillArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListBillRequest) firefly.BillArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BillArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListBillRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListBillRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListRuleByBill provides a mock function with given fields: ctx, id
func (_m *BillsApi) ListRuleByBill(ctx context.Context, id int32) firefly.ApiListRuleByBillRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListRuleByBillRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListRuleByBillRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListRuleByBillRequest)
	}

	return r0
}

// ListRuleByBillExecute provides a mock function with given fields: r
func (_m *BillsApi) ListRuleByBillExecute(r firefly.ApiListRuleByBillRequest) (firefly.RuleArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RuleArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListRuleByBillRequest) firefly.RuleArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RuleArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListRuleByBillRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListRuleByBillRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactionByBill provides a mock function with given fields: ctx, id
func (_m *BillsApi) ListTransactionByBill(ctx context.Context, id int32) firefly.ApiListTransactionByBillRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListTransactionByBillRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListTransactionByBillRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionByBillRequest)
	}

	return r0
}

// ListTransactionByBillExecute provides a mock function with given fields: r
func (_m *BillsApi) ListTransactionByBillExecute(r firefly.ApiListTransactionByBillRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionByBillRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionByBillRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionByBillRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreBill provides a mock function with given fields: ctx
func (_m *BillsApi) StoreBill(ctx context.Context) firefly.ApiStoreBillRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreBillRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreBillRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreBillRequest)
	}

	return r0
}

// StoreBillExecute provides a mock function with given fields: r
func (_m *BillsApi) StoreBillExecute(r firefly.ApiStoreBillRequest) (firefly.BillSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BillSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreBillRequest) firefly.BillSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BillSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreBillRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreBillRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateBill provides a mock function with given fields: ctx, id
func (_m *BillsApi) UpdateBill(ctx context.Context, id int32) firefly.ApiUpdateBillRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateBillRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateBillRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateBillRequest)
	}

	return r0
}

// UpdateBillExecute provides a mock function with given fields: r
func (_m *BillsApi) UpdateBillExecute(r firefly.ApiUpdateBillRequest) (firefly.BillSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.BillSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateBillRequest) firefly.BillSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.BillSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateBillRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateBillRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
