// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// PreferencesApi is an autogenerated mock type for the PreferencesApi type
type PreferencesApi struct {
	mock.Mock
}

// GetPreference provides a mock function with given fields: ctx, name
func (_m *PreferencesApi) GetPreference(ctx context.Context, name string) firefly.ApiGetPreferenceRequest {
	ret := _m.Called(ctx, name)

	var r0 firefly.ApiGetPreferenceRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiGetPreferenceRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetPreferenceRequest)
	}

	return r0
}

// GetPreferenceExecute provides a mock function with given fields: r
func (_m *PreferencesApi) GetPreferenceExecute(r firefly.ApiGetPreferenceRequest) (firefly.PreferenceSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.PreferenceSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetPreferenceRequest) firefly.PreferenceSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.PreferenceSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetPreferenceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetPreferenceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListPreference provides a mock function with given fields: ctx
func (_m *PreferencesApi) ListPreference(ctx context.Context) firefly.ApiListPreferenceRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListPreferenceRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListPreferenceRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListPreferenceRequest)
	}

	return r0
}

// ListPreferenceExecute provides a mock function with given fields: r
func (_m *PreferencesApi) ListPreferenceExecute(r firefly.ApiListPreferenceRequest) (firefly.PreferenceArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.PreferenceArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListPreferenceRequest) firefly.PreferenceArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.PreferenceArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListPreferenceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListPreferenceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdatePreference provides a mock function with given fields: ctx, name
func (_m *PreferencesApi) UpdatePreference(ctx context.Context, name string) firefly.ApiUpdatePreferenceRequest {
	ret := _m.Called(ctx, name)

	var r0 firefly.ApiUpdatePreferenceRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) firefly.ApiUpdatePreferenceRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdatePreferenceRequest)
	}

	return r0
}

// UpdatePreferenceExecute provides a mock function with given fields: r
func (_m *PreferencesApi) UpdatePreferenceExecute(r firefly.ApiUpdatePreferenceRequest) (firefly.PreferenceSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.PreferenceSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdatePreferenceRequest) firefly.PreferenceSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.PreferenceSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdatePreferenceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdatePreferenceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
