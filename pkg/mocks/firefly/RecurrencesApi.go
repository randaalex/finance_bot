// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// RecurrencesApi is an autogenerated mock type for the RecurrencesApi type
type RecurrencesApi struct {
	mock.Mock
}

// DeleteRecurrence provides a mock function with given fields: ctx, id
func (_m *RecurrencesApi) DeleteRecurrence(ctx context.Context, id int32) firefly.ApiDeleteRecurrenceRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiDeleteRecurrenceRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiDeleteRecurrenceRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiDeleteRecurrenceRequest)
	}

	return r0
}

// DeleteRecurrenceExecute provides a mock function with given fields: r
func (_m *RecurrencesApi) DeleteRecurrenceExecute(r firefly.ApiDeleteRecurrenceRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiDeleteRecurrenceRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiDeleteRecurrenceRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecurrence provides a mock function with given fields: ctx, id
func (_m *RecurrencesApi) GetRecurrence(ctx context.Context, id int32) firefly.ApiGetRecurrenceRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiGetRecurrenceRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiGetRecurrenceRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetRecurrenceRequest)
	}

	return r0
}

// GetRecurrenceExecute provides a mock function with given fields: r
func (_m *RecurrencesApi) GetRecurrenceExecute(r firefly.ApiGetRecurrenceRequest) (firefly.RecurrenceSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RecurrenceSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiGetRecurrenceRequest) firefly.RecurrenceSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RecurrenceSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetRecurrenceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetRecurrenceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListRecurrence provides a mock function with given fields: ctx
func (_m *RecurrencesApi) ListRecurrence(ctx context.Context) firefly.ApiListRecurrenceRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiListRecurrenceRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiListRecurrenceRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiListRecurrenceRequest)
	}

	return r0
}

// ListRecurrenceExecute provides a mock function with given fields: r
func (_m *RecurrencesApi) ListRecurrenceExecute(r firefly.ApiListRecurrenceRequest) (firefly.RecurrenceArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RecurrenceArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListRecurrenceRequest) firefly.RecurrenceArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RecurrenceArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListRecurrenceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListRecurrenceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListTransactionByRecurrence provides a mock function with given fields: ctx, id
func (_m *RecurrencesApi) ListTransactionByRecurrence(ctx context.Context, id int32) firefly.ApiListTransactionByRecurrenceRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiListTransactionByRecurrenceRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiListTransactionByRecurrenceRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiListTransactionByRecurrenceRequest)
	}

	return r0
}

// ListTransactionByRecurrenceExecute provides a mock function with given fields: r
func (_m *RecurrencesApi) ListTransactionByRecurrenceExecute(r firefly.ApiListTransactionByRecurrenceRequest) (firefly.TransactionArray, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.TransactionArray
	if rf, ok := ret.Get(0).(func(firefly.ApiListTransactionByRecurrenceRequest) firefly.TransactionArray); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.TransactionArray)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiListTransactionByRecurrenceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiListTransactionByRecurrenceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// StoreRecurrence provides a mock function with given fields: ctx
func (_m *RecurrencesApi) StoreRecurrence(ctx context.Context) firefly.ApiStoreRecurrenceRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiStoreRecurrenceRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiStoreRecurrenceRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiStoreRecurrenceRequest)
	}

	return r0
}

// StoreRecurrenceExecute provides a mock function with given fields: r
func (_m *RecurrencesApi) StoreRecurrenceExecute(r firefly.ApiStoreRecurrenceRequest) (firefly.RecurrenceSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RecurrenceSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiStoreRecurrenceRequest) firefly.RecurrenceSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RecurrenceSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiStoreRecurrenceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiStoreRecurrenceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TriggerRecurrence provides a mock function with given fields: ctx
func (_m *RecurrencesApi) TriggerRecurrence(ctx context.Context) firefly.ApiTriggerRecurrenceRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiTriggerRecurrenceRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiTriggerRecurrenceRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiTriggerRecurrenceRequest)
	}

	return r0
}

// TriggerRecurrenceExecute provides a mock function with given fields: r
func (_m *RecurrencesApi) TriggerRecurrenceExecute(r firefly.ApiTriggerRecurrenceRequest) (*http.Response, error) {
	ret := _m.Called(r)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(firefly.ApiTriggerRecurrenceRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(firefly.ApiTriggerRecurrenceRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecurrence provides a mock function with given fields: ctx, id
func (_m *RecurrencesApi) UpdateRecurrence(ctx context.Context, id int32) firefly.ApiUpdateRecurrenceRequest {
	ret := _m.Called(ctx, id)

	var r0 firefly.ApiUpdateRecurrenceRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) firefly.ApiUpdateRecurrenceRequest); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(firefly.ApiUpdateRecurrenceRequest)
	}

	return r0
}

// UpdateRecurrenceExecute provides a mock function with given fields: r
func (_m *RecurrencesApi) UpdateRecurrenceExecute(r firefly.ApiUpdateRecurrenceRequest) (firefly.RecurrenceSingle, *http.Response, error) {
	ret := _m.Called(r)

	var r0 firefly.RecurrenceSingle
	if rf, ok := ret.Get(0).(func(firefly.ApiUpdateRecurrenceRequest) firefly.RecurrenceSingle); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(firefly.RecurrenceSingle)
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiUpdateRecurrenceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiUpdateRecurrenceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
