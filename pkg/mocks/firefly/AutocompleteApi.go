// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	firefly "github.com/randaalex/finance_bot/pkg/firefly"

	mock "github.com/stretchr/testify/mock"
)

// AutocompleteApi is an autogenerated mock type for the AutocompleteApi type
type AutocompleteApi struct {
	mock.Mock
}

// GetAccountsAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetAccountsAC(ctx context.Context) firefly.ApiGetAccountsACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetAccountsACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetAccountsACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetAccountsACRequest)
	}

	return r0
}

// GetAccountsACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetAccountsACExecute(r firefly.ApiGetAccountsACRequest) ([]firefly.AutocompleteAccount, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteAccount
	if rf, ok := ret.Get(0).(func(firefly.ApiGetAccountsACRequest) []firefly.AutocompleteAccount); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteAccount)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetAccountsACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetAccountsACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBillsAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetBillsAC(ctx context.Context) firefly.ApiGetBillsACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetBillsACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetBillsACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetBillsACRequest)
	}

	return r0
}

// GetBillsACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetBillsACExecute(r firefly.ApiGetBillsACRequest) ([]firefly.AutocompleteBill, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteBill
	if rf, ok := ret.Get(0).(func(firefly.ApiGetBillsACRequest) []firefly.AutocompleteBill); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteBill)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetBillsACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetBillsACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBudgetsAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetBudgetsAC(ctx context.Context) firefly.ApiGetBudgetsACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetBudgetsACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetBudgetsACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetBudgetsACRequest)
	}

	return r0
}

// GetBudgetsACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetBudgetsACExecute(r firefly.ApiGetBudgetsACRequest) ([]firefly.AutocompleteBudget, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteBudget
	if rf, ok := ret.Get(0).(func(firefly.ApiGetBudgetsACRequest) []firefly.AutocompleteBudget); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteBudget)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetBudgetsACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetBudgetsACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCategoriesAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetCategoriesAC(ctx context.Context) firefly.ApiGetCategoriesACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetCategoriesACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetCategoriesACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetCategoriesACRequest)
	}

	return r0
}

// GetCategoriesACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetCategoriesACExecute(r firefly.ApiGetCategoriesACRequest) ([]firefly.AutocompleteCategory, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteCategory
	if rf, ok := ret.Get(0).(func(firefly.ApiGetCategoriesACRequest) []firefly.AutocompleteCategory); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteCategory)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetCategoriesACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetCategoriesACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCurrenciesAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetCurrenciesAC(ctx context.Context) firefly.ApiGetCurrenciesACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetCurrenciesACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetCurrenciesACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetCurrenciesACRequest)
	}

	return r0
}

// GetCurrenciesACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetCurrenciesACExecute(r firefly.ApiGetCurrenciesACRequest) ([]firefly.AutocompleteCurrency, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteCurrency
	if rf, ok := ret.Get(0).(func(firefly.ApiGetCurrenciesACRequest) []firefly.AutocompleteCurrency); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteCurrency)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetCurrenciesACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetCurrenciesACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCurrenciesCodeAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetCurrenciesCodeAC(ctx context.Context) firefly.ApiGetCurrenciesCodeACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetCurrenciesCodeACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetCurrenciesCodeACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetCurrenciesCodeACRequest)
	}

	return r0
}

// GetCurrenciesCodeACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetCurrenciesCodeACExecute(r firefly.ApiGetCurrenciesCodeACRequest) ([]firefly.AutocompleteCurrencyCode, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteCurrencyCode
	if rf, ok := ret.Get(0).(func(firefly.ApiGetCurrenciesCodeACRequest) []firefly.AutocompleteCurrencyCode); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteCurrencyCode)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetCurrenciesCodeACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetCurrenciesCodeACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetObjectGroupsAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetObjectGroupsAC(ctx context.Context) firefly.ApiGetObjectGroupsACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetObjectGroupsACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetObjectGroupsACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetObjectGroupsACRequest)
	}

	return r0
}

// GetObjectGroupsACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetObjectGroupsACExecute(r firefly.ApiGetObjectGroupsACRequest) ([]firefly.AutocompleteObjectGroup, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteObjectGroup
	if rf, ok := ret.Get(0).(func(firefly.ApiGetObjectGroupsACRequest) []firefly.AutocompleteObjectGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteObjectGroup)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetObjectGroupsACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetObjectGroupsACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPiggiesAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetPiggiesAC(ctx context.Context) firefly.ApiGetPiggiesACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetPiggiesACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetPiggiesACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetPiggiesACRequest)
	}

	return r0
}

// GetPiggiesACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetPiggiesACExecute(r firefly.ApiGetPiggiesACRequest) ([]firefly.AutocompletePiggy, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompletePiggy
	if rf, ok := ret.Get(0).(func(firefly.ApiGetPiggiesACRequest) []firefly.AutocompletePiggy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompletePiggy)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetPiggiesACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetPiggiesACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPiggiesBalanceAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetPiggiesBalanceAC(ctx context.Context) firefly.ApiGetPiggiesBalanceACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetPiggiesBalanceACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetPiggiesBalanceACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetPiggiesBalanceACRequest)
	}

	return r0
}

// GetPiggiesBalanceACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetPiggiesBalanceACExecute(r firefly.ApiGetPiggiesBalanceACRequest) ([]firefly.AutocompletePiggyBalance, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompletePiggyBalance
	if rf, ok := ret.Get(0).(func(firefly.ApiGetPiggiesBalanceACRequest) []firefly.AutocompletePiggyBalance); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompletePiggyBalance)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetPiggiesBalanceACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetPiggiesBalanceACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRuleGroupsAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetRuleGroupsAC(ctx context.Context) firefly.ApiGetRuleGroupsACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetRuleGroupsACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetRuleGroupsACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetRuleGroupsACRequest)
	}

	return r0
}

// GetRuleGroupsACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetRuleGroupsACExecute(r firefly.ApiGetRuleGroupsACRequest) ([]firefly.AutocompleteRuleGroup, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteRuleGroup
	if rf, ok := ret.Get(0).(func(firefly.ApiGetRuleGroupsACRequest) []firefly.AutocompleteRuleGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteRuleGroup)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetRuleGroupsACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetRuleGroupsACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRulesAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetRulesAC(ctx context.Context) firefly.ApiGetRulesACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetRulesACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetRulesACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetRulesACRequest)
	}

	return r0
}

// GetRulesACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetRulesACExecute(r firefly.ApiGetRulesACRequest) ([]firefly.AutocompleteRule, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteRule
	if rf, ok := ret.Get(0).(func(firefly.ApiGetRulesACRequest) []firefly.AutocompleteRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteRule)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetRulesACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetRulesACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTagAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetTagAC(ctx context.Context) firefly.ApiGetTagACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetTagACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetTagACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetTagACRequest)
	}

	return r0
}

// GetTagACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetTagACExecute(r firefly.ApiGetTagACRequest) ([]firefly.AutocompleteTag, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteTag
	if rf, ok := ret.Get(0).(func(firefly.ApiGetTagACRequest) []firefly.AutocompleteTag); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteTag)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetTagACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetTagACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTransactionTypesAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetTransactionTypesAC(ctx context.Context) firefly.ApiGetTransactionTypesACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetTransactionTypesACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetTransactionTypesACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetTransactionTypesACRequest)
	}

	return r0
}

// GetTransactionTypesACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetTransactionTypesACExecute(r firefly.ApiGetTransactionTypesACRequest) ([]firefly.AutocompleteTransactionType, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteTransactionType
	if rf, ok := ret.Get(0).(func(firefly.ApiGetTransactionTypesACRequest) []firefly.AutocompleteTransactionType); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteTransactionType)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetTransactionTypesACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetTransactionTypesACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTransactionsAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetTransactionsAC(ctx context.Context) firefly.ApiGetTransactionsACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetTransactionsACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetTransactionsACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetTransactionsACRequest)
	}

	return r0
}

// GetTransactionsACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetTransactionsACExecute(r firefly.ApiGetTransactionsACRequest) ([]firefly.AutocompleteTransaction, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteTransaction
	if rf, ok := ret.Get(0).(func(firefly.ApiGetTransactionsACRequest) []firefly.AutocompleteTransaction); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteTransaction)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetTransactionsACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetTransactionsACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTransactionsIDAC provides a mock function with given fields: ctx
func (_m *AutocompleteApi) GetTransactionsIDAC(ctx context.Context) firefly.ApiGetTransactionsIDACRequest {
	ret := _m.Called(ctx)

	var r0 firefly.ApiGetTransactionsIDACRequest
	if rf, ok := ret.Get(0).(func(context.Context) firefly.ApiGetTransactionsIDACRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(firefly.ApiGetTransactionsIDACRequest)
	}

	return r0
}

// GetTransactionsIDACExecute provides a mock function with given fields: r
func (_m *AutocompleteApi) GetTransactionsIDACExecute(r firefly.ApiGetTransactionsIDACRequest) ([]firefly.AutocompleteTransactionID, *http.Response, error) {
	ret := _m.Called(r)

	var r0 []firefly.AutocompleteTransactionID
	if rf, ok := ret.Get(0).(func(firefly.ApiGetTransactionsIDACRequest) []firefly.AutocompleteTransactionID); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]firefly.AutocompleteTransactionID)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(firefly.ApiGetTransactionsIDACRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(firefly.ApiGetTransactionsIDACRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
