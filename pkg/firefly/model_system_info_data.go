/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// SystemInfoData struct for SystemInfoData
type SystemInfoData struct {
	Version string `json:"version"`
	ApiVersion string `json:"api_version"`
	PhpVersion string `json:"php_version"`
	Os string `json:"os"`
	Driver string `json:"driver"`
}

// NewSystemInfoData instantiates a new SystemInfoData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemInfoData(version string, apiVersion string, phpVersion string, os string, driver string) *SystemInfoData {
	this := SystemInfoData{}
	this.Version = version
	this.ApiVersion = apiVersion
	this.PhpVersion = phpVersion
	this.Os = os
	this.Driver = driver
	return &this
}

// NewSystemInfoDataWithDefaults instantiates a new SystemInfoData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemInfoDataWithDefaults() *SystemInfoData {
	this := SystemInfoData{}
	return &this
}

// GetVersion returns the Version field value
func (o *SystemInfoData) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *SystemInfoData) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *SystemInfoData) SetVersion(v string) {
	o.Version = v
}

// GetApiVersion returns the ApiVersion field value
func (o *SystemInfoData) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *SystemInfoData) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *SystemInfoData) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetPhpVersion returns the PhpVersion field value
func (o *SystemInfoData) GetPhpVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhpVersion
}

// GetPhpVersionOk returns a tuple with the PhpVersion field value
// and a boolean to check if the value has been set.
func (o *SystemInfoData) GetPhpVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PhpVersion, true
}

// SetPhpVersion sets field value
func (o *SystemInfoData) SetPhpVersion(v string) {
	o.PhpVersion = v
}

// GetOs returns the Os field value
func (o *SystemInfoData) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *SystemInfoData) GetOsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *SystemInfoData) SetOs(v string) {
	o.Os = v
}

// GetDriver returns the Driver field value
func (o *SystemInfoData) GetDriver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Driver
}

// GetDriverOk returns a tuple with the Driver field value
// and a boolean to check if the value has been set.
func (o *SystemInfoData) GetDriverOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Driver, true
}

// SetDriver sets field value
func (o *SystemInfoData) SetDriver(v string) {
	o.Driver = v
}

func (o SystemInfoData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["api_version"] = o.ApiVersion
	}
	if true {
		toSerialize["php_version"] = o.PhpVersion
	}
	if true {
		toSerialize["os"] = o.Os
	}
	if true {
		toSerialize["driver"] = o.Driver
	}
	return json.Marshal(toSerialize)
}

type NullableSystemInfoData struct {
	value *SystemInfoData
	isSet bool
}

func (v NullableSystemInfoData) Get() *SystemInfoData {
	return v.value
}

func (v *NullableSystemInfoData) Set(val *SystemInfoData) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemInfoData) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemInfoData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemInfoData(val *SystemInfoData) *NullableSystemInfoData {
	return &NullableSystemInfoData{value: val, isSet: true}
}

func (v NullableSystemInfoData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemInfoData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


