/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// AttachmentStore struct for AttachmentStore
type AttachmentStore struct {
	Filename string `json:"filename"`
	// The object class to which the attachment must be linked.
	AttachableType string `json:"attachable_type"`
	// ID of the model this attachment is linked to.
	AttachableId string `json:"attachable_id"`
	Title *string `json:"title,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
}

// NewAttachmentStore instantiates a new AttachmentStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachmentStore(filename string, attachableType string, attachableId string) *AttachmentStore {
	this := AttachmentStore{}
	this.Filename = filename
	this.AttachableType = attachableType
	this.AttachableId = attachableId
	return &this
}

// NewAttachmentStoreWithDefaults instantiates a new AttachmentStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentStoreWithDefaults() *AttachmentStore {
	this := AttachmentStore{}
	return &this
}

// GetFilename returns the Filename field value
func (o *AttachmentStore) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *AttachmentStore) GetFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *AttachmentStore) SetFilename(v string) {
	o.Filename = v
}

// GetAttachableType returns the AttachableType field value
func (o *AttachmentStore) GetAttachableType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttachableType
}

// GetAttachableTypeOk returns a tuple with the AttachableType field value
// and a boolean to check if the value has been set.
func (o *AttachmentStore) GetAttachableTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttachableType, true
}

// SetAttachableType sets field value
func (o *AttachmentStore) SetAttachableType(v string) {
	o.AttachableType = v
}

// GetAttachableId returns the AttachableId field value
func (o *AttachmentStore) GetAttachableId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttachableId
}

// GetAttachableIdOk returns a tuple with the AttachableId field value
// and a boolean to check if the value has been set.
func (o *AttachmentStore) GetAttachableIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttachableId, true
}

// SetAttachableId sets field value
func (o *AttachmentStore) SetAttachableId(v string) {
	o.AttachableId = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AttachmentStore) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AttachmentStore) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AttachmentStore) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AttachmentStore) SetTitle(v string) {
	o.Title = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttachmentStore) GetNotes() string {
	if o == nil || o.Notes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttachmentStore) GetNotesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *AttachmentStore) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *AttachmentStore) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *AttachmentStore) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *AttachmentStore) UnsetNotes() {
	o.Notes.Unset()
}

func (o AttachmentStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filename"] = o.Filename
	}
	if true {
		toSerialize["attachable_type"] = o.AttachableType
	}
	if true {
		toSerialize["attachable_id"] = o.AttachableId
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAttachmentStore struct {
	value *AttachmentStore
	isSet bool
}

func (v NullableAttachmentStore) Get() *AttachmentStore {
	return v.value
}

func (v *NullableAttachmentStore) Set(val *AttachmentStore) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachmentStore) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachmentStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachmentStore(val *AttachmentStore) *NullableAttachmentStore {
	return &NullableAttachmentStore{value: val, isSet: true}
}

func (v NullableAttachmentStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachmentStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


