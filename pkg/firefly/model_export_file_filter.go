/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"fmt"
)

// ExportFileFilter the model 'ExportFileFilter'
type ExportFileFilter string

// List of ExportFileFilter
const (
	EXPORTFILEFILTER_CSV ExportFileFilter = "csv"
)

var allowedExportFileFilterEnumValues = []ExportFileFilter{
	"csv",
}

func (v *ExportFileFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportFileFilter(value)
	for _, existing := range allowedExportFileFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportFileFilter", value)
}

// NewExportFileFilterFromValue returns a pointer to a valid ExportFileFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportFileFilterFromValue(v string) (*ExportFileFilter, error) {
	ev := ExportFileFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportFileFilter: valid values are %v", v, allowedExportFileFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportFileFilter) IsValid() bool {
	for _, existing := range allowedExportFileFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExportFileFilter value
func (v ExportFileFilter) Ptr() *ExportFileFilter {
	return &v
}

type NullableExportFileFilter struct {
	value *ExportFileFilter
	isSet bool
}

func (v NullableExportFileFilter) Get() *ExportFileFilter {
	return v.value
}

func (v *NullableExportFileFilter) Set(val *ExportFileFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableExportFileFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableExportFileFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportFileFilter(val *ExportFileFilter) *NullableExportFileFilter {
	return &NullableExportFileFilter{value: val, isSet: true}
}

func (v NullableExportFileFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportFileFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

