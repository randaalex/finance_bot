/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"fmt"
)

// ConfigValueFilter the model 'ConfigValueFilter'
type ConfigValueFilter string

// List of ConfigValueFilter
const (
	CONFIGVALUEFILTER_CONFIGURATION_IS_DEMO_SITE ConfigValueFilter = "configuration.is_demo_site"
	CONFIGVALUEFILTER_CONFIGURATION_PERMISSION_UPDATE_CHECK ConfigValueFilter = "configuration.permission_update_check"
	CONFIGVALUEFILTER_CONFIGURATION_LAST_UPDATE_CHECK ConfigValueFilter = "configuration.last_update_check"
	CONFIGVALUEFILTER_CONFIGURATION_SINGLE_USER_MODE ConfigValueFilter = "configuration.single_user_mode"
	CONFIGVALUEFILTER_FIREFLY_VERSION ConfigValueFilter = "firefly.version"
	CONFIGVALUEFILTER_FIREFLY_API_VERSION ConfigValueFilter = "firefly.api_version"
	CONFIGVALUEFILTER_FIREFLY_DEFAULT_LOCATION ConfigValueFilter = "firefly.default_location"
	CONFIGVALUEFILTER_FIREFLY_ACCOUNT_TO_TRANSACTION ConfigValueFilter = "firefly.account_to_transaction"
	CONFIGVALUEFILTER_FIREFLY_ALLOWED_OPPOSING_TYPES ConfigValueFilter = "firefly.allowed_opposing_types"
	CONFIGVALUEFILTER_FIREFLY_ACCOUNT_ROLES ConfigValueFilter = "firefly.accountRoles"
	CONFIGVALUEFILTER_FIREFLY_VALID_LIABILITIES ConfigValueFilter = "firefly.valid_liabilities"
	CONFIGVALUEFILTER_FIREFLY_INTEREST_PERIODS ConfigValueFilter = "firefly.interest_periods"
	CONFIGVALUEFILTER_FIREFLY_ENABLE_EXTERNAL_MAP ConfigValueFilter = "firefly.enable_external_map"
	CONFIGVALUEFILTER_FIREFLY_EXPECTED_SOURCE_TYPES ConfigValueFilter = "firefly.expected_source_types"
	CONFIGVALUEFILTER_APP_TIMEZONE ConfigValueFilter = "app.timezone"
)

var allowedConfigValueFilterEnumValues = []ConfigValueFilter{
	"configuration.is_demo_site",
	"configuration.permission_update_check",
	"configuration.last_update_check",
	"configuration.single_user_mode",
	"firefly.version",
	"firefly.api_version",
	"firefly.default_location",
	"firefly.account_to_transaction",
	"firefly.allowed_opposing_types",
	"firefly.accountRoles",
	"firefly.valid_liabilities",
	"firefly.interest_periods",
	"firefly.enable_external_map",
	"firefly.expected_source_types",
	"app.timezone",
}

func (v *ConfigValueFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConfigValueFilter(value)
	for _, existing := range allowedConfigValueFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConfigValueFilter", value)
}

// NewConfigValueFilterFromValue returns a pointer to a valid ConfigValueFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConfigValueFilterFromValue(v string) (*ConfigValueFilter, error) {
	ev := ConfigValueFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConfigValueFilter: valid values are %v", v, allowedConfigValueFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConfigValueFilter) IsValid() bool {
	for _, existing := range allowedConfigValueFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConfigValueFilter value
func (v ConfigValueFilter) Ptr() *ConfigValueFilter {
	return &v
}

type NullableConfigValueFilter struct {
	value *ConfigValueFilter
	isSet bool
}

func (v NullableConfigValueFilter) Get() *ConfigValueFilter {
	return v.value
}

func (v *NullableConfigValueFilter) Set(val *ConfigValueFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigValueFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigValueFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigValueFilter(val *ConfigValueFilter) *NullableConfigValueFilter {
	return &NullableConfigValueFilter{value: val, isSet: true}
}

func (v NullableConfigValueFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigValueFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

