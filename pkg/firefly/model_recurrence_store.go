/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// RecurrenceStore struct for RecurrenceStore
type RecurrenceStore struct {
	Type string `json:"type"`
	Title string `json:"title"`
	// Not to be confused with the description of the actual transaction(s) being created.
	Description *string `json:"description,omitempty"`
	// First time the recurring transaction will fire. Must be after today.
	FirstDate string `json:"first_date"`
	// Date until the recurring transaction can fire. Use either this field or repetitions.
	RepeatUntil NullableString `json:"repeat_until"`
	// Max number of created transactions. Use either this field or repeat_until.
	NrOfRepetitions NullableInt32 `json:"nr_of_repetitions,omitempty"`
	// Whether or not to fire the rules after the creation of a transaction.
	ApplyRules *bool `json:"apply_rules,omitempty"`
	// If the recurrence is even active.
	Active *bool `json:"active,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
	Repetitions []RecurrenceRepetitionStore `json:"repetitions"`
	Transactions []RecurrenceTransactionStore `json:"transactions"`
}

// NewRecurrenceStore instantiates a new RecurrenceStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceStore(type_ string, title string, firstDate string, repeatUntil NullableString, repetitions []RecurrenceRepetitionStore, transactions []RecurrenceTransactionStore) *RecurrenceStore {
	this := RecurrenceStore{}
	this.Type = type_
	this.Title = title
	this.FirstDate = firstDate
	this.RepeatUntil = repeatUntil
	this.Repetitions = repetitions
	this.Transactions = transactions
	return &this
}

// NewRecurrenceStoreWithDefaults instantiates a new RecurrenceStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceStoreWithDefaults() *RecurrenceStore {
	this := RecurrenceStore{}
	return &this
}

// GetType returns the Type field value
func (o *RecurrenceStore) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RecurrenceStore) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RecurrenceStore) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *RecurrenceStore) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *RecurrenceStore) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *RecurrenceStore) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RecurrenceStore) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceStore) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RecurrenceStore) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RecurrenceStore) SetDescription(v string) {
	o.Description = &v
}

// GetFirstDate returns the FirstDate field value
func (o *RecurrenceStore) GetFirstDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstDate
}

// GetFirstDateOk returns a tuple with the FirstDate field value
// and a boolean to check if the value has been set.
func (o *RecurrenceStore) GetFirstDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FirstDate, true
}

// SetFirstDate sets field value
func (o *RecurrenceStore) SetFirstDate(v string) {
	o.FirstDate = v
}

// GetRepeatUntil returns the RepeatUntil field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RecurrenceStore) GetRepeatUntil() string {
	if o == nil || o.RepeatUntil.Get() == nil {
		var ret string
		return ret
	}

	return *o.RepeatUntil.Get()
}

// GetRepeatUntilOk returns a tuple with the RepeatUntil field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecurrenceStore) GetRepeatUntilOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RepeatUntil.Get(), o.RepeatUntil.IsSet()
}

// SetRepeatUntil sets field value
func (o *RecurrenceStore) SetRepeatUntil(v string) {
	o.RepeatUntil.Set(&v)
}

// GetNrOfRepetitions returns the NrOfRepetitions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecurrenceStore) GetNrOfRepetitions() int32 {
	if o == nil || o.NrOfRepetitions.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NrOfRepetitions.Get()
}

// GetNrOfRepetitionsOk returns a tuple with the NrOfRepetitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecurrenceStore) GetNrOfRepetitionsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NrOfRepetitions.Get(), o.NrOfRepetitions.IsSet()
}

// HasNrOfRepetitions returns a boolean if a field has been set.
func (o *RecurrenceStore) HasNrOfRepetitions() bool {
	if o != nil && o.NrOfRepetitions.IsSet() {
		return true
	}

	return false
}

// SetNrOfRepetitions gets a reference to the given NullableInt32 and assigns it to the NrOfRepetitions field.
func (o *RecurrenceStore) SetNrOfRepetitions(v int32) {
	o.NrOfRepetitions.Set(&v)
}
// SetNrOfRepetitionsNil sets the value for NrOfRepetitions to be an explicit nil
func (o *RecurrenceStore) SetNrOfRepetitionsNil() {
	o.NrOfRepetitions.Set(nil)
}

// UnsetNrOfRepetitions ensures that no value is present for NrOfRepetitions, not even an explicit nil
func (o *RecurrenceStore) UnsetNrOfRepetitions() {
	o.NrOfRepetitions.Unset()
}

// GetApplyRules returns the ApplyRules field value if set, zero value otherwise.
func (o *RecurrenceStore) GetApplyRules() bool {
	if o == nil || o.ApplyRules == nil {
		var ret bool
		return ret
	}
	return *o.ApplyRules
}

// GetApplyRulesOk returns a tuple with the ApplyRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceStore) GetApplyRulesOk() (*bool, bool) {
	if o == nil || o.ApplyRules == nil {
		return nil, false
	}
	return o.ApplyRules, true
}

// HasApplyRules returns a boolean if a field has been set.
func (o *RecurrenceStore) HasApplyRules() bool {
	if o != nil && o.ApplyRules != nil {
		return true
	}

	return false
}

// SetApplyRules gets a reference to the given bool and assigns it to the ApplyRules field.
func (o *RecurrenceStore) SetApplyRules(v bool) {
	o.ApplyRules = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RecurrenceStore) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurrenceStore) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RecurrenceStore) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *RecurrenceStore) SetActive(v bool) {
	o.Active = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecurrenceStore) GetNotes() string {
	if o == nil || o.Notes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecurrenceStore) GetNotesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *RecurrenceStore) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *RecurrenceStore) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *RecurrenceStore) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *RecurrenceStore) UnsetNotes() {
	o.Notes.Unset()
}

// GetRepetitions returns the Repetitions field value
func (o *RecurrenceStore) GetRepetitions() []RecurrenceRepetitionStore {
	if o == nil {
		var ret []RecurrenceRepetitionStore
		return ret
	}

	return o.Repetitions
}

// GetRepetitionsOk returns a tuple with the Repetitions field value
// and a boolean to check if the value has been set.
func (o *RecurrenceStore) GetRepetitionsOk() (*[]RecurrenceRepetitionStore, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Repetitions, true
}

// SetRepetitions sets field value
func (o *RecurrenceStore) SetRepetitions(v []RecurrenceRepetitionStore) {
	o.Repetitions = v
}

// GetTransactions returns the Transactions field value
func (o *RecurrenceStore) GetTransactions() []RecurrenceTransactionStore {
	if o == nil {
		var ret []RecurrenceTransactionStore
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *RecurrenceStore) GetTransactionsOk() (*[]RecurrenceTransactionStore, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Transactions, true
}

// SetTransactions sets field value
func (o *RecurrenceStore) SetTransactions(v []RecurrenceTransactionStore) {
	o.Transactions = v
}

func (o RecurrenceStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["first_date"] = o.FirstDate
	}
	if true {
		toSerialize["repeat_until"] = o.RepeatUntil.Get()
	}
	if o.NrOfRepetitions.IsSet() {
		toSerialize["nr_of_repetitions"] = o.NrOfRepetitions.Get()
	}
	if o.ApplyRules != nil {
		toSerialize["apply_rules"] = o.ApplyRules
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if true {
		toSerialize["repetitions"] = o.Repetitions
	}
	if true {
		toSerialize["transactions"] = o.Transactions
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrenceStore struct {
	value *RecurrenceStore
	isSet bool
}

func (v NullableRecurrenceStore) Get() *RecurrenceStore {
	return v.value
}

func (v *NullableRecurrenceStore) Set(val *RecurrenceStore) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceStore) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceStore(val *RecurrenceStore) *NullableRecurrenceStore {
	return &NullableRecurrenceStore{value: val, isSet: true}
}

func (v NullableRecurrenceStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


