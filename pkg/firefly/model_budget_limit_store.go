/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// BudgetLimitStore struct for BudgetLimitStore
type BudgetLimitStore struct {
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyId *string `json:"currency_id,omitempty"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// The budget ID of the associated budget.
	BudgetId string `json:"budget_id"`
	// Start date of the budget limit.
	Start string `json:"start"`
	// Period of the budget limit. Only used when auto-generated by auto-budget.
	Period NullableString `json:"period,omitempty"`
	// End date of the budget limit.
	End string `json:"end"`
	Amount string `json:"amount"`
}

// NewBudgetLimitStore instantiates a new BudgetLimitStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBudgetLimitStore(budgetId string, start string, end string, amount string) *BudgetLimitStore {
	this := BudgetLimitStore{}
	this.BudgetId = budgetId
	this.Start = start
	this.End = end
	this.Amount = amount
	return &this
}

// NewBudgetLimitStoreWithDefaults instantiates a new BudgetLimitStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBudgetLimitStoreWithDefaults() *BudgetLimitStore {
	this := BudgetLimitStore{}
	return &this
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *BudgetLimitStore) GetCurrencyId() string {
	if o == nil || o.CurrencyId == nil {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetLimitStore) GetCurrencyIdOk() (*string, bool) {
	if o == nil || o.CurrencyId == nil {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *BudgetLimitStore) HasCurrencyId() bool {
	if o != nil && o.CurrencyId != nil {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *BudgetLimitStore) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *BudgetLimitStore) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BudgetLimitStore) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || o.CurrencyCode == nil {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *BudgetLimitStore) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode != nil {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *BudgetLimitStore) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetBudgetId returns the BudgetId field value
func (o *BudgetLimitStore) GetBudgetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BudgetId
}

// GetBudgetIdOk returns a tuple with the BudgetId field value
// and a boolean to check if the value has been set.
func (o *BudgetLimitStore) GetBudgetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BudgetId, true
}

// SetBudgetId sets field value
func (o *BudgetLimitStore) SetBudgetId(v string) {
	o.BudgetId = v
}

// GetStart returns the Start field value
func (o *BudgetLimitStore) GetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *BudgetLimitStore) GetStartOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *BudgetLimitStore) SetStart(v string) {
	o.Start = v
}

// GetPeriod returns the Period field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BudgetLimitStore) GetPeriod() string {
	if o == nil || o.Period.Get() == nil {
		var ret string
		return ret
	}
	return *o.Period.Get()
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BudgetLimitStore) GetPeriodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Period.Get(), o.Period.IsSet()
}

// HasPeriod returns a boolean if a field has been set.
func (o *BudgetLimitStore) HasPeriod() bool {
	if o != nil && o.Period.IsSet() {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given NullableString and assigns it to the Period field.
func (o *BudgetLimitStore) SetPeriod(v string) {
	o.Period.Set(&v)
}
// SetPeriodNil sets the value for Period to be an explicit nil
func (o *BudgetLimitStore) SetPeriodNil() {
	o.Period.Set(nil)
}

// UnsetPeriod ensures that no value is present for Period, not even an explicit nil
func (o *BudgetLimitStore) UnsetPeriod() {
	o.Period.Unset()
}

// GetEnd returns the End field value
func (o *BudgetLimitStore) GetEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *BudgetLimitStore) GetEndOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *BudgetLimitStore) SetEnd(v string) {
	o.End = v
}

// GetAmount returns the Amount field value
func (o *BudgetLimitStore) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *BudgetLimitStore) GetAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *BudgetLimitStore) SetAmount(v string) {
	o.Amount = v
}

func (o BudgetLimitStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrencyId != nil {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if o.CurrencyCode != nil {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if true {
		toSerialize["budget_id"] = o.BudgetId
	}
	if true {
		toSerialize["start"] = o.Start
	}
	if o.Period.IsSet() {
		toSerialize["period"] = o.Period.Get()
	}
	if true {
		toSerialize["end"] = o.End
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableBudgetLimitStore struct {
	value *BudgetLimitStore
	isSet bool
}

func (v NullableBudgetLimitStore) Get() *BudgetLimitStore {
	return v.value
}

func (v *NullableBudgetLimitStore) Set(val *BudgetLimitStore) {
	v.value = val
	v.isSet = true
}

func (v NullableBudgetLimitStore) IsSet() bool {
	return v.isSet
}

func (v *NullableBudgetLimitStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBudgetLimitStore(val *BudgetLimitStore) *NullableBudgetLimitStore {
	return &NullableBudgetLimitStore{value: val, isSet: true}
}

func (v NullableBudgetLimitStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBudgetLimitStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


