/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"time"
)

// Recurrence struct for Recurrence
type Recurrence struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Type *string `json:"type,omitempty"`
	Title *string `json:"title,omitempty"`
	// Not to be confused with the description of the actual transaction(s) being created.
	Description *string `json:"description,omitempty"`
	// First time the recurring transaction will fire. Must be after today.
	FirstDate *time.Time `json:"first_date,omitempty"`
	// Last time the recurring transaction has fired.
	LatestDate NullableTime `json:"latest_date,omitempty"`
	// Date until the recurring transaction can fire. Use either this field or repetitions.
	RepeatUntil NullableTime `json:"repeat_until,omitempty"`
	// Max number of created transactions. Use either this field or repeat_until.
	NrOfRepetitions NullableInt32 `json:"nr_of_repetitions,omitempty"`
	// Whether or not to fire the rules after the creation of a transaction.
	ApplyRules *bool `json:"apply_rules,omitempty"`
	// If the recurrence is even active.
	Active *bool `json:"active,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
	Repetitions *[]RecurrenceRepetition `json:"repetitions,omitempty"`
	Transactions *[]RecurrenceTransaction `json:"transactions,omitempty"`
}

// NewRecurrence instantiates a new Recurrence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrence() *Recurrence {
	this := Recurrence{}
	return &this
}

// NewRecurrenceWithDefaults instantiates a new Recurrence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceWithDefaults() *Recurrence {
	this := Recurrence{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Recurrence) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Recurrence) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Recurrence) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Recurrence) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Recurrence) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Recurrence) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Recurrence) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Recurrence) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Recurrence) SetType(v string) {
	o.Type = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Recurrence) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Recurrence) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Recurrence) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Recurrence) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Recurrence) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Recurrence) SetDescription(v string) {
	o.Description = &v
}

// GetFirstDate returns the FirstDate field value if set, zero value otherwise.
func (o *Recurrence) GetFirstDate() time.Time {
	if o == nil || o.FirstDate == nil {
		var ret time.Time
		return ret
	}
	return *o.FirstDate
}

// GetFirstDateOk returns a tuple with the FirstDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetFirstDateOk() (*time.Time, bool) {
	if o == nil || o.FirstDate == nil {
		return nil, false
	}
	return o.FirstDate, true
}

// HasFirstDate returns a boolean if a field has been set.
func (o *Recurrence) HasFirstDate() bool {
	if o != nil && o.FirstDate != nil {
		return true
	}

	return false
}

// SetFirstDate gets a reference to the given time.Time and assigns it to the FirstDate field.
func (o *Recurrence) SetFirstDate(v time.Time) {
	o.FirstDate = &v
}

// GetLatestDate returns the LatestDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Recurrence) GetLatestDate() time.Time {
	if o == nil || o.LatestDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LatestDate.Get()
}

// GetLatestDateOk returns a tuple with the LatestDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Recurrence) GetLatestDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LatestDate.Get(), o.LatestDate.IsSet()
}

// HasLatestDate returns a boolean if a field has been set.
func (o *Recurrence) HasLatestDate() bool {
	if o != nil && o.LatestDate.IsSet() {
		return true
	}

	return false
}

// SetLatestDate gets a reference to the given NullableTime and assigns it to the LatestDate field.
func (o *Recurrence) SetLatestDate(v time.Time) {
	o.LatestDate.Set(&v)
}
// SetLatestDateNil sets the value for LatestDate to be an explicit nil
func (o *Recurrence) SetLatestDateNil() {
	o.LatestDate.Set(nil)
}

// UnsetLatestDate ensures that no value is present for LatestDate, not even an explicit nil
func (o *Recurrence) UnsetLatestDate() {
	o.LatestDate.Unset()
}

// GetRepeatUntil returns the RepeatUntil field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Recurrence) GetRepeatUntil() time.Time {
	if o == nil || o.RepeatUntil.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RepeatUntil.Get()
}

// GetRepeatUntilOk returns a tuple with the RepeatUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Recurrence) GetRepeatUntilOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RepeatUntil.Get(), o.RepeatUntil.IsSet()
}

// HasRepeatUntil returns a boolean if a field has been set.
func (o *Recurrence) HasRepeatUntil() bool {
	if o != nil && o.RepeatUntil.IsSet() {
		return true
	}

	return false
}

// SetRepeatUntil gets a reference to the given NullableTime and assigns it to the RepeatUntil field.
func (o *Recurrence) SetRepeatUntil(v time.Time) {
	o.RepeatUntil.Set(&v)
}
// SetRepeatUntilNil sets the value for RepeatUntil to be an explicit nil
func (o *Recurrence) SetRepeatUntilNil() {
	o.RepeatUntil.Set(nil)
}

// UnsetRepeatUntil ensures that no value is present for RepeatUntil, not even an explicit nil
func (o *Recurrence) UnsetRepeatUntil() {
	o.RepeatUntil.Unset()
}

// GetNrOfRepetitions returns the NrOfRepetitions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Recurrence) GetNrOfRepetitions() int32 {
	if o == nil || o.NrOfRepetitions.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NrOfRepetitions.Get()
}

// GetNrOfRepetitionsOk returns a tuple with the NrOfRepetitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Recurrence) GetNrOfRepetitionsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NrOfRepetitions.Get(), o.NrOfRepetitions.IsSet()
}

// HasNrOfRepetitions returns a boolean if a field has been set.
func (o *Recurrence) HasNrOfRepetitions() bool {
	if o != nil && o.NrOfRepetitions.IsSet() {
		return true
	}

	return false
}

// SetNrOfRepetitions gets a reference to the given NullableInt32 and assigns it to the NrOfRepetitions field.
func (o *Recurrence) SetNrOfRepetitions(v int32) {
	o.NrOfRepetitions.Set(&v)
}
// SetNrOfRepetitionsNil sets the value for NrOfRepetitions to be an explicit nil
func (o *Recurrence) SetNrOfRepetitionsNil() {
	o.NrOfRepetitions.Set(nil)
}

// UnsetNrOfRepetitions ensures that no value is present for NrOfRepetitions, not even an explicit nil
func (o *Recurrence) UnsetNrOfRepetitions() {
	o.NrOfRepetitions.Unset()
}

// GetApplyRules returns the ApplyRules field value if set, zero value otherwise.
func (o *Recurrence) GetApplyRules() bool {
	if o == nil || o.ApplyRules == nil {
		var ret bool
		return ret
	}
	return *o.ApplyRules
}

// GetApplyRulesOk returns a tuple with the ApplyRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetApplyRulesOk() (*bool, bool) {
	if o == nil || o.ApplyRules == nil {
		return nil, false
	}
	return o.ApplyRules, true
}

// HasApplyRules returns a boolean if a field has been set.
func (o *Recurrence) HasApplyRules() bool {
	if o != nil && o.ApplyRules != nil {
		return true
	}

	return false
}

// SetApplyRules gets a reference to the given bool and assigns it to the ApplyRules field.
func (o *Recurrence) SetApplyRules(v bool) {
	o.ApplyRules = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Recurrence) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Recurrence) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Recurrence) SetActive(v bool) {
	o.Active = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Recurrence) GetNotes() string {
	if o == nil || o.Notes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Recurrence) GetNotesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *Recurrence) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *Recurrence) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *Recurrence) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *Recurrence) UnsetNotes() {
	o.Notes.Unset()
}

// GetRepetitions returns the Repetitions field value if set, zero value otherwise.
func (o *Recurrence) GetRepetitions() []RecurrenceRepetition {
	if o == nil || o.Repetitions == nil {
		var ret []RecurrenceRepetition
		return ret
	}
	return *o.Repetitions
}

// GetRepetitionsOk returns a tuple with the Repetitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetRepetitionsOk() (*[]RecurrenceRepetition, bool) {
	if o == nil || o.Repetitions == nil {
		return nil, false
	}
	return o.Repetitions, true
}

// HasRepetitions returns a boolean if a field has been set.
func (o *Recurrence) HasRepetitions() bool {
	if o != nil && o.Repetitions != nil {
		return true
	}

	return false
}

// SetRepetitions gets a reference to the given []RecurrenceRepetition and assigns it to the Repetitions field.
func (o *Recurrence) SetRepetitions(v []RecurrenceRepetition) {
	o.Repetitions = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *Recurrence) GetTransactions() []RecurrenceTransaction {
	if o == nil || o.Transactions == nil {
		var ret []RecurrenceTransaction
		return ret
	}
	return *o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetTransactionsOk() (*[]RecurrenceTransaction, bool) {
	if o == nil || o.Transactions == nil {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *Recurrence) HasTransactions() bool {
	if o != nil && o.Transactions != nil {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []RecurrenceTransaction and assigns it to the Transactions field.
func (o *Recurrence) SetTransactions(v []RecurrenceTransaction) {
	o.Transactions = &v
}

func (o Recurrence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.FirstDate != nil {
		toSerialize["first_date"] = o.FirstDate
	}
	if o.LatestDate.IsSet() {
		toSerialize["latest_date"] = o.LatestDate.Get()
	}
	if o.RepeatUntil.IsSet() {
		toSerialize["repeat_until"] = o.RepeatUntil.Get()
	}
	if o.NrOfRepetitions.IsSet() {
		toSerialize["nr_of_repetitions"] = o.NrOfRepetitions.Get()
	}
	if o.ApplyRules != nil {
		toSerialize["apply_rules"] = o.ApplyRules
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.Repetitions != nil {
		toSerialize["repetitions"] = o.Repetitions
	}
	if o.Transactions != nil {
		toSerialize["transactions"] = o.Transactions
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrence struct {
	value *Recurrence
	isSet bool
}

func (v NullableRecurrence) Get() *Recurrence {
	return v.value
}

func (v *NullableRecurrence) Set(val *Recurrence) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrence) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrence(val *Recurrence) *NullableRecurrence {
	return &NullableRecurrence{value: val, isSet: true}
}

func (v NullableRecurrence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


