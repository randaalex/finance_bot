/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"time"
)

// Attachment struct for Attachment
type Attachment struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Filename string `json:"filename"`
	// The object class to which the attachment must be linked.
	AttachableType string `json:"attachable_type"`
	// ID of the model this attachment is linked to.
	AttachableId string `json:"attachable_id"`
	// MD5 hash of the file for basic duplicate detection.
	Md5 *string `json:"md5,omitempty"`
	DownloadUri *string `json:"download_uri,omitempty"`
	UploadUri *string `json:"upload_uri,omitempty"`
	Title *string `json:"title,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
	Mime *string `json:"mime,omitempty"`
	Size *int32 `json:"size,omitempty"`
}

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment(filename string, attachableType string, attachableId string) *Attachment {
	this := Attachment{}
	this.Filename = filename
	this.AttachableType = attachableType
	this.AttachableId = attachableId
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Attachment) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Attachment) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Attachment) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Attachment) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Attachment) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Attachment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetFilename returns the Filename field value
func (o *Attachment) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *Attachment) SetFilename(v string) {
	o.Filename = v
}

// GetAttachableType returns the AttachableType field value
func (o *Attachment) GetAttachableType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttachableType
}

// GetAttachableTypeOk returns a tuple with the AttachableType field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetAttachableTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttachableType, true
}

// SetAttachableType sets field value
func (o *Attachment) SetAttachableType(v string) {
	o.AttachableType = v
}

// GetAttachableId returns the AttachableId field value
func (o *Attachment) GetAttachableId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttachableId
}

// GetAttachableIdOk returns a tuple with the AttachableId field value
// and a boolean to check if the value has been set.
func (o *Attachment) GetAttachableIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AttachableId, true
}

// SetAttachableId sets field value
func (o *Attachment) SetAttachableId(v string) {
	o.AttachableId = v
}

// GetMd5 returns the Md5 field value if set, zero value otherwise.
func (o *Attachment) GetMd5() string {
	if o == nil || o.Md5 == nil {
		var ret string
		return ret
	}
	return *o.Md5
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetMd5Ok() (*string, bool) {
	if o == nil || o.Md5 == nil {
		return nil, false
	}
	return o.Md5, true
}

// HasMd5 returns a boolean if a field has been set.
func (o *Attachment) HasMd5() bool {
	if o != nil && o.Md5 != nil {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given string and assigns it to the Md5 field.
func (o *Attachment) SetMd5(v string) {
	o.Md5 = &v
}

// GetDownloadUri returns the DownloadUri field value if set, zero value otherwise.
func (o *Attachment) GetDownloadUri() string {
	if o == nil || o.DownloadUri == nil {
		var ret string
		return ret
	}
	return *o.DownloadUri
}

// GetDownloadUriOk returns a tuple with the DownloadUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetDownloadUriOk() (*string, bool) {
	if o == nil || o.DownloadUri == nil {
		return nil, false
	}
	return o.DownloadUri, true
}

// HasDownloadUri returns a boolean if a field has been set.
func (o *Attachment) HasDownloadUri() bool {
	if o != nil && o.DownloadUri != nil {
		return true
	}

	return false
}

// SetDownloadUri gets a reference to the given string and assigns it to the DownloadUri field.
func (o *Attachment) SetDownloadUri(v string) {
	o.DownloadUri = &v
}

// GetUploadUri returns the UploadUri field value if set, zero value otherwise.
func (o *Attachment) GetUploadUri() string {
	if o == nil || o.UploadUri == nil {
		var ret string
		return ret
	}
	return *o.UploadUri
}

// GetUploadUriOk returns a tuple with the UploadUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetUploadUriOk() (*string, bool) {
	if o == nil || o.UploadUri == nil {
		return nil, false
	}
	return o.UploadUri, true
}

// HasUploadUri returns a boolean if a field has been set.
func (o *Attachment) HasUploadUri() bool {
	if o != nil && o.UploadUri != nil {
		return true
	}

	return false
}

// SetUploadUri gets a reference to the given string and assigns it to the UploadUri field.
func (o *Attachment) SetUploadUri(v string) {
	o.UploadUri = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Attachment) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Attachment) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Attachment) SetTitle(v string) {
	o.Title = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Attachment) GetNotes() string {
	if o == nil || o.Notes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Attachment) GetNotesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *Attachment) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *Attachment) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *Attachment) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *Attachment) UnsetNotes() {
	o.Notes.Unset()
}

// GetMime returns the Mime field value if set, zero value otherwise.
func (o *Attachment) GetMime() string {
	if o == nil || o.Mime == nil {
		var ret string
		return ret
	}
	return *o.Mime
}

// GetMimeOk returns a tuple with the Mime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetMimeOk() (*string, bool) {
	if o == nil || o.Mime == nil {
		return nil, false
	}
	return o.Mime, true
}

// HasMime returns a boolean if a field has been set.
func (o *Attachment) HasMime() bool {
	if o != nil && o.Mime != nil {
		return true
	}

	return false
}

// SetMime gets a reference to the given string and assigns it to the Mime field.
func (o *Attachment) SetMime(v string) {
	o.Mime = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Attachment) GetSize() int32 {
	if o == nil || o.Size == nil {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetSizeOk() (*int32, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Attachment) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Attachment) SetSize(v int32) {
	o.Size = &v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["filename"] = o.Filename
	}
	if true {
		toSerialize["attachable_type"] = o.AttachableType
	}
	if true {
		toSerialize["attachable_id"] = o.AttachableId
	}
	if o.Md5 != nil {
		toSerialize["md5"] = o.Md5
	}
	if o.DownloadUri != nil {
		toSerialize["download_uri"] = o.DownloadUri
	}
	if o.UploadUri != nil {
		toSerialize["upload_uri"] = o.UploadUri
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.Mime != nil {
		toSerialize["mime"] = o.Mime
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


