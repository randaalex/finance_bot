openapi: 3.0.0
info:
  contact:
    email: james@firefly-iii.org
    name: James Cole
    url: https://firefly-iii.org
  description: |
    This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the "Authorize" button to try the API below.
  license:
    name: AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html
  title: Firefly III API
  version: 1.4.0
servers:
- description: Firefly III demo site
  url: https://demo.firefly-iii.org/
security:
- firefly_iii_auth: []
tags:
- description: General system information, versions, and the currently logged in user.
  name: about
- description: All asset, expense and other accounts (and the metadata) together with
    related transactions, piggy banks and other objects.
  name: accounts
- description: All attachments of the authenticated user, including up- and downloading
    of the files.
  name: attachments
- description: All auto-complete endpoints.
  name: autocomplete
- description: The total available amount that is available for budgeting every period.
  name: available_budgets
- description: All bills by the user.
  name: bills
- description: Manage all the user&#039;s budgets
  name: budgets
- description: This endpoint delivers optimised data for charts and graphics.
  name: charts
- description: Manage all the user&#039;s categories
  name: categories
- description: Manage the global Firefly III configuration
  name: configuration
- description: Manage all currencies in the system, disable and enable them or add
    new ones.
  name: currencies
- description: Manage and run imports.
  name: import
- description: Manage links between transactions, and manage the type of links available.
  name: links
- description: Control all of the user&#039;s piggy banks, including money management
  name: piggy_banks
- description: Manage the user&#039;s preferences, including some hidden ones.
  name: preferences
- description: Manage the user&#039;s recurring transactions, trigger the creation
    of transactions and manage the settings.
  name: recurrences
- description: Manage all of the user&#039;s rules and trigger the execution of rules.
  name: rules
- description: Manage all of the user&#039;s groups of rules and trigger the execution
    of entire groups.
  name: rule_groups
- description: Search through the user&#039;s financial data.
  name: search
- description: Endpoint for sums, lists of numbers and other processed information.
  name: summary
- description: Manage all the user&#039;s tags.
  name: tags
- description: Manage all the user&#039;s transactions.
  name: transactions
- description: Manage the users registered within Firefly III.
  name: users
paths:
  /api/v1/about:
    get:
      description: |
        Returns general system information and versions of the (supporting) software.
      operationId: getAbout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
          description: The available system information
      summary: System information end point.
      tags:
      - about
  /api/v1/about/user:
    get:
      description: |
        Returns the currently authenticated user.
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingle'
          description: The user
      summary: Currently authenticated user endpoint.
      tags:
      - about
  /api/v1/accounts:
    get:
      description: |
        This endpoint returns a list of all the accounts owned by the authenticated user.
      operationId: listAccount
      parameters:
      - description: Page number. The default pagination is per 50 items.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          format: int32
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: Optional filter on the account type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/AccountTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountArray'
          description: A list of accounts
      summary: List all accounts.
      tags:
      - accounts
    post:
      description: Creates a new account. The data required can be submitted as a
        JSON body or as a list of parameters (in key=value pairs, like a webform).
      operationId: storeAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
        description: JSON array with the necessary account information or key=value
          pairs. See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSingle'
          description: New account stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Create new account.
      tags:
      - accounts
  /api/v1/accounts/{id}:
    delete:
      description: |
        Will permanently delete an account. Any associated transactions and piggy banks are ALSO deleted. Cannot be recovered from.
      operationId: deleteAccount
      parameters:
      - description: The ID of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Account deleted
        "404":
          description: No such account
      summary: Permanently delete account.
      tags:
      - accounts
    get:
      description: |
        Returns a single account by its ID.
      operationId: getAccount
      parameters:
      - description: The ID of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSingle'
          description: The requested account
        "404":
          description: Account not found
      summary: Get single account.
      tags:
      - accounts
    put:
      description: |
        Used to update a single account. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory.
      operationId: updateAccount
      parameters:
      - description: The ID of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
        description: JSON array or formdata with updated account information. See
          the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSingle'
          description: Updated account stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing account.
      tags:
      - accounts
  /api/v1/accounts/{id}/piggy_banks:
    get:
      description: |
        This endpoint returns a list of all the piggy banks connected to the account.
      operationId: listPiggyBankByAccount
      parameters:
      - description: The ID of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is per 50 items.
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankArray'
          description: A list of piggy banks
      summary: List all piggy banks related to the account.
      tags:
      - accounts
  /api/v1/accounts/{id}/transactions:
    get:
      description: |
        This endpoint returns a list of all the transactions connected to the account.
      operationId: listTransactionByAccount
      parameters:
      - description: The ID of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is per 50 items.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: Limits the number of results on one page.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 5
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned.
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions
      summary: List all transactions related to the account.
      tags:
      - accounts
  /api/v1/accounts/{id}/attachments:
    get:
      description: Lists all attachments.
      operationId: listAttachmentByAccount
      parameters:
      - description: The ID of the account.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: A list of attachments
        "404":
          description: No such account.
      summary: Lists all attachments.
      tags:
      - accounts
  /api/v1/attachments:
    get:
      description: |
        This endpoint lists all attachments.
      operationId: listAttachment
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: A list of attachments.
      summary: List all attachments.
      tags:
      - attachments
    post:
      description: |
        Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object.
      operationId: storeAttachment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Attachment'
        description: JSON array or key=value pairs with the necessary attachment information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentSingle'
          description: New attachment stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new attachment.
      tags:
      - attachments
  /api/v1/attachments/{id}:
    delete:
      description: |
        With this endpoint you delete an attachment, including any stored file data.
      operationId: deleteAttachment
      parameters:
      - description: The ID of the single.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Attachment deleted.
        "404":
          description: No such attachment
      summary: Delete an attachment.
      tags:
      - attachments
    get:
      description: |
        Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below).
      operationId: getAttachment
      parameters:
      - description: The ID of the attachment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentSingle'
          description: The requested attachment
        "404":
          description: Attachment not found
      summary: Get a single attachment.
      tags:
      - attachments
    put:
      description: |
        Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below.
      operationId: updateAttachment
      parameters:
      - description: The ID of the attachment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Attachment'
        description: JSON array with updated attachment information. See the model
          for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentSingle'
          description: Updated attachment stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing attachment.
      tags:
      - attachments
  /api/v1/attachments/{id}/download:
    get:
      description: |
        This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type "application/octet-stream" and content disposition "attachment; filename=example.pdf".
      operationId: downloadAttachment
      parameters:
      - description: The ID of the attachment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: The requested attachment
        "404":
          description: File not found
      summary: Download a single attachment.
      tags:
      - attachments
  /api/v1/attachments/{id}/upload:
    post:
      description: |
        Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data.
      operationId: uploadAttachment
      parameters:
      - description: The ID of the attachment.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "204":
          description: Upload was a success
        "404":
          description: File not found
        "422":
          description: Upload invalid or empty file.
      summary: Upload an attachment.
      tags:
      - attachments
  /api/v1/autocomplete/accounts:
    get:
      operationId: getAccountsAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: For asset accounts, returns the balance on this date.
        example: 2020-09-17
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: Optional filter on the account type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/AccountTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteAccountArray'
          description: A list of accounts with very basic information.
      summary: All accounts of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/bills:
    get:
      operationId: getBillsAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteBillArray'
          description: A list of bills with very basic information.
      summary: All bills of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/budgets:
    get:
      operationId: getBudgetsAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteBudgetArray'
          description: A list of budgets with very basic information.
      summary: All budgets of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/categories:
    get:
      operationId: getCategoriesAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteCategoryArray'
          description: A list of categories with very basic information.
      summary: All categories of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/currencies:
    get:
      operationId: getCurrenciesAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteCurrencyArray'
          description: A list of currencies with very basic information.
      summary: All currencies of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/currencies-with-code:
    get:
      operationId: getCurrenciesCodeAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteCurrencyCodeArray'
          description: A list of currencies with very basic information and the currency
            code between brackets.
      summary: All currencies of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/object-groups:
    get:
      operationId: getObjectGroupsAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteObjectGroupArray'
          description: A list of object groups with very basic information.
      summary: All object groups of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/piggy-banks:
    get:
      operationId: getPiggiesAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompletePiggyArray'
          description: A list of piggy banks with very basic information.
      summary: All piggy banks of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/piggy-banks-with-balance:
    get:
      operationId: getPiggiesBalanceAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompletePiggyBalanceArray'
          description: A list of piggy banks with very basic balance information.
      summary: All piggy banks of the user returned in a basic auto-complete array
        complemented with balance information.
      tags:
      - autocomplete
  /api/v1/autocomplete/rules:
    get:
      operationId: getRulesAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteRuleArray'
          description: A list of rules with very basic information.
      summary: All rules of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/rule-groups:
    get:
      operationId: getRuleGroupsAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteRuleGroupArray'
          description: A list of rule groups with very basic information.
      summary: All rule groups of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/tags:
    get:
      operationId: getTagAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteTagArray'
          description: A list of tags with very basic information.
      summary: All tags of the user returned in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/transactions:
    get:
      operationId: getTransactionsAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteTransactionArray'
          description: A list of transaction descriptions with very basic information.
      summary: All transaction descriptions of the user returned in a basic auto-complete
        array.
      tags:
      - autocomplete
  /api/v1/autocomplete/transactions-with-id:
    get:
      operationId: getTransactionsIDAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteTransactionIDArray'
          description: A list of transactions with very basic information.
      summary: All transactions, complemented with their ID, of the user returned
        in a basic auto-complete array.
      tags:
      - autocomplete
  /api/v1/autocomplete/transaction-types:
    get:
      operationId: getTransactionTypesAC
      parameters:
      - description: The autocomplete search query.
        example: str
        explode: true
        in: query
        name: query
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: The autocomplete number of items returned
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteTransactionTypeArray'
          description: A list of transaction types with very basic information.
      summary: All transaction types returned in a basic auto-complete array. English
        only.
      tags:
      - autocomplete
  /api/v1/available_budgets:
    get:
      description: |
        Firefly III allows users to set the amount that is available to be budgeted in so-called "available budgets". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set.
      operationId: listAvailableBudget
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetArray'
          description: A list of available budget amounts.
      summary: List all available budget amounts.
      tags:
      - available_budgets
    post:
      description: |
        Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeAvailableBudget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailableBudget'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AvailableBudget'
        description: JSON array or key=value pairs with the necessary available budget
          information. See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetSingle'
          description: New available budget stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new available budget
      tags:
      - available_budgets
  /api/v1/available_budgets/{id}:
    delete:
      description: Delete an available budget. Not much more to say.
      operationId: deleteAvailableBudget
      parameters:
      - description: The ID of the available budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Available budget deleted.
        "404":
          description: No such available budget.
      summary: Delete an available budget.
      tags:
      - available_budgets
    get:
      description: Get a single available budget, by ID.
      operationId: getAvailableBudget
      parameters:
      - description: The ID of the available budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetSingle'
          description: The requested available budget
        "404":
          description: AvailableBudget not found
      summary: Get a single available budget.
      tags:
      - available_budgets
    put:
      description: Update existing available budget.
      operationId: updateAvailableBudget
      parameters:
      - description: The ID of the object.X
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailableBudget'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AvailableBudget'
        description: JSON array or form value with updated available budget information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetSingle'
          description: Updated available budget stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing available budget, to change for example the date range
        of the amount or the amount itself.
      tags:
      - available_budgets
  /api/v1/bills:
    get:
      description: This endpoint will list all the user's bills.
      operationId: listBill
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillArray'
          description: A list of bills
      summary: List all bills.
      tags:
      - bills
    post:
      description: Creates a new bill. The data required can be submitted as a JSON
        body or as a list of parameters.
      operationId: storeBill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bill'
        description: JSON array or key=value pairs with the necessary bill information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillSingle'
          description: New bill stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new bill
      tags:
      - bills
  /api/v1/bills/{id}:
    delete:
      description: Delete a bill. This will not delete any associated rules. Will
        not remove associated transactions. WILL remove all associated attachments.
      operationId: deleteBill
      parameters:
      - description: The ID of the bill.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Bill deleted.
        "404":
          description: No such bill
      summary: Delete a bill.
      tags:
      - bills
    get:
      description: Get a single bill.
      operationId: getBill
      parameters:
      - description: The ID of the bill.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillSingle'
          description: The requested bill
        "404":
          description: Bill not found
      summary: Get a single bill.
      tags:
      - bills
    put:
      description: Update existing bill.
      operationId: updateBill
      parameters:
      - description: The ID of the bill.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bill'
        description: JSON array or key=value pairs with updated bill information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillSingle'
          description: Updated bill stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing bill.
      tags:
      - bills
  /api/v1/bills/{id}/attachments:
    get:
      description: This endpoint will list all attachments linked to the bill.
      operationId: listAttachmentByBill
      parameters:
      - description: The ID of the bill.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: A list of attachments
      summary: List all attachments uploaded to the bill.
      tags:
      - bills
  /api/v1/bills/{id}/rules:
    get:
      description: This endpoint will list all rules that have an action to set the
        bill to this bill.
      operationId: listRuleByBill
      parameters:
      - description: The ID of the bill.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleArray'
          description: A list of rules
      summary: List all rules associated with the bill.
      tags:
      - bills
  /api/v1/bills/{id}/transactions:
    get:
      description: This endpoint will list all transactions linked to this bill.
      operationId: listTransactionByBill
      parameters:
      - description: The ID of the bill.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions
      summary: List all transactions associated with the  bill.
      tags:
      - bills
  /api/v1/budgets:
    get:
      description: List all the budgets the user has made. If the start date and end
        date are submitted as well, the "spent" array will be updated accordingly.
      operationId: listBudget
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetArray'
          description: A list of budgets.
      summary: List all budgets.
      tags:
      - budgets
    post:
      description: Creates a new budget. The data required can be submitted as a JSON
        body or as a list of parameters.
      operationId: storeBudget
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Budget'
        description: JSON array or key=value pairs with the necessary budget information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetSingle'
          description: New budget stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new budget
      tags:
      - budgets
  /api/v1/budgets/{id}:
    delete:
      description: Delete a budget. Transactions will not be deleted.
      operationId: deleteBudget
      parameters:
      - description: The ID of the budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Budget deleted.
        "404":
          description: No such budget
      summary: Delete a budget.
      tags:
      - budgets
    get:
      description: Get a single budget. If the start date and end date are submitted
        as well, the "spent" array will be updated accordingly.
      operationId: getBudget
      parameters:
      - description: The ID of the requested budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD, to get info on how much the user has spent.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to get info on how much the user has spent.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetSingle'
          description: The requested budget
        "404":
          description: Budget not found.
      summary: Get a single budget.
      tags:
      - budgets
    put:
      description: Update existing budget. This endpoint cannot be used to set budget
        amount limits.
      operationId: updateBudget
      parameters:
      - description: The ID of the budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Budget'
        description: JSON array with updated budget information. See the model for
          the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetSingle'
          description: Updated budget stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing budget.
      tags:
      - budgets
  /api/v1/budgets/{id}/transactions:
    get:
      description: Get all transactions linked to a budget, possibly limited by start
        and end
      operationId: listTransactionByBudget
      parameters:
      - description: The ID of the budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Limits the number of results on one page.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          example: 5
          type: integer
        style: form
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions.
      summary: All transactions to a budget.
      tags:
      - budgets
  /api/v1/budgets/{id}/limits:
    get:
      description: |
        Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The "spent" array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself.
      operationId: listBudgetLimitByBudget
      parameters:
      - description: The ID of the requested budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitArray'
          description: A list of budget limits applicable to this budget.
      summary: Get all limits
      tags:
      - budgets
    post:
      description: Store a new budget limit.
      operationId: storeBudgetLimit
      parameters:
      - description: The ID of the budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetLimit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BudgetLimit'
        description: JSON array or key=value pairs with the necessary budget information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitSingle'
          description: New budget limit stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store new budget limit.
      tags:
      - budgets
  /api/v1/budgets/limits/{id}:
    delete:
      description: Delete a budget limit.
      operationId: deleteBudgetLimit
      parameters:
      - description: The ID of the requested budget limit.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Budget limit deleted.
        "404":
          description: No such budget limit
      summary: Delete a budget limit.
      tags:
      - budgets
    get:
      operationId: getBudgetLimit
      parameters:
      - description: The ID of the requested budget limit.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitSingle'
          description: The requested budget limit
        "404":
          description: Budget limit not found.
      summary: Get single budget limit.
      tags:
      - budgets
    put:
      description: Update existing budget limit.
      operationId: updateBudgetLimit
      parameters:
      - description: The ID of the requested budget limit. The budget limit MUST be
          associated to the budget ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetLimit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BudgetLimit'
        description: JSON array with updated budget limit information. See the model
          for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitSingle'
          description: Updated budget limit stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing budget limit.
      tags:
      - budgets
  /api/v1/budgets/limits/{id}/transactions:
    get:
      description: List all the transactions within one budget limit. The start and
        end date are dictated by the budget limit.
      operationId: listTransactionByBudgetLimit
      parameters:
      - description: The ID of the requested budget limit.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          minimum: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: Optional filter on the transaction type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions.
      summary: List all transactions by a budget limit ID.
      tags:
      - budgets
  /api/v1/budgets/{id}/attachments:
    get:
      description: Lists all attachments.
      operationId: listAttachmentByBudget
      parameters:
      - description: The ID of the budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: A list of attachments
        "404":
          description: No such budget.
      summary: Lists all attachments.
      tags:
      - budgets
  /api/v1/categories:
    get:
      description: List all categories.
      operationId: listCategory
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryArray'
          description: A list of categories.
      summary: List all categories.
      tags:
      - categories
    post:
      description: Creates a new category. The data required can be submitted as a
        JSON body or as a list of parameters.
      operationId: storeCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        description: JSON array or key=value pairs with the necessary category information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySingle'
          description: New category stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new category
      tags:
      - categories
  /api/v1/categories/{id}:
    delete:
      description: Delete a category. Transactions will not be removed.
      operationId: deleteCategory
      parameters:
      - description: The ID of the category.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Category deleted.
        "404":
          description: No such category.
      summary: Delete a category.
      tags:
      - categories
    get:
      description: Get a single category.
      operationId: getCategory
      parameters:
      - description: The ID of the category.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD, to show spent and earned info.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to show spent and earned info.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySingle'
          description: The requested category
        "404":
          description: Category not found
      summary: Get a single category.
      tags:
      - categories
    put:
      description: Update existing category.
      operationId: updateCategory
      parameters:
      - description: The ID of the category.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        description: JSON array with updated category information. See the model for
          the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySingle'
          description: Updated category stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing category.
      tags:
      - categories
  /api/v1/categories/{id}/transactions:
    get:
      description: List all transactions in a category, optionally limited to the
        date ranges specified.
      operationId: listTransactionByCategory
      parameters:
      - description: The ID of the category.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is per 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the result list.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the result list.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions.
      summary: List all transactions in a category.
      tags:
      - categories
  /api/v1/categories/{id}/attachments:
    get:
      description: Lists all attachments.
      operationId: listAttachmentByCategory
      parameters:
      - description: The ID of the category.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: A list of attachments
        "404":
          description: No such category.
      summary: Lists all attachments.
      tags:
      - categories
  /api/v1/chart/ab/overview/{id}:
    get:
      description: |
        This endpoint returns the data required to generate a pie chart for the available budget.
      operationId: getChartABOverview
      parameters:
      - description: The ID of the available budget.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartLine'
          description: Pie chart oriented chart information. Check out the model for
            more details. Each entry is a piece of the pie in the chart.
      summary: Dashboard chart with an overview of the available budget.
      tags:
      - charts
  /api/v1/chart/account/overview:
    get:
      description: |
        This endpoint returns the data required to generate a chart with basic asset account balance information.
      operationId: getChartAccountOverview
      parameters:
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartLine'
          description: Line chart oriented chart information. Check out the model
            for more details. Each entry is a line (or bar) in the chart.
      summary: Dashboard chart with asset account balance information.
      tags:
      - charts
  /api/v1/chart/account/expense:
    get:
      description: |
        This endpoint returns the data required to generate a chart that shows the user how much they've spent on their expense accounts.
      operationId: getChartAccountExpense
      parameters:
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartBar'
          description: Bar chart oriented chart information. Check out the model for
            more details. Each entry is a line (or bar) in the chart.
      summary: Dashboard chart with expense account balance information.
      tags:
      - charts
  /api/v1/chart/account/revenue:
    get:
      description: |
        This endpoint returns the data required to generate a chart that shows the user how much they've earned from their revenue accounts.
      operationId: getChartAccountRevenue
      parameters:
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartBar'
          description: Bar chart oriented chart information. Check out the model for
            more details. Each entry is a line (or bar) in the chart.
      summary: Dashboard chart with revenue account balance information.
      tags:
      - charts
  /api/v1/chart/category/overview:
    get:
      description: |
        This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories.
      operationId: getChartCategoryOverview
      parameters:
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartLine'
          description: Bar chart oriented chart information. Check out the model for
            more details. Each entry is a set of bars in the chart.
      summary: Dashboard chart with an overview of the users categories.
      tags:
      - charts
  /api/v1/configuration:
    get:
      description: Get system configuration
      operationId: getConfiguration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
          description: System configuration
      summary: Get Firefly III system configuration.
      tags:
      - configuration
  /api/v1/configuration/{name}:
    post:
      description: Set a single config value.
      operationId: setConfiguration
      parameters:
      - description: The configuration value name.
        explode: false
        in: path
        name: name
        required: true
        schema:
          enum:
          - is_demo_site
          - last_update_check
          - single_user_mode
          example: single_user_mode
          format: string
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigurationUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationUpdate'
        description: JSON array with the necessary account information or key=value
          pairs. See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
          description: New config stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update configuration
      tags:
      - configuration
  /api/v1/currencies:
    get:
      description: List all currencies.
      operationId: listCurrency
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyArray'
          description: A list of currencies.
      summary: List all currencies.
      tags:
      - currencies
    post:
      description: Creates a new currency. The data required can be submitted as a
        JSON body or as a list of parameters.
      operationId: storeCurrency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Currency'
        description: JSON array or key=value pairs with the necessary currency information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
          description: New currency stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new currency
      tags:
      - currencies
  /api/v1/currencies/{code}/enable:
    post:
      description: Enable a single currency.
      operationId: enableCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: USD
          format: string
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
          description: Currency was enabled.
      summary: Enable a single currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/disable:
    post:
      description: Disable a currency.
      operationId: disableCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
          description: Currency was disabled.
        "409":
          description: Currency cannot be disabled, because it is still in use.
      summary: Disable a currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/default:
    post:
      description: Make this currency the default currency. If the currency is not
        enabled, it will be enabled as well.
      operationId: defaultCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: USD
          format: string
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
          description: Currency has been made the default currency.
      summary: Make currency default currency.
      tags:
      - currencies
  /api/v1/currencies/{code}:
    delete:
      description: Delete a currency.
      operationId: deleteCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: GBP
          format: string
          type: string
        style: simple
      responses:
        "204":
          description: Currency deleted.
        "404":
          description: No such currency
      summary: Delete a currency.
      tags:
      - currencies
    get:
      description: Get a single currency.
      operationId: getCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: USD
          format: string
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
          description: The requested currency
        "404":
          description: Currency not found
      summary: Get a single currency.
      tags:
      - currencies
    put:
      description: Update existing currency.
      operationId: updateCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: EUR
          format: string
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Currency'
        description: JSON array with updated currency information. See the model for
          the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
          description: Updated currency stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/accounts:
    get:
      description: List all accounts with this currency.
      operationId: listAccountByCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: USD
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: string
          type: string
        style: form
      - description: Optional filter on the account type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/AccountTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountArray'
          description: A list of accounts
      summary: List all accounts with this currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/available_budgets:
    get:
      description: List all available budgets with this currency.
      operationId: listAvailableBudgetByCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: EUR
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetArray'
          description: A list of available budgets
      summary: List all available budgets with this currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/bills:
    get:
      description: List all bills with this currency.
      operationId: listBillByCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: USD
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillArray'
          description: A list of bills.
      summary: List all bills with this currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/budget_limits:
    get:
      description: List all budget limits with this currency
      operationId: listBudgetLimitByCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: USD
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: Start date for the budget limit list.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-01-01
          format: date
          type: string
        style: form
      - description: End date for the budget limit list.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-01-31
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitArray'
          description: A list of budget limits.
      summary: List all budget limits with this currency
      tags:
      - currencies
  /api/v1/currencies/{code}/cer:
    get:
      description: List all known exchange rates.
      operationId: listExchangeRateByCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: GBP
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          The date of which you want to know the exchange rate
        explode: true
        in: query
        name: date
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Use this instead of the date parameter to search for a range of currency exchange values.
        explode: true
        in: query
        name: start
        required: false
        schema:
          format: date
          type: string
        style: form
      - description: |
          Use this instead of the date parameter to search for a range of currency exchange values.
        explode: true
        in: query
        name: end
        required: false
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRateArray'
          description: A list of exchange rates
      summary: List all known exchange rates with (from or to) this currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/recurrences:
    get:
      description: List all recurring transactions with this currency.
      operationId: listRecurrenceByCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: EUR
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceArray'
          description: A list of recurring transactions
      summary: List all recurring transactions with this currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/rules:
    get:
      description: List all rules with this currency.
      operationId: listRuleByCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: USD
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination per 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleArray'
          description: A list of rules
      summary: List all rules with this currency.
      tags:
      - currencies
  /api/v1/currencies/{code}/transactions:
    get:
      description: List all transactions with this currency.
      operationId: listTransactionByCurrency
      parameters:
      - description: The currency code.
        explode: false
        in: path
        name: code
        required: true
        schema:
          example: USD
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is per 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the list of transactions.
        explode: true
        in: query
        name: start_date
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the list of transactions.
        explode: true
        in: query
        name: end_date
        required: false
        schema:
          example: 2018-12-31
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions.
      summary: List all transactions with this currency.
      tags:
      - currencies
  /api/v1/currencies/default:
    get:
      description: Get the user's default currency.
      operationId: getDefaultCurrency
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
          description: The default currency
      summary: Get the user's default currency.
      tags:
      - currencies
  /api/v1/data/destroy:
    delete:
      description: |
        A call to this endpoint permanently destroys the requested data type. Use it with care and always with user permission.
        The demo user is incapable of using this endpoint.
      operationId: destroyData
      parameters:
      - description: The type of data that you wish to destroy.
        explode: true
        in: query
        name: objects
        required: true
        schema:
          $ref: '#/components/schemas/DataDestroyObject'
        style: form
      responses:
        "204":
          description: Empty response when data has been destroyed.
        "500":
          description: Internal error, or user is unauthorized to destroy data.
      summary: Endpoint to destroy user data
      tags:
      - data
  /api/v1/import/list:
    get:
      description: List all imports
      operationId: listImport
      parameters:
      - description: Page number. The default pagination is per 50 items.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJobArray'
          description: A list of import jobs.
      summary: List al imports
      tags:
      - import
  /api/v1/import/{key}:
    get:
      description: Show info on single import.
      operationId: getImport
      parameters:
      - description: The job key of an import job.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: x2Akaijm2
          format: string
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJobSingle'
          description: The requested import job
        "404":
          description: Import job not found
      summary: Show info on a single import
      tags:
      - import
  /api/v1/import/{key}/transactions:
    get:
      description: |
        See summary
      operationId: listTransactionByImport
      parameters:
      - description: The key of the import job
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: abcde
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned.
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions.
      summary: List all transactions related to the import job. The correlation is
        made through the tag.
      tags:
      - import
  /api/v1/link_types:
    get:
      description: |
        List all the link types the system has. These include the default ones as well as any new ones.
      operationId: listLinkType
      parameters:
      - description: Page number. The default pagination is 50 items.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeArray'
          description: A list of link types.
      summary: List all types of links.
      tags:
      - links
    post:
      description: Creates a new link type. The data required can be submitted as
        a JSON body or as a list of parameters (in key=value pairs, like a webform).
      operationId: storeLinkType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LinkType'
        description: JSON array with the necessary link type information or key=value
          pairs. See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeSingle'
          description: New link type stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Create a new link type
      tags:
      - links
  /api/v1/link_types/{id}:
    delete:
      description: |
        Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it.
      operationId: deleteLinkType
      parameters:
      - description: The ID of the link type.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Link type deleted
        "404":
          description: No such link type
        "500":
          description: Cannot delete this link type.
      summary: Permanently delete link type.
      tags:
      - links
    get:
      description: |
        Returns a single link type by its ID.
      operationId: getLinkType
      parameters:
      - description: The ID of the link type.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeSingle'
          description: The requested link type
        "404":
          description: Link type not found.
      summary: Get single a link type.
      tags:
      - links
    put:
      description: |
        Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it.
      operationId: updateLinkType
      parameters:
      - description: The ID of the link type.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LinkType'
        description: JSON array or formdata with updated link type information. See
          the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeSingle'
          description: Updated link type stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
        "500":
          description: Cannot delete this link type.
      summary: Update existing link type.
      tags:
      - links
  /api/v1/link_types/{id}/transactions:
    get:
      description: |
        List all transactions under this link type, both the inward and outward transactions.
      operationId: listTransactionByLinkType
      parameters:
      - description: The ID of the link type.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is per 50 items.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the results.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the results.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned.
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions
      summary: List all transactions under this link type.
      tags:
      - links
  /api/v1/transaction_links:
    get:
      description: |
        List all the transaction links.
      operationId: listTransactionLink
      parameters:
      - description: Page number. The default pagination is per 50 items.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLinkArray'
          description: A list of transaction links
      summary: List all transaction links.
      tags:
      - links
    post:
      description: Store a new link between two transactions. For this end point you
        need the journal_id from a transaction.
      operationId: storeTransactionLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionLink'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionLink'
        description: JSON array with the necessary link type information or key=value
          pairs. See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLinkSingle'
          description: New transaction link stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Create a new link between transactions
      tags:
      - links
  /api/v1/transaction_links/{id}:
    delete:
      description: |
        Will permanently delete link. Transactions remain.
      operationId: deleteTransactionLink
      parameters:
      - description: The ID of the transaction link.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Transaction link deleted
        "404":
          description: No such transaction link
      summary: Permanently delete link between transactions.
      tags:
      - links
    get:
      description: |
        Returns a single link by its ID.
      operationId: getTransactionLink
      parameters:
      - description: The ID of the transaction link.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLinkSingle'
          description: The requested link
        "404":
          description: No such transaction link.
      summary: Get a single link.
      tags:
      - links
    put:
      description: |
        Used to update a single existing link.
      operationId: updateTransactionLink
      parameters:
      - description: The ID of the transaction link.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionLink'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionLink'
        description: JSON array or formdata with updated link type information. See
          the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLinkSingle'
          description: Updated link type stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update an existing link between transactions.
      tags:
      - links
  /api/v1/piggy_banks:
    get:
      description: List all piggy banks.
      operationId: listPiggyBank
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankArray'
          description: A list of piggy banks
      summary: List all piggy banks.
      tags:
      - piggy_banks
    post:
      description: Creates a new piggy bank. The data required can be submitted as
        a JSON body or as a list of parameters.
      operationId: storePiggyBank
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PiggyBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PiggyBank'
        description: JSON array or key=value pairs with the necessary piggy bank information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankSingle'
          description: New piggy bank stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new piggy bank
      tags:
      - piggy_banks
  /api/v1/piggy_banks/{id}:
    delete:
      description: Delete a piggy bank.
      operationId: deletePiggyBank
      parameters:
      - description: The ID of the piggy bank.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Piggy bank deleted.
        "404":
          description: No such piggy bank
      summary: Delete a piggy bank.
      tags:
      - piggy_banks
    get:
      description: Get a single piggy bank.
      operationId: getPiggyBank
      parameters:
      - description: The ID of the piggy bank.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankSingle'
          description: The requested piggy bank
        "404":
          description: Piggy bank not found
      summary: Get a single piggy bank.
      tags:
      - piggy_banks
    put:
      description: Update existing piggy bank.
      operationId: updatePiggyBank
      parameters:
      - description: The ID of the piggy bank
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PiggyBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PiggyBank'
        description: JSON array with updated piggy bank information. See the model
          for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankSingle'
          description: Updated piggy bank stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing piggy bank.
      tags:
      - piggy_banks
  /api/v1/piggy_banks/{id}/events:
    get:
      description: List all events linked to a piggy bank (adding and removing money).
      operationId: listEventByPiggyBank
      parameters:
      - description: The ID of the piggy bank
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankEventArray'
          description: A list of piggy bank related events
      summary: List all events linked to a piggy bank.
      tags:
      - piggy_banks
  /api/v1/piggy_banks/{id}/attachments:
    get:
      description: Lists all attachments.
      operationId: listAttachmentByPiggyBank
      parameters:
      - description: The ID of the piggy bank.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: A list of attachments
        "404":
          description: No such piggy bank.
      summary: Lists all attachments.
      tags:
      - piggy_banks
  /api/v1/preferences:
    get:
      description: List all preferences of the user.
      operationId: listPreference
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceArray'
          description: A list of preferences.
      summary: List all users preferences.
      tags:
      - preferences
  /api/v1/preferences/{name}:
    get:
      description: Return a single preference.
      operationId: getPreference
      parameters:
      - description: The name of the preference.
        explode: false
        in: path
        name: name
        required: true
        schema:
          example: currencyPreference
          format: string
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSingle'
          description: A single preference.
      summary: Return a single preference.
      tags:
      - preferences
    put:
      description: Update a user's preference.
      operationId: updatePreference
      parameters:
      - description: The name of the preference. Will always overwrite. Will be created
          if it does not exist.
        explode: false
        in: path
        name: name
        required: true
        schema:
          example: currencyPreference
          format: string
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preference'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Preference'
        description: JSON array or key=value pairs with the necessary preference information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSingle'
          description: Updated preference.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update preference
      tags:
      - preferences
  /api/v1/recurrences:
    get:
      description: List all recurring transactions.
      operationId: listRecurrence
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceArray'
          description: A list of recurring transactions.
      summary: List all recurring transactions.
      tags:
      - recurrences
    post:
      description: Creates a new recurring transaction. The data required can be submitted
        as a JSON body or as a list of parameters.
      operationId: storeRecurrence
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recurrence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Recurrence'
        description: JSON array or key=value pairs with the necessary recurring transaction
          information. See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceSingle'
          description: New recurring transaction stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new recurring transaction
      tags:
      - recurrences
  /api/v1/recurrences/{id}:
    delete:
      description: Delete a recurring transaction. Transactions created will not be
        deleted.
      operationId: deleteRecurrence
      parameters:
      - description: The ID of the recurring transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Recurring transaction deleted.
        "404":
          description: No such recurring transaction
      summary: Delete a recurring transaction.
      tags:
      - recurrences
    get:
      description: Get a single recurring transaction.
      operationId: getRecurrence
      parameters:
      - description: The ID of the recurring transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceSingle'
          description: The requested recurring transaction
        "404":
          description: Recurring transaction not found
      summary: Get a single recurring transaction.
      tags:
      - recurrences
    put:
      description: Update existing recurring transaction.
      operationId: updateRecurrence
      parameters:
      - description: The ID of the recurring transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recurrence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Recurrence'
        description: JSON array with updated recurring transaction information. See
          the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceSingle'
          description: Updated recurring transaction stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing recurring transaction.
      tags:
      - recurrences
  /api/v1/recurrences/{id}/transactions:
    get:
      description: List all transactions created by a recurring transaction, optionally
        limited to the date ranges specified.
      operationId: listTransactionByRecurrence
      parameters:
      - description: The ID of the recurring transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD. Both the start and end date must be present.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD. Both the start and end date must be present.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions
      summary: List all transactions created by a recurring transaction.
      tags:
      - recurrences
  /api/v1/recurrences/trigger:
    post:
      description: |
        Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen.
      operationId: triggerRecurrence
      responses:
        "204":
          description: Not triggered (not yet due or unable to).
        "200":
          description: Triggered. Due to the way it's fired (an asynchronous job),
            the result cannot be shown to you.
      summary: Trigger the creation of recurring transactions (like a cron job).
      tags:
      - recurrences
  /api/v1/rule_groups:
    get:
      description: List all rule groups.
      operationId: listRuleGroup
      parameters:
      - description: Page number. The default pagination is 50
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupArray'
          description: A list of rule groups.
      summary: List all rule groups.
      tags:
      - rule_groups
    post:
      description: Creates a new rule group. The data required can be submitted as
        a JSON body or as a list of parameters.
      operationId: storeRuleGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RuleGroup'
        description: JSON array or key=value pairs with the necessary rule group information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupSingle'
          description: New rule group stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new rule group.
      tags:
      - rule_groups
  /api/v1/rule_groups/{id}:
    delete:
      description: Delete a rule group.
      operationId: deleteRuleGroup
      parameters:
      - description: The ID of the rule group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Rule group deleted.
        "404":
          description: No such rule group
      summary: Delete a rule group.
      tags:
      - rule_groups
    get:
      description: Get a single rule group. This does not include the rules. For that,
        see below.
      operationId: getRuleGroup
      parameters:
      - description: The ID of the rule group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupSingle'
          description: The requested rule group
        "404":
          description: Rule group not found.
      summary: Get a single rule group.
      tags:
      - rule_groups
    put:
      description: Update existing rule group.
      operationId: updateRuleGroup
      parameters:
      - description: The ID of the rule group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RuleGroup'
        description: JSON array with updated rule group information. See the model
          for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupSingle'
          description: Updated rule group stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing rule group.
      tags:
      - rule_groups
  /api/v1/rule_groups/{id}/test:
    get:
      description: Test which transactions would be hit by the rule group. No changes
        will be made. Limit the result if you want to.
      operationId: testRuleGroup
      parameters:
      - description: The ID of the rule group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50 items.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          Maximum number of transactions Firefly III will try. Don't set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.
        explode: true
        in: query
        name: search_limit
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Maximum number of transactions the rule group can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don't go above the user's page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.
        explode: true
        in: query
        name: triggered_limit
        required: false
        schema:
          type: integer
        style: form
      - description: |
          Limit the testing of the rule group to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.
        example: 1,2,3
        explode: false
        in: query
        name: accounts
        required: false
        schema:
          format: string
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions that would be changed by any of the
            rules of the rule group. No changes will be made.
      summary: Test which transactions would be hit by the rule group. No changes
        will be made.
      tags:
      - rule_groups
  /api/v1/rule_groups/{id}/rules:
    get:
      description: List rules in this rule group.
      operationId: listRuleByGroup
      parameters:
      - description: The ID of the rule group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleArray'
          description: A list of rules.
      summary: List rules in this rule group.
      tags:
      - rule_groups
  /api/v1/rule_groups/{id}/trigger:
    post:
      description: Fire the rule group on your transactions. Changes will be made
        by the rules in the rule group! Limit the result if you want to.
      operationId: fireRuleGroup
      parameters:
      - description: The ID of the rule group.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          Limit the testing of the rule group to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.
        example: 1,2,3
        explode: false
        in: query
        name: accounts
        required: false
        schema:
          format: string
          type: string
        style: form
      responses:
        "204":
          description: The rules in the group are executed. Due to the setup of this
            function (asynchronous job execution) the result cannot be displayed.
      summary: Fire the rule group on your transactions.
      tags:
      - rule_groups
  /api/v1/rules:
    get:
      description: List all rules.
      operationId: listRule
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleArray'
          description: A list of rules
      summary: List all rules.
      tags:
      - rules
    post:
      description: Creates a new rule. The data required can be submitted as a JSON
        body or as a list of parameters.
      operationId: storeRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rule'
        description: JSON array or key=value pairs with the necessary rule information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSingle'
          description: New rule stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new rule
      tags:
      - rules
  /api/v1/rules/{id}:
    delete:
      description: Delete an rule.
      operationId: deleteRule
      parameters:
      - description: The ID of the rule.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Rule deleted.
        "404":
          description: No such rule
      summary: Delete an rule.
      tags:
      - rules
    get:
      description: Get a single rule.
      operationId: getRule
      parameters:
      - description: The ID of the object.X
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSingle'
          description: The requested rule
        "404":
          description: Rule not found
      summary: Get a single rule.
      tags:
      - rules
    put:
      description: Update existing rule.
      operationId: updateRule
      parameters:
      - description: The ID of the object.X
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rule'
        description: JSON array with updated rule information. See the model for the
          exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSingle'
          description: Updated rule stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing rule.
      tags:
      - rules
  /api/v1/rules/{id}/test:
    get:
      description: Test which transactions would be hit by the rule. No changes will
        be made. Limit the result if you want to.
      operationId: testRule
      parameters:
      - description: The ID of the rule.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.
        example: 1,2,3
        explode: false
        in: query
        name: accounts
        required: false
        schema:
          format: string
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions that would be changed by the rule. No
            changes will be made.
      summary: Test which transactions would be hit by the rule. No changes will be
        made.
      tags:
      - rules
  /api/v1/rules/{id}/trigger:
    post:
      description: Fire the rule group on your transactions. Changes will be made
        by the rules in the group! Limit the result if you want to.
      operationId: fireRule
      parameters:
      - description: The ID of the rule.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: |
          A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.
        example: 1,2,3
        explode: false
        in: query
        name: accounts
        required: false
        schema:
          format: string
          type: string
        style: form
      responses:
        "204":
          description: The rules in the group are executed. Due to the setup of this
            function (asynchronous job execution) the result cannot be displayed.
      summary: Fire the rule on your transactions.
      tags:
      - rules
  /api/v1/search/transactions:
    get:
      description: Search for transactions
      operationId: searchTransactions
      parameters:
      - description: The query you wish to search for.
        explode: true
        in: query
        name: query
        required: true
        schema:
          example: groceries
          type: string
        style: form
      - description: Page number. The default pagination is 50
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions.
      summary: Search for transactions
      tags:
      - search
  /api/v1/search/accounts:
    get:
      description: Search for accounts
      operationId: searchAccounts
      parameters:
      - description: Page number. The default pagination is 50
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: The query you wish to search for.
        explode: true
        in: query
        name: query
        required: true
        schema:
          example: checking
          type: string
        style: form
      - description: The type of accounts you wish to limit the search to.
        explode: true
        in: query
        name: type
        required: true
        schema:
          $ref: '#/components/schemas/AccountTypeFilter'
        style: form
      - description: The account field(s) you want to search in.
        explode: true
        in: query
        name: field
        required: true
        schema:
          $ref: '#/components/schemas/AccountSearchFieldFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountArray'
          description: A list of accounts.
      summary: Search for accounts
      tags:
      - search
  /api/v1/summary/basic:
    get:
      description: |
        Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard.
      operationId: getBasicSummary
      parameters:
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          A currency code like EUR or USD, to filter the result.
        explode: true
        in: query
        name: currency_code
        required: false
        schema:
          format: string
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicSummary'
          description: An array of sums. It depends on the user what you can expect
            to get back, so please check out the documentation and try this out on
            the demo site.
      summary: Returns basic sums of the users data.
      tags:
      - summary
  /api/v1/tag-cloud:
    get:
      description: Returns a list of tags, which can be used to draw a basic tag cloud.
      operationId: getTagCloud
      parameters:
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: start
        required: true
        schema:
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD.
        explode: true
        in: query
        name: end
        required: true
        schema:
          format: date
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCloud'
          description: A tag cloud
      summary: Returns a basic tag cloud.
      tags:
      - tags
  /api/v1/tags:
    get:
      description: List all of the user's tags.
      operationId: listTag
      parameters:
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagArray'
          description: A list of tags
      summary: List all tags.
      tags:
      - tags
    post:
      description: Creates a new tag. The data required can be submitted as a JSON
        body or as a list of parameters.
      operationId: storeTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagModel'
        description: JSON array or key=value pairs with the necessary tag information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSingle'
          description: New tag stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new tag
      tags:
      - tags
  /api/v1/tags/{tag}:
    delete:
      description: Delete an tag.
      operationId: deleteTag
      parameters:
      - description: Either the tag itself or the tag ID.
        explode: false
        in: path
        name: tag
        required: true
        schema:
          example: groceries
          format: string
          type: string
        style: simple
      responses:
        "204":
          description: Tag deleted.
        "404":
          description: No such tag
      summary: Delete an tag.
      tags:
      - tags
    get:
      description: Get a single tag.
      operationId: getTag
      parameters:
      - description: Either the tag itself or the tag ID.
        explode: false
        in: path
        name: tag
        required: true
        schema:
          example: groceries
          format: string
          type: string
        style: simple
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSingle'
          description: The requested tag
        "404":
          description: Tag not found
      summary: Get a single tag.
      tags:
      - tags
    put:
      description: Update existing tag.
      operationId: updateTag
      parameters:
      - description: Either the tag itself or the tag ID.
        explode: false
        in: path
        name: tag
        required: true
        schema:
          example: groceries
          format: string
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagModel'
        description: JSON array with updated tag information. See the model for the
          exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSingle'
          description: Updated tag stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing tag.
      tags:
      - tags
  /api/v1/tags/{tag}/transactions:
    get:
      description: List all transactions with this tag.
      operationId: listTransactionByTag
      parameters:
      - description: Either the tag itself or the tag ID.
        explode: false
        in: path
        name: tag
        required: true
        schema:
          example: groceries
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned.
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions.
      summary: List all transactions with this tag.
      tags:
      - tags
  /api/v1/tags/{tag}/attachments:
    get:
      description: Lists all attachments.
      operationId: listAttachmentByTag
      parameters:
      - description: Either the tag itself or the tag ID.
        explode: false
        in: path
        name: tag
        required: true
        schema:
          example: groceries
          format: string
          type: string
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: A list of attachments
        "404":
          description: No such tag.
      summary: Lists all attachments.
      tags:
      - tags
  /api/v1/transactions:
    get:
      description: List all the user's transactions.
      operationId: listTransaction
      parameters:
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: |
          A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).
        explode: true
        in: query
        name: start
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: |
          A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).
        explode: true
        in: query
        name: end
        required: false
        schema:
          example: 2018-09-17
          format: date
          type: string
        style: form
      - description: Optional filter on the transaction type(s) returned.
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/TransactionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
          description: A list of transactions.
      summary: |
        List all the user's transactions.
      tags:
      - transactions
    post:
      description: Creates a new transaction. The data required can be submitted as
        a JSON body or as a list of parameters.
      operationId: storeTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
        description: JSON array or key=value pairs with the necessary transaction
          information. See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSingle'
          description: New transaction stored(s), result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new transaction
      tags:
      - transactions
  /api/v1/transactions/{id}:
    delete:
      description: Delete a transaction.
      operationId: deleteTransaction
      parameters:
      - description: The ID of the transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: Transaction deleted.
        "404":
          description: No such transaction.
      summary: Delete a transaction.
      tags:
      - transactions
    get:
      description: Get a single transaction.
      operationId: getTransaction
      parameters:
      - description: The ID of the transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSingle'
          description: The requested transaction.
        "404":
          description: Transaction not found.
      summary: Get a single transaction.
      tags:
      - transactions
    put:
      description: Update an existing transaction.
      operationId: updateTransaction
      parameters:
      - description: The ID of the transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
        description: JSON array with updated transaction information. See the model
          for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSingle'
          description: Updated transaction stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update existing transaction.
      tags:
      - transactions
  /api/v1/transactions/{id}/attachments:
    get:
      description: Lists all attachments.
      operationId: listAttachmentByTransaction
      parameters:
      - description: The ID of the transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: A list of attachments
        "404":
          description: No such transaction.
      summary: Lists all attachments.
      tags:
      - transactions
  /api/v1/transactions/{id}/piggy_bank_events:
    get:
      description: Lists all piggy bank events.
      operationId: listEventByTransaction
      parameters:
      - description: The ID of the transaction.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      - description: Page number. The default pagination is 50.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankEventArray'
          description: A list of piggy bank events.
        "404":
          description: No such transaction.
      summary: Lists all piggy bank events.
      tags:
      - transactions
  /api/v1/transaction-journals/{id}:
    get:
      description: Get a single transaction by underlying journal.
      operationId: getTransactionByJournal
      parameters:
      - description: The ID of the transaction journal.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSingle'
          description: The requested transaction.
        "404":
          description: Transaction not found.
      summary: Get a single transaction, based on one of the underlying transaction
        journals.
      tags:
      - transactions
  /api/v1/users:
    get:
      description: List all the users in this instance of Firefly III.
      operationId: listUser
      parameters:
      - description: The page number, if necessary. The default pagination is 50,
          so 50 users per page.
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
          description: A list of users.
      summary: List all users.
      tags:
      - users
    post:
      description: |
        Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the "forgot password" function.
      operationId: storeUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: JSON array or key=value pairs with the necessary user information.
          See the model for the exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingle'
          description: New user stored, result in response.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Store a new user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      description: Delete a user. You cannot delete the current user.
      operationId: deleteUser
      parameters:
      - description: The user ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "204":
          description: User deleted.
        "404":
          description: No such user.
        "500":
          description: Error when deleting, or when it is the currently authenticated
            user.
      summary: Delete a user.
      tags:
      - users
    get:
      description: Gets all info of a single user.
      operationId: getUser
      parameters:
      - description: The user ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingle'
          description: The requested user.
        "404":
          description: User not found.
      summary: Get a single user.
      tags:
      - users
    put:
      description: Update existing user.
      operationId: updateUser
      parameters:
      - description: The user ID.
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: JSON array with updated user information. See the model for the
          exact specifications.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingle'
          description: Updated user stored, result in response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: Validation errors (see body)
      summary: Update an existing user's information.
      tags:
      - users
components:
  schemas:
    Account:
      example:
        account_number: "7009312345678"
        notes: Some example notes
        account_role: defaultAsset
        liability_amount: "123.45"
        created_at: 2018-09-17T12:46:47+01:00
        type: asset
        currency_code: EUR
        currency_decimal_places: 2
        updated_at: 2018-09-17T12:46:47+01:00
        current_balance_date: 2018-09-17T00:00:00.000+0000
        interest: "5.3"
        current_balance: "123.45"
        opening_balance: -1012.12
        interest_period: monthly
        order: 1
        include_net_worth: true
        opening_balance_date: 2018-09-17T00:00:00.000+0000
        currency_symbol: $
        liability_start_date: 2017-09-17T00:00:00.000+0000
        active: false
        monthly_payment_date: 2018-09-17T00:00:00.000+0000
        virtual_balance: "123.45"
        liability_type: loan
        credit_card_type: monthlyFull
        iban: GB98MIDL07009312345678
        name: My checking account
        bic: BOFAUS3N
        currency_id: 12
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        name:
          example: My checking account
          format: string
          type: string
        type:
          description: Can only be one one these account types. import, initial-balance
            and reconciliation cannot be set manually.
          enum:
          - asset
          - expense
          - import
          - revenue
          - cash
          - liability
          - liabilities
          - initial-balance
          - reconciliation
          example: asset
          format: string
          type: string
        iban:
          example: GB98MIDL07009312345678
          format: iban
          type: string
        bic:
          example: BOFAUS3N
          format: string
          type: string
        account_number:
          example: "7009312345678"
          format: string
          type: string
        opening_balance:
          example: -1012.12
          format: amount
          type: string
        opening_balance_date:
          example: 2018-09-17
          format: date
          type: string
        virtual_balance:
          example: "123.45"
          format: amount
          type: string
        current_balance:
          example: "123.45"
          format: amount
          readOnly: true
          type: string
        current_balance_date:
          example: 2018-09-17
          format: date
          readOnly: true
          type: string
        currency_id:
          description: Use either currency_id or currency_code. Defaults to the user's
            default currency.
          example: 12
          format: int32
          type: integer
        currency_code:
          description: Use either currency_id or currency_code. Defaults to the user's
            default currency.
          example: EUR
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
        active:
          description: If omitted, defaults to true.
          example: false
          format: boolean
          type: boolean
        order:
          description: Order of the account
          example: 1
          format: int32
          type: integer
        include_net_worth:
          description: If omitted, defaults to true.
          example: true
          format: boolean
          type: boolean
        account_role:
          description: Is only mandatory when the type is asset.
          enum:
          - defaultAsset
          - sharedAsset
          - savingAsset
          - ccAsset
          - cashWalletAsset
          example: defaultAsset
          format: string
          type: string
        credit_card_type:
          description: Mandatory when the account_role is ccAsset. Can only be monthlyFull.
          enum:
          - monthlyFull
          example: monthlyFull
          format: string
          nullable: true
          type: string
        monthly_payment_date:
          description: Mandatory when the account_role is ccAsset. Moment at which
            CC payment installments are asked for by the bank.
          example: 2018-09-17
          format: date
          nullable: true
          type: string
        liability_type:
          description: Mandatory when type is liability. Specifies the exact type.
          enum:
          - loan
          - debt
          - mortgage
          example: loan
          format: string
          type: string
        liability_amount:
          description: Mandatory when type is liability. Amount of money in the liability.
            Must be positive.
          example: "123.45"
          format: amount
          type: string
        liability_start_date:
          description: Mandatory when type is liability. Start date for the liability.
          example: 2017-09-17
          format: date
          type: string
        interest:
          description: Mandatory when type is liability. Interest percentage.
          example: "5.3"
          format: string
          type: string
        interest_period:
          description: Mandatory when type is liability. Period over which the interest
            is calculated.
          enum:
          - daily
          - monthly
          - yearly
          example: monthly
          format: string
          type: string
        notes:
          example: Some example notes
          format: string
          type: string
      required:
      - name
      - type
      type: object
    AccountArray:
      example:
        data:
        - attributes:
            account_number: "7009312345678"
            notes: Some example notes
            account_role: defaultAsset
            liability_amount: "123.45"
            created_at: 2018-09-17T12:46:47+01:00
            type: asset
            currency_code: EUR
            currency_decimal_places: 2
            updated_at: 2018-09-17T12:46:47+01:00
            current_balance_date: 2018-09-17T00:00:00.000+0000
            interest: "5.3"
            current_balance: "123.45"
            opening_balance: -1012.12
            interest_period: monthly
            order: 1
            include_net_worth: true
            opening_balance_date: 2018-09-17T00:00:00.000+0000
            currency_symbol: $
            liability_start_date: 2017-09-17T00:00:00.000+0000
            active: false
            monthly_payment_date: 2018-09-17T00:00:00.000+0000
            virtual_balance: "123.45"
            liability_type: loan
            credit_card_type: monthlyFull
            iban: GB98MIDL07009312345678
            name: My checking account
            bic: BOFAUS3N
            currency_id: 12
          id: "2"
          type: accounts
        - attributes:
            account_number: "7009312345678"
            notes: Some example notes
            account_role: defaultAsset
            liability_amount: "123.45"
            created_at: 2018-09-17T12:46:47+01:00
            type: asset
            currency_code: EUR
            currency_decimal_places: 2
            updated_at: 2018-09-17T12:46:47+01:00
            current_balance_date: 2018-09-17T00:00:00.000+0000
            interest: "5.3"
            current_balance: "123.45"
            opening_balance: -1012.12
            interest_period: monthly
            order: 1
            include_net_worth: true
            opening_balance_date: 2018-09-17T00:00:00.000+0000
            currency_symbol: $
            liability_start_date: 2017-09-17T00:00:00.000+0000
            active: false
            monthly_payment_date: 2018-09-17T00:00:00.000+0000
            virtual_balance: "123.45"
            liability_type: loan
            credit_card_type: monthlyFull
            iban: GB98MIDL07009312345678
            name: My checking account
            bic: BOFAUS3N
            currency_id: 12
          id: "2"
          type: accounts
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/AccountRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
      required:
      - data
      - meta
      type: object
    AccountRead:
      example:
        attributes:
          account_number: "7009312345678"
          notes: Some example notes
          account_role: defaultAsset
          liability_amount: "123.45"
          created_at: 2018-09-17T12:46:47+01:00
          type: asset
          currency_code: EUR
          currency_decimal_places: 2
          updated_at: 2018-09-17T12:46:47+01:00
          current_balance_date: 2018-09-17T00:00:00.000+0000
          interest: "5.3"
          current_balance: "123.45"
          opening_balance: -1012.12
          interest_period: monthly
          order: 1
          include_net_worth: true
          opening_balance_date: 2018-09-17T00:00:00.000+0000
          currency_symbol: $
          liability_start_date: 2017-09-17T00:00:00.000+0000
          active: false
          monthly_payment_date: 2018-09-17T00:00:00.000+0000
          virtual_balance: "123.45"
          liability_type: loan
          credit_card_type: monthlyFull
          iban: GB98MIDL07009312345678
          name: My checking account
          bic: BOFAUS3N
          currency_id: 12
        id: "2"
        type: accounts
      properties:
        type:
          description: Immutable value
          example: accounts
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Account'
      required:
      - attributes
      - id
      - type
      type: object
    AccountSearchFieldFilter:
      enum:
      - all
      - iban
      - name
      - number
      - id
      type: string
    AccountSingle:
      example:
        data:
          attributes:
            account_number: "7009312345678"
            notes: Some example notes
            account_role: defaultAsset
            liability_amount: "123.45"
            created_at: 2018-09-17T12:46:47+01:00
            type: asset
            currency_code: EUR
            currency_decimal_places: 2
            updated_at: 2018-09-17T12:46:47+01:00
            current_balance_date: 2018-09-17T00:00:00.000+0000
            interest: "5.3"
            current_balance: "123.45"
            opening_balance: -1012.12
            interest_period: monthly
            order: 1
            include_net_worth: true
            opening_balance_date: 2018-09-17T00:00:00.000+0000
            currency_symbol: $
            liability_start_date: 2017-09-17T00:00:00.000+0000
            active: false
            monthly_payment_date: 2018-09-17T00:00:00.000+0000
            virtual_balance: "123.45"
            liability_type: loan
            credit_card_type: monthlyFull
            iban: GB98MIDL07009312345678
            name: My checking account
            bic: BOFAUS3N
            currency_id: 12
          id: "2"
          type: accounts
      properties:
        data:
          $ref: '#/components/schemas/AccountRead'
      required:
      - data
      type: object
    AccountTypeFilter:
      enum:
      - all
      - asset
      - cash
      - expense
      - revenue
      - special
      - hidden
      - liability
      - liabilities
      - Default account
      - Cash account
      - Asset account
      - Expense account
      - Revenue account
      - Initial balance account
      - Beneficiary account
      - Import account
      - Reconciliation account
      - Loan
      - Debt
      - Mortgage
      type: string
    AccountTypeProperty:
      enum:
      - Default account
      - Cash account
      - Asset account
      - Expense account
      - Revenue account
      - Initial balance account
      - Beneficiary account
      - Import account
      - Reconciliation account
      - Loan
      - Debt
      - Mortgage
      example: Asset account
      format: string
      readOnly: true
      type: string
    Attachment:
      example:
        filename: file.pdf
        notes: Some notes
        updated_at: 2018-09-17T12:46:47+01:00
        size: 48211
        download_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
        upload_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
        mime: application/pdf
        attachable_id: 134
        created_at: 2018-09-17T12:46:47+01:00
        title: Some PDF file
        attachable_type: Bill
        md5: 0c3f95f34370baa88f9fd9a671fea305
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        filename:
          example: file.pdf
          format: string
          type: string
        attachable_type:
          description: The object class to which the attachment must be linked.
          enum:
          - Bill
          - TransactionJournal
          - ImportJob
          example: Bill
          format: string
          type: string
        attachable_id:
          description: ID of the model this attachment is linked to.
          example: 134
          format: int32
          type: integer
        md5:
          description: MD5 hash of the file for basic duplicate detection.
          example: 0c3f95f34370baa88f9fd9a671fea305
          format: string
          type: string
        download_uri:
          example: https://demo.firefly-iii.org/api/v1/attachments/191/download
          format: string
          type: string
        upload_uri:
          example: https://demo.firefly-iii.org/api/v1/attachments/191/download
          format: string
          type: string
        title:
          example: Some PDF file
          format: string
          type: string
        notes:
          example: Some notes
          format: string
          type: string
        mime:
          example: application/pdf
          format: string
          readOnly: true
          type: string
        size:
          example: 48211
          format: int32
          readOnly: true
          type: integer
      required:
      - attachable_id
      - attachable_type
      - filename
      type: object
    AttachmentArray:
      example:
        data:
        - attributes:
            filename: file.pdf
            notes: Some notes
            updated_at: 2018-09-17T12:46:47+01:00
            size: 48211
            download_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
            upload_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
            mime: application/pdf
            attachable_id: 134
            created_at: 2018-09-17T12:46:47+01:00
            title: Some PDF file
            attachable_type: Bill
            md5: 0c3f95f34370baa88f9fd9a671fea305
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: attachments
        - attributes:
            filename: file.pdf
            notes: Some notes
            updated_at: 2018-09-17T12:46:47+01:00
            size: 48211
            download_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
            upload_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
            mime: application/pdf
            attachable_id: 134
            created_at: 2018-09-17T12:46:47+01:00
            title: Some PDF file
            attachable_type: Bill
            md5: 0c3f95f34370baa88f9fd9a671fea305
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: attachments
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/AttachmentRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
      required:
      - data
      - meta
      type: object
    AttachmentRead:
      example:
        attributes:
          filename: file.pdf
          notes: Some notes
          updated_at: 2018-09-17T12:46:47+01:00
          size: 48211
          download_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
          upload_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
          mime: application/pdf
          attachable_id: 134
          created_at: 2018-09-17T12:46:47+01:00
          title: Some PDF file
          attachable_type: Bill
          md5: 0c3f95f34370baa88f9fd9a671fea305
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: attachments
      properties:
        type:
          description: Immutable value
          example: attachments
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Attachment'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    AttachmentSingle:
      example:
        data:
          attributes:
            filename: file.pdf
            notes: Some notes
            updated_at: 2018-09-17T12:46:47+01:00
            size: 48211
            download_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
            upload_uri: https://demo.firefly-iii.org/api/v1/attachments/191/download
            mime: application/pdf
            attachable_id: 134
            created_at: 2018-09-17T12:46:47+01:00
            title: Some PDF file
            attachable_type: Bill
            md5: 0c3f95f34370baa88f9fd9a671fea305
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: attachments
      properties:
        data:
          $ref: '#/components/schemas/AttachmentRead'
      required:
      - data
      type: object
    AutocompleteAccount:
      example:
        currency_symbol: $
        name: Checking Account
        id: "2"
        name_with_balance: Checking Account ($123.45)
        type: Asset account
        currency_id: 12
        currency_code: EUR
        currency_decimal_places: 2
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the account found by an auto-complete search.
          example: Checking Account
          format: string
          readOnly: true
          type: string
        name_with_balance:
          description: Asset accounts and liabilities have a second field with the
            given date's account balance.
          example: Checking Account ($123.45)
          format: string
          readOnly: true
          type: string
        type:
          description: Account type of the account found by the auto-complete search.
          example: Asset account
          format: string
          readOnly: true
          type: string
        currency_id:
          description: Currency ID for this account.
          example: 12
          format: int32
          readOnly: true
          type: integer
        currency_code:
          description: Currency code for this account.
          example: EUR
          format: string
          readOnly: true
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
      required:
      - currency_code
      - currency_decimal_places
      - currency_id
      - currency_symbol
      - id
      - name
      - name_with_balance
      - type
      type: object
    AutocompleteAccountArray:
      items:
        $ref: '#/components/schemas/AutocompleteAccount'
      type: array
    AutocompleteBill:
      example:
        name: Yearly bill
        id: "2"
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the bill found by an auto-complete search.
          example: Yearly bill
          format: string
          readOnly: true
          type: string
      required:
      - id
      - name
      type: object
    AutocompleteBillArray:
      items:
        $ref: '#/components/schemas/AutocompleteBill'
      type: array
    AutocompleteBudget:
      example:
        name: Groceries
        id: "2"
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the budget found by an auto-complete search.
          example: Groceries
          format: string
          readOnly: true
          type: string
      required:
      - id
      - name
      type: object
    AutocompleteBudgetArray:
      items:
        $ref: '#/components/schemas/AutocompleteBudget'
      type: array
    AutocompleteCategory:
      example:
        name: Category X
        id: "2"
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the category found by an auto-complete search.
          example: Category X
          format: string
          readOnly: true
          type: string
      required:
      - id
      - name
      type: object
    AutocompleteCategoryArray:
      items:
        $ref: '#/components/schemas/AutocompleteCategory'
      type: array
    AutocompleteCurrency:
      example:
        symbol: $
        code: EUR
        name: Currency name
        id: "2"
        decimal_places: 2
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Currency name.
          example: Currency name
          format: string
          readOnly: true
          type: string
        code:
          description: Currency code for this account.
          example: EUR
          format: string
          readOnly: true
          type: string
        symbol:
          example: $
          format: string
          readOnly: true
          type: string
        decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
      required:
      - code
      - decimal_places
      - id
      - name
      - symbol
      type: object
    AutocompleteCurrencyArray:
      items:
        $ref: '#/components/schemas/AutocompleteCurrency'
      type: array
    AutocompleteCurrencyCode:
      example:
        symbol: $
        code: EUR
        name: Currency name (XCN)
        id: "2"
        decimal_places: 2
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Currency name with the code between brackets.
          example: Currency name (XCN)
          format: string
          readOnly: true
          type: string
        code:
          description: Currency code for this account.
          example: EUR
          format: string
          readOnly: true
          type: string
        symbol:
          example: $
          format: string
          readOnly: true
          type: string
        decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
      required:
      - code
      - decimal_places
      - id
      - name
      - symbol
      type: object
    AutocompleteCurrencyCodeArray:
      items:
        $ref: '#/components/schemas/AutocompleteCurrencyCode'
      type: array
    AutocompleteObjectGroup:
      example:
        name: Object Group one
        id: "2"
        title: Object Group one
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        title:
          description: Title of the object group found by an auto-complete search.
          example: Object Group one
          format: string
          readOnly: true
          type: string
        name:
          description: Title of the object group found by an auto-complete search.
          example: Object Group one
          format: string
          readOnly: true
          type: string
      required:
      - id
      - name
      - title
      type: object
    AutocompleteObjectGroupArray:
      items:
        $ref: '#/components/schemas/AutocompleteObjectGroup'
      type: array
    AutocompletePiggy:
      example:
        currency_symbol: $
        name: New couch
        id: "2"
        currency_id: 12
        currency_code: EUR
        currency_decimal_places: 2
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the piggy bank found by an auto-complete search.
          example: New couch
          format: string
          readOnly: true
          type: string
        currency_id:
          description: Currency ID for this piggy bank.
          example: 12
          format: int32
          readOnly: true
          type: integer
        currency_code:
          description: Currency code for this piggy bank.
          example: EUR
          format: string
          readOnly: true
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
      required:
      - id
      - name
      type: object
    AutocompletePiggyArray:
      items:
        $ref: '#/components/schemas/AutocompletePiggy'
      type: array
    AutocompletePiggyBalance:
      example:
        currency_symbol: $
        name: New couch
        id: "2"
        name_with_balance: New couch
        currency_id: 12
        currency_code: EUR
        currency_decimal_places: 2
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the piggy bank found by an auto-complete search.
          example: New couch
          format: string
          readOnly: true
          type: string
        name_with_balance:
          description: Name of the piggy bank found by an auto-complete search with
            the current balance formatted nicely.
          example: New couch
          format: string
          readOnly: true
          type: string
        currency_id:
          description: Currency ID for this piggy bank.
          example: 12
          format: int32
          readOnly: true
          type: integer
        currency_code:
          description: Currency code for this piggy bank.
          example: EUR
          format: string
          readOnly: true
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
      required:
      - id
      - name
      type: object
    AutocompletePiggyBalanceArray:
      items:
        $ref: '#/components/schemas/AutocompletePiggyBalance'
      type: array
    AutocompleteRule:
      example:
        name: Rule one
        id: "2"
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the rule found by an auto-complete search.
          example: Rule one
          format: string
          readOnly: true
          type: string
      required:
      - id
      - name
      type: object
    AutocompleteRuleArray:
      items:
        $ref: '#/components/schemas/AutocompleteRule'
      type: array
    AutocompleteRuleGroup:
      example:
        name: Rule group one
        id: "2"
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the rule group found by an auto-complete search.
          example: Rule group one
          format: string
          readOnly: true
          type: string
      required:
      - id
      - name
      type: object
    AutocompleteRuleGroupArray:
      items:
        $ref: '#/components/schemas/AutocompleteRuleGroup'
      type: array
    AutocompleteTag:
      example:
        name: too-expensive-tag-example
        id: "2"
        tag: too-expensive-tag-example
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Name of the tag found by an auto-complete search.
          example: too-expensive-tag-example
          format: string
          readOnly: true
          type: string
        tag:
          description: Name of the tag found by an auto-complete search.
          example: too-expensive-tag-example
          format: string
          readOnly: true
          type: string
      required:
      - id
      - name
      - tag
      type: object
    AutocompleteTagArray:
      items:
        $ref: '#/components/schemas/AutocompleteTag'
      type: array
    AutocompleteTransaction:
      example:
        name: Transaction
        description: Transaction
        id: "2"
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Transaction description with ID
          example: Transaction
          format: string
          readOnly: true
          type: string
        description:
          description: Transaction description with ID
          example: Transaction
          format: string
          readOnly: true
          type: string
      required:
      - description
      - id
      - name
      type: object
    AutocompleteTransactionArray:
      items:
        $ref: '#/components/schemas/AutocompleteTransaction'
      type: array
    AutocompleteTransactionID:
      example:
        name: '#12: Transaction'
        description: '#12: Transaction'
        id: "2"
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Transaction description with ID
          example: '#12: Transaction'
          format: string
          readOnly: true
          type: string
        description:
          description: Transaction description with ID
          example: '#12: Transaction'
          format: string
          readOnly: true
          type: string
      required:
      - description
      - id
      - name
      type: object
    AutocompleteTransactionIDArray:
      items:
        $ref: '#/components/schemas/AutocompleteTransactionID'
      type: array
    AutocompleteTransactionType:
      example:
        name: Withdrawal
        id: "2"
        type: Withdrawal
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        name:
          description: Type of the object found by an auto-complete search.
          example: Withdrawal
          format: string
          readOnly: true
          type: string
        type:
          description: Name of the object found by an auto-complete search.
          example: Withdrawal
          format: string
          readOnly: true
          type: string
      required:
      - id
      - name
      - type
      type: object
    AutocompleteTransactionTypeArray:
      items:
        $ref: '#/components/schemas/AutocompleteTransactionType'
      type: array
    AvailableBudget:
      example:
        amount: "123.45"
        spent_outside_budget:
        - currency_symbol: $
          sum: "123.45"
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        - currency_symbol: $
          sum: "123.45"
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        updated_at: 2018-09-17T12:46:47+01:00
        spent_in_budgets:
        - currency_symbol: $
          sum: "123.45"
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        - currency_symbol: $
          sum: "123.45"
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        currency_symbol: $
        start: 2017-09-17T00:00:00.000+0000
        created_at: 2018-09-17T12:46:47+01:00
        end: 2017-09-17T00:00:00.000+0000
        currency_id: 5
        currency_code: EUR
        currency_decimal_places: 2
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        currency_id:
          description: Use either currency_id or currency_code.
          example: 5
          format: int32
          type: integer
        currency_code:
          description: Use either currency_id or currency_code.
          example: EUR
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
        amount:
          example: "123.45"
          format: amount
          type: string
        start:
          description: Start date of the available budget.
          example: 2017-09-17
          format: date
          type: string
        end:
          description: End date of the available budget.
          example: 2017-09-17
          format: date
          type: string
        spent_in_budgets:
          items:
            $ref: '#/components/schemas/BudgetSpent'
          readOnly: true
          type: array
        spent_outside_budget:
          items:
            $ref: '#/components/schemas/BudgetSpent'
          readOnly: true
          type: array
      required:
      - amount
      - end
      - start
      type: object
    AvailableBudgetArray:
      example:
        data:
        - attributes:
            amount: "123.45"
            spent_outside_budget:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            updated_at: 2018-09-17T12:46:47+01:00
            spent_in_budgets:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            currency_symbol: $
            start: 2017-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            end: 2017-09-17T00:00:00.000+0000
            currency_id: 5
            currency_code: EUR
            currency_decimal_places: 2
          id: "2"
          type: available_budgets
        - attributes:
            amount: "123.45"
            spent_outside_budget:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            updated_at: 2018-09-17T12:46:47+01:00
            spent_in_budgets:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            currency_symbol: $
            start: 2017-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            end: 2017-09-17T00:00:00.000+0000
            currency_id: 5
            currency_code: EUR
            currency_decimal_places: 2
          id: "2"
          type: available_budgets
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/AvailableBudgetRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
      required:
      - data
      - meta
      type: object
    AvailableBudgetRead:
      example:
        attributes:
          amount: "123.45"
          spent_outside_budget:
          - currency_symbol: $
            sum: "123.45"
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          - currency_symbol: $
            sum: "123.45"
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          updated_at: 2018-09-17T12:46:47+01:00
          spent_in_budgets:
          - currency_symbol: $
            sum: "123.45"
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          - currency_symbol: $
            sum: "123.45"
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          currency_symbol: $
          start: 2017-09-17T00:00:00.000+0000
          created_at: 2018-09-17T12:46:47+01:00
          end: 2017-09-17T00:00:00.000+0000
          currency_id: 5
          currency_code: EUR
          currency_decimal_places: 2
        id: "2"
        type: available_budgets
      properties:
        type:
          description: Immutable value
          example: available_budgets
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/AvailableBudget'
      required:
      - attributes
      - id
      - type
      type: object
    AvailableBudgetSingle:
      example:
        data:
          attributes:
            amount: "123.45"
            spent_outside_budget:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            updated_at: 2018-09-17T12:46:47+01:00
            spent_in_budgets:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            currency_symbol: $
            start: 2017-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            end: 2017-09-17T00:00:00.000+0000
            currency_id: 5
            currency_code: EUR
            currency_decimal_places: 2
          id: "2"
          type: available_budgets
      properties:
        data:
          $ref: '#/components/schemas/AvailableBudgetRead'
      required:
      - data
      type: object
    BasicSummary:
      items:
        $ref: '#/components/schemas/BasicSummaryEntry'
      type: array
    BasicSummaryEntry:
      example:
        value_parsed: $ 12.45
        sub_title: $20 + $-40
        currency_symbol: $
        monetary_value: 123.45
        title: Balance ($)
        local_icon: balance-scale
        key: balance-in-EUR
        currency_id: 5
        currency_code: EUR
        currency_decimal_places: 2
      properties:
        key:
          description: This is a reference to the type of info shared, not influenced
            by translations or user preferences.
          example: balance-in-EUR
          format: string
          type: string
        title:
          description: A translated title for the information shared.
          example: Balance ($)
          format: string
          type: string
        monetary_value:
          description: The amount as a float.
          example: 123.45
          format: double
          type: number
        currency_id:
          description: The currency ID of the associated currency.
          example: 5
          format: int32
          type: integer
        currency_code:
          example: EUR
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          type: string
        currency_decimal_places:
          description: Number of decimals for the associated currency.
          example: 2
          format: int32
          type: integer
        value_parsed:
          description: The amount formatted according to the users locale
          example: $ 12.45
          format: string
          type: string
        local_icon:
          description: Reference to a font-awesome icon without the fa- part.
          example: balance-scale
          format: string
          type: string
        sub_title:
          description: A short explanation of the amounts origin. Already formatted
            according to the locale of the user or translated, if relevant.
          example: $20 + $-40
          format: string
          type: string
      type: object
    Bill:
      example:
        date: 2018-09-17T00:00:00.000+0000
        notes: Some example notes
        currency_symbol: $
        created_at: 2018-09-17T12:46:47+01:00
        active: true
        amount_max: "123.45"
        skip: 0
        next_expected_match: 2018-09-17T00:00:00.000+0000
        object_group_order: 5
        repeat_freq: monthly
        currency_code: EUR
        currency_decimal_places: 2
        pay_dates:
        - 2000-01-23
        - 2000-01-23
        updated_at: 2018-09-17T12:46:47+01:00
        object_group_id: 5
        paid_dates:
        - date: 2000-01-23
          transaction_group_id: 0
          transaction_journal_id: 6
        - date: 2000-01-23
          transaction_group_id: 0
          transaction_journal_id: 6
        name: Rent
        amount_min: "123.45"
        currency_id: 5
        object_group_title: Example Group
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        currency_id:
          description: Use either currency_id or currency_code
          example: 5
          format: int32
          type: integer
        currency_code:
          description: Use either currency_id or currency_code
          example: EUR
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
        name:
          example: Rent
          format: string
          type: string
        amount_min:
          example: "123.45"
          format: amount
          type: string
        amount_max:
          example: "123.45"
          format: amount
          type: string
        date:
          example: 2018-09-17
          format: date
          type: string
        repeat_freq:
          description: How often the bill must be paid.
          enum:
          - weekly
          - monthly
          - quarterly
          - half-year
          - yearly
          example: monthly
          format: string
          type: string
        skip:
          description: How often the bill must be skipped. 1 means a bi-monthly bill.
          example: 0
          format: int32
          type: integer
        active:
          description: If the bill is active.
          example: true
          format: boolean
          type: boolean
        notes:
          example: Some example notes
          format: string
          type: string
        next_expected_match:
          description: When the bill is expected to be due.
          example: 2018-09-17
          format: date
          readOnly: true
          type: string
        object_group_id:
          description: The group ID of the group this object is part of. NULL if no
            group.
          example: 5
          format: int32
          type: integer
        object_group_order:
          description: The order of the group. At least 1, for the highest sorting.
          example: 5
          format: int32
          type: integer
        object_group_title:
          description: The name of the group. NULL if no group.
          example: Example Group
          format: string
          type: string
        pay_dates:
          description: Array of future dates when the bill is expected to be paid.
            Autogenerated.
          items:
            format: date
            readOnly: true
            type: string
          readOnly: true
          type: array
        paid_dates:
          description: Array of past transactions when the bill was paid.
          items:
            $ref: '#/components/schemas/Bill_paid_dates'
          readOnly: true
          type: array
      required:
      - amount_max
      - amount_min
      - date
      - name
      - repeat_freq
      type: object
    BillArray:
      example:
        data:
        - attributes:
            date: 2018-09-17T00:00:00.000+0000
            notes: Some example notes
            currency_symbol: $
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            amount_max: "123.45"
            skip: 0
            next_expected_match: 2018-09-17T00:00:00.000+0000
            object_group_order: 5
            repeat_freq: monthly
            currency_code: EUR
            currency_decimal_places: 2
            pay_dates:
            - 2000-01-23
            - 2000-01-23
            updated_at: 2018-09-17T12:46:47+01:00
            object_group_id: 5
            paid_dates:
            - date: 2000-01-23
              transaction_group_id: 0
              transaction_journal_id: 6
            - date: 2000-01-23
              transaction_group_id: 0
              transaction_journal_id: 6
            name: Rent
            amount_min: "123.45"
            currency_id: 5
            object_group_title: Example Group
          id: "2"
          type: bills
        - attributes:
            date: 2018-09-17T00:00:00.000+0000
            notes: Some example notes
            currency_symbol: $
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            amount_max: "123.45"
            skip: 0
            next_expected_match: 2018-09-17T00:00:00.000+0000
            object_group_order: 5
            repeat_freq: monthly
            currency_code: EUR
            currency_decimal_places: 2
            pay_dates:
            - 2000-01-23
            - 2000-01-23
            updated_at: 2018-09-17T12:46:47+01:00
            object_group_id: 5
            paid_dates:
            - date: 2000-01-23
              transaction_group_id: 0
              transaction_journal_id: 6
            - date: 2000-01-23
              transaction_group_id: 0
              transaction_journal_id: 6
            name: Rent
            amount_min: "123.45"
            currency_id: 5
            object_group_title: Example Group
          id: "2"
          type: bills
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/BillRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
      required:
      - data
      - meta
      type: object
    BillRead:
      example:
        attributes:
          date: 2018-09-17T00:00:00.000+0000
          notes: Some example notes
          currency_symbol: $
          created_at: 2018-09-17T12:46:47+01:00
          active: true
          amount_max: "123.45"
          skip: 0
          next_expected_match: 2018-09-17T00:00:00.000+0000
          object_group_order: 5
          repeat_freq: monthly
          currency_code: EUR
          currency_decimal_places: 2
          pay_dates:
          - 2000-01-23
          - 2000-01-23
          updated_at: 2018-09-17T12:46:47+01:00
          object_group_id: 5
          paid_dates:
          - date: 2000-01-23
            transaction_group_id: 0
            transaction_journal_id: 6
          - date: 2000-01-23
            transaction_group_id: 0
            transaction_journal_id: 6
          name: Rent
          amount_min: "123.45"
          currency_id: 5
          object_group_title: Example Group
        id: "2"
        type: bills
      properties:
        type:
          description: Immutable value
          example: bills
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Bill'
      required:
      - attributes
      - id
      - type
      type: object
    BillSingle:
      example:
        data:
          attributes:
            date: 2018-09-17T00:00:00.000+0000
            notes: Some example notes
            currency_symbol: $
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            amount_max: "123.45"
            skip: 0
            next_expected_match: 2018-09-17T00:00:00.000+0000
            object_group_order: 5
            repeat_freq: monthly
            currency_code: EUR
            currency_decimal_places: 2
            pay_dates:
            - 2000-01-23
            - 2000-01-23
            updated_at: 2018-09-17T12:46:47+01:00
            object_group_id: 5
            paid_dates:
            - date: 2000-01-23
              transaction_group_id: 0
              transaction_journal_id: 6
            - date: 2000-01-23
              transaction_group_id: 0
              transaction_journal_id: 6
            name: Rent
            amount_min: "123.45"
            currency_id: 5
            object_group_title: Example Group
          id: "2"
          type: bills
      properties:
        data:
          $ref: '#/components/schemas/BillRead'
      required:
      - data
      type: object
    Budget:
      example:
        auto_budget_currency_id: 12
        auto_budget_amount: -1012.12
        auto_budget_period: EUR
        updated_at: 2018-09-17T12:46:47+01:00
        auto_budget_type: reset
        spent:
        - currency_symbol: $
          sum: "123.45"
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        - currency_symbol: $
          sum: "123.45"
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        name: Bills
        created_at: 2018-09-17T12:46:47+01:00
        active: false
        auto_budget_currency_code: EUR
        order: 5
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        name:
          example: Bills
          format: string
          type: string
        active:
          example: false
          format: boolean
          type: boolean
        order:
          example: 5
          format: int32
          readOnly: true
          type: integer
        auto_budget_type:
          description: The type of auto-budget that Firefly III must create.
          enum:
          - reset
          - rollover
          - none
          example: reset
          format: string
          type: string
        auto_budget_currency_id:
          description: Use either currency_id or currency_code. Defaults to the user's
            default currency.
          example: 12
          format: int32
          type: integer
        auto_budget_currency_code:
          description: Use either currency_id or currency_code. Defaults to the user's
            default currency.
          example: EUR
          format: string
          type: string
        auto_budget_amount:
          example: -1012.12
          format: amount
          type: string
        auto_budget_period:
          description: Period for the auto budget
          enum:
          - daily
          - weekly
          - monthly
          - quarterly
          - half_year
          - yearly
          example: EUR
          format: string
          type: string
        spent:
          description: Information on how much was spent in this budget. Is only filled
            in when the start and end date are submitted.
          items:
            $ref: '#/components/schemas/BudgetSpent'
          readOnly: true
          type: array
      required:
      - name
      type: object
    BudgetArray:
      example:
        data:
        - attributes:
            auto_budget_currency_id: 12
            auto_budget_amount: -1012.12
            auto_budget_period: EUR
            updated_at: 2018-09-17T12:46:47+01:00
            auto_budget_type: reset
            spent:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            name: Bills
            created_at: 2018-09-17T12:46:47+01:00
            active: false
            auto_budget_currency_code: EUR
            order: 5
          id: "2"
          type: budgets
        - attributes:
            auto_budget_currency_id: 12
            auto_budget_amount: -1012.12
            auto_budget_period: EUR
            updated_at: 2018-09-17T12:46:47+01:00
            auto_budget_type: reset
            spent:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            name: Bills
            created_at: 2018-09-17T12:46:47+01:00
            active: false
            auto_budget_currency_code: EUR
            order: 5
          id: "2"
          type: budgets
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/BudgetRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
      required:
      - data
      - meta
      type: object
    BudgetLimit:
      example:
        amount: "123.45"
        updated_at: 2018-09-17T12:46:47+01:00
        currency_symbol: $
        budget_id: 23
        spent:
        - currency_symbol: $
          sum: "123.45"
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        - currency_symbol: $
          sum: "123.45"
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        start: 2017-09-17T00:00:00.000+0000
        created_at: 2018-09-17T12:46:47+01:00
        end: 2017-09-17T00:00:00.000+0000
        currency_id: 5
        currency_code: EUR
        currency_decimal_places: 2
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        currency_id:
          description: Use either currency_id or currency_code. Defaults to the user's
            default currency.
          example: 5
          format: int32
          type: integer
        currency_code:
          description: Use either currency_id or currency_code. Defaults to the user's
            default currency.
          example: EUR
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          example: 2
          format: int32
          readOnly: true
          type: integer
        budget_id:
          description: The budget ID of the associated budget.
          example: 23
          format: int32
          type: integer
        start:
          description: Start date of the budget limit.
          example: 2017-09-17
          format: date
          type: string
        end:
          description: End date of the budget limit.
          example: 2017-09-17
          format: date
          type: string
        amount:
          example: "123.45"
          format: amount
          type: string
        spent:
          items:
            $ref: '#/components/schemas/BudgetSpent'
          readOnly: true
          type: array
      required:
      - amount
      - budget_id
      - end
      - start
      type: object
    BudgetLimitArray:
      example:
        data:
        - attributes:
            amount: "123.45"
            updated_at: 2018-09-17T12:46:47+01:00
            currency_symbol: $
            budget_id: 23
            spent:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            start: 2017-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            end: 2017-09-17T00:00:00.000+0000
            currency_id: 5
            currency_code: EUR
            currency_decimal_places: 2
          id: "2"
          type: budget_limits
        - attributes:
            amount: "123.45"
            updated_at: 2018-09-17T12:46:47+01:00
            currency_symbol: $
            budget_id: 23
            spent:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            start: 2017-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            end: 2017-09-17T00:00:00.000+0000
            currency_id: 5
            currency_code: EUR
            currency_decimal_places: 2
          id: "2"
          type: budget_limits
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/BudgetLimitRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
      required:
      - data
      - meta
      type: object
    BudgetLimitRead:
      example:
        attributes:
          amount: "123.45"
          updated_at: 2018-09-17T12:46:47+01:00
          currency_symbol: $
          budget_id: 23
          spent:
          - currency_symbol: $
            sum: "123.45"
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          - currency_symbol: $
            sum: "123.45"
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          start: 2017-09-17T00:00:00.000+0000
          created_at: 2018-09-17T12:46:47+01:00
          end: 2017-09-17T00:00:00.000+0000
          currency_id: 5
          currency_code: EUR
          currency_decimal_places: 2
        id: "2"
        type: budget_limits
      properties:
        type:
          description: Immutable value
          example: budget_limits
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/BudgetLimit'
      required:
      - attributes
      - id
      - type
      type: object
    BudgetLimitSingle:
      example:
        data:
          attributes:
            amount: "123.45"
            updated_at: 2018-09-17T12:46:47+01:00
            currency_symbol: $
            budget_id: 23
            spent:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            start: 2017-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            end: 2017-09-17T00:00:00.000+0000
            currency_id: 5
            currency_code: EUR
            currency_decimal_places: 2
          id: "2"
          type: budget_limits
      properties:
        data:
          $ref: '#/components/schemas/BudgetLimitRead'
      required:
      - data
      type: object
    BudgetRead:
      example:
        attributes:
          auto_budget_currency_id: 12
          auto_budget_amount: -1012.12
          auto_budget_period: EUR
          updated_at: 2018-09-17T12:46:47+01:00
          auto_budget_type: reset
          spent:
          - currency_symbol: $
            sum: "123.45"
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          - currency_symbol: $
            sum: "123.45"
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          name: Bills
          created_at: 2018-09-17T12:46:47+01:00
          active: false
          auto_budget_currency_code: EUR
          order: 5
        id: "2"
        type: budgets
      properties:
        type:
          description: Immutable value
          example: budgets
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Budget'
      required:
      - attributes
      - id
      - type
      type: object
    BudgetSingle:
      example:
        data:
          attributes:
            auto_budget_currency_id: 12
            auto_budget_amount: -1012.12
            auto_budget_period: EUR
            updated_at: 2018-09-17T12:46:47+01:00
            auto_budget_type: reset
            spent:
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - currency_symbol: $
              sum: "123.45"
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            name: Bills
            created_at: 2018-09-17T12:46:47+01:00
            active: false
            auto_budget_currency_code: EUR
            order: 5
          id: "2"
          type: budgets
      properties:
        data:
          $ref: '#/components/schemas/BudgetRead'
      required:
      - data
      type: object
    BudgetSpent:
      example:
        currency_symbol: $
        sum: "123.45"
        currency_id: 5
        currency_code: USD
        currency_decimal_places: 2
      properties:
        sum:
          description: The amount spent.
          example: "123.45"
          format: amount
          type: string
        currency_id:
          example: 5
          format: int32
          type: integer
        currency_code:
          example: USD
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          type: string
        currency_decimal_places:
          description: Number of decimals supported by the currency
          example: 2
          format: int32
          type: integer
      type: object
    Category:
      example:
        earned:
        - amount: "123.45"
          currency_symbol: $
          start: 2018-04-01T00:00:00.000+0000
          end: 2018-04-30T00:00:00.000+0000
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        - amount: "123.45"
          currency_symbol: $
          start: 2018-04-01T00:00:00.000+0000
          end: 2018-04-30T00:00:00.000+0000
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        notes: Some example notes
        updated_at: 2018-09-17T12:46:47+01:00
        spent:
        - amount: -12423.45
          currency_symbol: $
          start: 2018-04-01T00:00:00.000+0000
          end: 2018-04-30T00:00:00.000+0000
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        - amount: -12423.45
          currency_symbol: $
          start: 2018-04-01T00:00:00.000+0000
          end: 2018-04-30T00:00:00.000+0000
          currency_id: 5
          currency_code: USD
          currency_decimal_places: 2
        name: Lunch
        created_at: 2018-09-17T12:46:47+01:00
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        name:
          example: Lunch
          format: string
          type: string
        notes:
          example: Some example notes
          format: string
          type: string
        spent:
          items:
            $ref: '#/components/schemas/CategorySpent'
          readOnly: true
          type: array
        earned:
          items:
            $ref: '#/components/schemas/CategoryEarned'
          readOnly: true
          type: array
      required:
      - name
      type: object
    CategoryArray:
      example:
        data:
        - attributes:
            earned:
            - amount: "123.45"
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - amount: "123.45"
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            notes: Some example notes
            updated_at: 2018-09-17T12:46:47+01:00
            spent:
            - amount: -12423.45
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - amount: -12423.45
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            name: Lunch
            created_at: 2018-09-17T12:46:47+01:00
          id: "2"
          type: categories
        - attributes:
            earned:
            - amount: "123.45"
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - amount: "123.45"
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            notes: Some example notes
            updated_at: 2018-09-17T12:46:47+01:00
            spent:
            - amount: -12423.45
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - amount: -12423.45
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            name: Lunch
            created_at: 2018-09-17T12:46:47+01:00
          id: "2"
          type: categories
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
      properties:
        data:
          items:
            $ref: '#/components/schemas/CategoryRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
      required:
      - data
      - meta
      type: object
    CategoryEarned:
      example:
        amount: "123.45"
        currency_symbol: $
        start: 2018-04-01T00:00:00.000+0000
        end: 2018-04-30T00:00:00.000+0000
        currency_id: 5
        currency_code: USD
        currency_decimal_places: 2
      properties:
        start:
          example: 2018-04-01
          format: date
          type: string
        end:
          example: 2018-04-30
          format: date
          type: string
        currency_id:
          example: 5
          format: int32
          type: integer
        currency_code:
          example: USD
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          type: string
        currency_decimal_places:
          description: Number of decimals supported by the currency
          example: 2
          format: int32
          type: integer
        amount:
          description: The amount earned.
          example: "123.45"
          format: amount
          type: string
      type: object
    CategoryRead:
      example:
        attributes:
          earned:
          - amount: "123.45"
            currency_symbol: $
            start: 2018-04-01T00:00:00.000+0000
            end: 2018-04-30T00:00:00.000+0000
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          - amount: "123.45"
            currency_symbol: $
            start: 2018-04-01T00:00:00.000+0000
            end: 2018-04-30T00:00:00.000+0000
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          notes: Some example notes
          updated_at: 2018-09-17T12:46:47+01:00
          spent:
          - amount: -12423.45
            currency_symbol: $
            start: 2018-04-01T00:00:00.000+0000
            end: 2018-04-30T00:00:00.000+0000
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          - amount: -12423.45
            currency_symbol: $
            start: 2018-04-01T00:00:00.000+0000
            end: 2018-04-30T00:00:00.000+0000
            currency_id: 5
            currency_code: USD
            currency_decimal_places: 2
          name: Lunch
          created_at: 2018-09-17T12:46:47+01:00
        id: "2"
        type: categories
      properties:
        type:
          description: Immutable value
          example: categories
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Category'
      required:
      - attributes
      - id
      - type
      type: object
    CategorySingle:
      example:
        data:
          attributes:
            earned:
            - amount: "123.45"
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - amount: "123.45"
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            notes: Some example notes
            updated_at: 2018-09-17T12:46:47+01:00
            spent:
            - amount: -12423.45
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            - amount: -12423.45
              currency_symbol: $
              start: 2018-04-01T00:00:00.000+0000
              end: 2018-04-30T00:00:00.000+0000
              currency_id: 5
              currency_code: USD
              currency_decimal_places: 2
            name: Lunch
            created_at: 2018-09-17T12:46:47+01:00
          id: "2"
          type: categories
      properties:
        data:
          $ref: '#/components/schemas/CategoryRead'
      required:
      - data
      type: object
    CategorySpent:
      example:
        amount: -12423.45
        currency_symbol: $
        start: 2018-04-01T00:00:00.000+0000
        end: 2018-04-30T00:00:00.000+0000
        currency_id: 5
        currency_code: USD
        currency_decimal_places: 2
      properties:
        start:
          example: 2018-04-01
          format: date
          type: string
        end:
          example: 2018-04-30
          format: date
          type: string
        currency_id:
          example: 5
          format: int32
          type: integer
        currency_code:
          example: USD
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          type: string
        currency_decimal_places:
          description: Number of decimals supported by the currency
          example: 2
          format: int32
          type: integer
        amount:
          description: The amount spent.
          example: -12423.45
          format: amount
          type: string
      type: object
    ChartBar:
      items:
        $ref: '#/components/schemas/ChartDataSet'
      type: array
    ChartDataPoint:
      example:
        key: value
      properties:
        key:
          description: 'The key is the label of the value, so for example: ''2018-01-01''
            => 13 or ''Groceries'' => -123.'
          example: value
          format: string
          type: string
      type: object
    ChartDataSet:
      example:
        entries:
        - key: value
        - key: value
        currency_symbol: $
        label: Checking account
        type: line
        yAxisID: 0
        currency_id: 5
        currency_code: EUR
        currency_decimal_places: 2
      properties:
        label:
          description: This is the title of the current set. It can refer to an account,
            a budget or another object (by name).
          example: Checking account
          format: string
          type: string
        currency_id:
          description: The currency ID of the currency associated to the data in the
            entries.
          example: 5
          format: int32
          type: integer
        currency_code:
          example: EUR
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          type: string
        currency_decimal_places:
          description: Number of decimals for the currency associated to the data
            in the entries.
          example: 2
          format: int32
          type: integer
        type:
          description: Indicated the type of chart that is expected to be rendered.
            You can safely ignore this if you want.
          example: line
          format: string
          type: string
        yAxisID:
          description: Used to indicate the Y axis for this data set. Is usually between
            0 and 1 (left and right side of the chart).
          example: 0
          format: int32
          type: integer
        entries:
          description: The actual entries for this data set. They 'key' value is the
            label for the data point. The value is the actual (numerical) value.
          items:
            $ref: '#/components/schemas/ChartDataPoint'
          type: array
      type: object
    ChartLine:
      items:
        $ref: '#/components/schemas/ChartDataSet'
      type: array
    Configuration:
      example:
        data:
          permission_update_check: -1
          single_user_mode: true
          last_update_check: 2018-09-17T12:46:47+01:00
          is_demo_site: true
      properties:
        data:
          $ref: '#/components/schemas/Configuration_data'
      type: object
    ConfigurationUpdate:
      properties:
        value:
          description: Can be a number or a boolean. This depends on the actual configuration
            value.
          example: "1"
          format: string
          type: string
      required:
      - value
      type: object
    Currency:
      example:
        symbol: AM$
        default: false
        code: AMS
        updated_at: 2018-09-17T12:46:47+01:00
        name: Ankh-Morpork dollar
        created_at: 2018-09-17T12:46:47+01:00
        enabled: true
        decimal_places: 2
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        enabled:
          description: defaults to true
          example: true
          format: boolean
          type: boolean
        default:
          description: Make this currency the default currency.
          example: false
          format: boolean
          type: boolean
        code:
          example: AMS
          format: string
          type: string
        name:
          example: Ankh-Morpork dollar
          format: string
          type: string
        symbol:
          example: AM$
          format: string
          type: string
        decimal_places:
          description: Supports 0-16 decimals.
          example: 2
          format: int32
          type: integer
      required:
      - code
      - name
      - symbol
      type: object
    CurrencyArray:
      example:
        data:
        - attributes:
            symbol: AM$
            default: false
            code: AMS
            updated_at: 2018-09-17T12:46:47+01:00
            name: Ankh-Morpork dollar
            created_at: 2018-09-17T12:46:47+01:00
            enabled: true
            decimal_places: 2
          id: "2"
          type: currencies
        - attributes:
            symbol: AM$
            default: false
            code: AMS
            updated_at: 2018-09-17T12:46:47+01:00
            name: Ankh-Morpork dollar
            created_at: 2018-09-17T12:46:47+01:00
            enabled: true
            decimal_places: 2
          id: "2"
          type: currencies
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/CurrencyRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    CurrencyRead:
      example:
        attributes:
          symbol: AM$
          default: false
          code: AMS
          updated_at: 2018-09-17T12:46:47+01:00
          name: Ankh-Morpork dollar
          created_at: 2018-09-17T12:46:47+01:00
          enabled: true
          decimal_places: 2
        id: "2"
        type: currencies
      properties:
        type:
          description: Immutable value
          example: currencies
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Currency'
      required:
      - attributes
      - id
      - type
      type: object
    CurrencySingle:
      example:
        data:
          attributes:
            symbol: AM$
            default: false
            code: AMS
            updated_at: 2018-09-17T12:46:47+01:00
            name: Ankh-Morpork dollar
            created_at: 2018-09-17T12:46:47+01:00
            enabled: true
            decimal_places: 2
          id: "2"
          type: currencies
      properties:
        data:
          $ref: '#/components/schemas/CurrencyRead'
      required:
      - data
      type: object
    DataDestroyObject:
      enum:
      - budgets
      - bills
      - piggy_banks
      - rules
      - recurring
      - categories
      - tags
      - object_groups
      - accounts
      - asset_accounts
      - expense_accounts
      - revenue_accounts
      - liabilities
      - transactions
      - withdrawals
      - deposits
      - transfers
      type: string
    ExchangeRate:
      example:
        attributes:
          date: 2018-09-17T00:00:00.000+0000
          to_currency_decimal_places: 2
          amount: "123.45"
          to_currency_symbol: $
          from_currency_symbol: $
          to_currency_code: EUR
          created_at: 2018-09-17T12:46:47+01:00
          from_currency_code: EUR
          updated_at: 2018-09-17T12:46:47+01:00
          rate: 1.1213
          to_currency_id: 5
          from_currency_decimal_places: 2
          from_currency_name: Euro
          from_currency_id: 5
        id: "2"
        type: currency_exchange_rates
      properties:
        type:
          description: Immutable value
          example: currency_exchange_rates
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/ExchangeRate_attributes'
      type: object
    ExchangeRateArray:
      example:
        data:
        - attributes:
            date: 2018-09-17T00:00:00.000+0000
            to_currency_decimal_places: 2
            amount: "123.45"
            to_currency_symbol: $
            from_currency_symbol: $
            to_currency_code: EUR
            created_at: 2018-09-17T12:46:47+01:00
            from_currency_code: EUR
            updated_at: 2018-09-17T12:46:47+01:00
            rate: 1.1213
            to_currency_id: 5
            from_currency_decimal_places: 2
            from_currency_name: Euro
            from_currency_id: 5
          id: "2"
          type: currency_exchange_rates
        - attributes:
            date: 2018-09-17T00:00:00.000+0000
            to_currency_decimal_places: 2
            amount: "123.45"
            to_currency_symbol: $
            from_currency_symbol: $
            to_currency_code: EUR
            created_at: 2018-09-17T12:46:47+01:00
            from_currency_code: EUR
            updated_at: 2018-09-17T12:46:47+01:00
            rate: 1.1213
            to_currency_id: 5
            from_currency_decimal_places: 2
            from_currency_name: Euro
            from_currency_id: 5
          id: "2"
          type: currency_exchange_rates
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/ExchangeRate'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    ImportJob:
      example:
        attributes:
          tag_tag: Import with key 'abcdef'
          configuration: configuration
          created_at: 2018-09-17T12:46:47+01:00
          transactions: transactions
          updated_at: 2018-09-17T12:46:47+01:00
          stage: apply_rules
          provider: bunq
          file_type: csv
          tag_id: 121
          extended_status: extended_status
          key: abcdef
          errors: errors
          status: import_finished
        id: "2"
        type: import_jobs
      properties:
        type:
          description: Immutable value
          example: import_jobs
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/ImportJob_attributes'
      type: object
    ImportJobArray:
      example:
        data:
        - attributes:
            tag_tag: Import with key 'abcdef'
            configuration: configuration
            created_at: 2018-09-17T12:46:47+01:00
            transactions: transactions
            updated_at: 2018-09-17T12:46:47+01:00
            stage: apply_rules
            provider: bunq
            file_type: csv
            tag_id: 121
            extended_status: extended_status
            key: abcdef
            errors: errors
            status: import_finished
          id: "2"
          type: import_jobs
        - attributes:
            tag_tag: Import with key 'abcdef'
            configuration: configuration
            created_at: 2018-09-17T12:46:47+01:00
            transactions: transactions
            updated_at: 2018-09-17T12:46:47+01:00
            stage: apply_rules
            provider: bunq
            file_type: csv
            tag_id: 121
            extended_status: extended_status
            key: abcdef
            errors: errors
            status: import_finished
          id: "2"
          type: import_jobs
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/ImportJob'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    ImportJobSingle:
      example:
        data:
          attributes:
            tag_tag: Import with key 'abcdef'
            configuration: configuration
            created_at: 2018-09-17T12:46:47+01:00
            transactions: transactions
            updated_at: 2018-09-17T12:46:47+01:00
            stage: apply_rules
            provider: bunq
            file_type: csv
            tag_id: 121
            extended_status: extended_status
            key: abcdef
            errors: errors
            status: import_finished
          id: "2"
          type: import_jobs
      properties:
        data:
          $ref: '#/components/schemas/ImportJob'
      required:
      - data
      type: object
    LinkType:
      example:
        inward: is (partially) paid for by
        editable: false
        name: Paid
        outward: (partially) pays for
      properties:
        name:
          example: Paid
          format: string
          type: string
        inward:
          example: is (partially) paid for by
          format: string
          type: string
        outward:
          example: (partially) pays for
          format: string
          type: string
        editable:
          example: false
          format: boolean
          readOnly: true
          type: boolean
      required:
      - inward
      - name
      - outward
      type: object
    LinkTypeArray:
      example:
        data:
        - attributes:
            inward: is (partially) paid for by
            editable: false
            name: Paid
            outward: (partially) pays for
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: link_types
        - attributes:
            inward: is (partially) paid for by
            editable: false
            name: Paid
            outward: (partially) pays for
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: link_types
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/LinkTypeRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    LinkTypeRead:
      example:
        attributes:
          inward: is (partially) paid for by
          editable: false
          name: Paid
          outward: (partially) pays for
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: link_types
      properties:
        type:
          description: Immutable value
          example: link_types
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/LinkType'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    LinkTypeSingle:
      example:
        data:
          attributes:
            inward: is (partially) paid for by
            editable: false
            name: Paid
            outward: (partially) pays for
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: link_types
      properties:
        data:
          $ref: '#/components/schemas/LinkTypeRead'
      required:
      - data
      type: object
    Meta:
      example:
        pagination:
          per_page: 100
          total: 3
          count: 20
          total_pages: 1
          current_page: 1
      properties:
        pagination:
          $ref: '#/components/schemas/Meta_pagination'
      type: object
    ObjectLink:
      example:
        "0":
          rel: self
          uri: /OBJECTS/1
        self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
      properties:
        "0":
          $ref: '#/components/schemas/ObjectLink_0'
        self:
          example: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          format: uri
          type: string
      type: object
    PageLink:
      example:
        last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
        self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
        first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        self:
          example: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          format: uri
          type: string
        first:
          example: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
          format: uri
          type: string
        last:
          example: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          format: uri
          type: string
      type: object
    PiggyBank:
      example:
        target_amount: "123.45"
        notes: Some notes
        target_date: 2020-09-17T00:00:00.000+0000
        currency_symbol: $
        left_to_save: 700
        created_at: 2018-09-17T12:46:47+01:00
        active: true
        object_group_order: 5
        currency_code: USD
        currency_decimal_places: 2
        current_amount: "123.45"
        account_id: 13
        updated_at: 2018-09-17T12:46:47+01:00
        object_group_id: 5
        account_name: Savings account
        percentage: 12.5
        name: New digital camera
        currency_id: 5
        save_per_month: 12.45
        start_date: 2018-09-17T00:00:00.000+0000
        order: 5
        object_group_title: Example Group
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        name:
          example: New digital camera
          format: string
          type: string
        account_id:
          description: The ID of the asset account this piggy bank is connected to.
          example: 13
          format: int32
          type: integer
        account_name:
          description: The name of the asset account this piggy bank is connected
            to.
          example: Savings account
          format: string
          readOnly: true
          type: string
        currency_id:
          example: 5
          format: int32
          readOnly: true
          type: integer
        currency_code:
          example: USD
          format: string
          readOnly: true
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          description: Number of decimals supported by the currency
          example: 2
          format: int32
          readOnly: true
          type: integer
        target_amount:
          example: "123.45"
          format: amount
          type: string
        percentage:
          example: 12.5
          format: float
          readOnly: true
          type: number
        current_amount:
          example: "123.45"
          format: amount
          type: string
        left_to_save:
          example: 700
          format: double
          readOnly: true
          type: number
        save_per_month:
          example: 12.45
          format: double
          readOnly: true
          type: number
        start_date:
          description: The date you started with this piggy bank.
          example: 2018-09-17
          format: date
          type: string
        target_date:
          description: The date you intend to finish saving money.
          example: 2020-09-17
          format: date
          type: string
        order:
          example: 5
          format: int32
          type: integer
        active:
          example: true
          format: boolean
          readOnly: true
          type: boolean
        notes:
          example: Some notes
          format: string
          type: string
        object_group_id:
          description: The group ID of the group this object is part of. NULL if no
            group.
          example: 5
          format: int32
          type: integer
        object_group_order:
          description: The order of the group. At least 1, for the highest sorting.
          example: 5
          format: int32
          type: integer
        object_group_title:
          description: The name of the group. NULL if no group.
          example: Example Group
          format: string
          type: string
      required:
      - account_id
      - name
      - target_amount
      type: object
    PiggyBankArray:
      example:
        data:
        - attributes:
            target_amount: "123.45"
            notes: Some notes
            target_date: 2020-09-17T00:00:00.000+0000
            currency_symbol: $
            left_to_save: 700
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            object_group_order: 5
            currency_code: USD
            currency_decimal_places: 2
            current_amount: "123.45"
            account_id: 13
            updated_at: 2018-09-17T12:46:47+01:00
            object_group_id: 5
            account_name: Savings account
            percentage: 12.5
            name: New digital camera
            currency_id: 5
            save_per_month: 12.45
            start_date: 2018-09-17T00:00:00.000+0000
            order: 5
            object_group_title: Example Group
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: piggy_banks
        - attributes:
            target_amount: "123.45"
            notes: Some notes
            target_date: 2020-09-17T00:00:00.000+0000
            currency_symbol: $
            left_to_save: 700
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            object_group_order: 5
            currency_code: USD
            currency_decimal_places: 2
            current_amount: "123.45"
            account_id: 13
            updated_at: 2018-09-17T12:46:47+01:00
            object_group_id: 5
            account_name: Savings account
            percentage: 12.5
            name: New digital camera
            currency_id: 5
            save_per_month: 12.45
            start_date: 2018-09-17T00:00:00.000+0000
            order: 5
            object_group_title: Example Group
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: piggy_banks
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/PiggyBankRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    PiggyBankEvent:
      example:
        journal_id: 4291
        transaction_id: 4291
        amount: "123.45"
        updated_at: 2018-09-17T12:46:47+01:00
        currency_symbol: $
        created_at: 2018-09-17T12:46:47+01:00
        currency_id: 5
        currency_code: EUR
        currency_decimal_places: 2
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          type: string
        currency_id:
          example: 5
          format: int32
          type: integer
        currency_code:
          example: EUR
          format: string
          type: string
        currency_symbol:
          example: $
          format: string
          type: string
        currency_decimal_places:
          example: 2
          format: int32
          type: integer
        amount:
          example: "123.45"
          format: amount
          type: string
        journal_id:
          description: The journal associated with the event.
          example: 4291
          format: int32
          type: integer
        transaction_id:
          example: 4291
          format: int32
          type: integer
      type: object
    PiggyBankEventArray:
      example:
        data:
        - attributes:
            journal_id: 4291
            transaction_id: 4291
            amount: "123.45"
            updated_at: 2018-09-17T12:46:47+01:00
            currency_symbol: $
            created_at: 2018-09-17T12:46:47+01:00
            currency_id: 5
            currency_code: EUR
            currency_decimal_places: 2
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: piggy_bank_eventss
        - attributes:
            journal_id: 4291
            transaction_id: 4291
            amount: "123.45"
            updated_at: 2018-09-17T12:46:47+01:00
            currency_symbol: $
            created_at: 2018-09-17T12:46:47+01:00
            currency_id: 5
            currency_code: EUR
            currency_decimal_places: 2
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: piggy_bank_eventss
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/PiggyBankEventRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    PiggyBankEventRead:
      example:
        attributes:
          journal_id: 4291
          transaction_id: 4291
          amount: "123.45"
          updated_at: 2018-09-17T12:46:47+01:00
          currency_symbol: $
          created_at: 2018-09-17T12:46:47+01:00
          currency_id: 5
          currency_code: EUR
          currency_decimal_places: 2
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: piggy_bank_eventss
      properties:
        type:
          description: Immutable value
          example: piggy_bank_eventss
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/PiggyBankEvent'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    PiggyBankRead:
      example:
        attributes:
          target_amount: "123.45"
          notes: Some notes
          target_date: 2020-09-17T00:00:00.000+0000
          currency_symbol: $
          left_to_save: 700
          created_at: 2018-09-17T12:46:47+01:00
          active: true
          object_group_order: 5
          currency_code: USD
          currency_decimal_places: 2
          current_amount: "123.45"
          account_id: 13
          updated_at: 2018-09-17T12:46:47+01:00
          object_group_id: 5
          account_name: Savings account
          percentage: 12.5
          name: New digital camera
          currency_id: 5
          save_per_month: 12.45
          start_date: 2018-09-17T00:00:00.000+0000
          order: 5
          object_group_title: Example Group
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: piggy_banks
      properties:
        type:
          description: Immutable value
          example: piggy_banks
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/PiggyBank'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    PiggyBankSingle:
      example:
        data:
          attributes:
            target_amount: "123.45"
            notes: Some notes
            target_date: 2020-09-17T00:00:00.000+0000
            currency_symbol: $
            left_to_save: 700
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            object_group_order: 5
            currency_code: USD
            currency_decimal_places: 2
            current_amount: "123.45"
            account_id: 13
            updated_at: 2018-09-17T12:46:47+01:00
            object_group_id: 5
            account_name: Savings account
            percentage: 12.5
            name: New digital camera
            currency_id: 5
            save_per_month: 12.45
            start_date: 2018-09-17T00:00:00.000+0000
            order: 5
            object_group_title: Example Group
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: piggy_banks
      properties:
        data:
          $ref: '#/components/schemas/PiggyBankRead'
      required:
      - data
      type: object
    Preference:
      example:
        updated_at: 2018-09-17T12:46:47+01:00
        data: EUR
        name: currencyPreference
        created_at: 2018-09-17T12:46:47+01:00
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        name:
          example: currencyPreference
          format: string
          readOnly: true
          type: string
        data:
          description: This field can also be an array
          example: EUR
          format: string
          type: string
      required:
      - data
      type: object
    PreferenceArray:
      example:
        data:
        - attributes:
            updated_at: 2018-09-17T12:46:47+01:00
            data: EUR
            name: currencyPreference
            created_at: 2018-09-17T12:46:47+01:00
          id: "2"
          type: preferences
        - attributes:
            updated_at: 2018-09-17T12:46:47+01:00
            data: EUR
            name: currencyPreference
            created_at: 2018-09-17T12:46:47+01:00
          id: "2"
          type: preferences
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/PreferenceRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    PreferenceRead:
      example:
        attributes:
          updated_at: 2018-09-17T12:46:47+01:00
          data: EUR
          name: currencyPreference
          created_at: 2018-09-17T12:46:47+01:00
        id: "2"
        type: preferences
      properties:
        type:
          description: Immutable value
          example: preferences
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Preference'
      required:
      - attributes
      - id
      - type
      type: object
    PreferenceSingle:
      example:
        data:
          attributes:
            updated_at: 2018-09-17T12:46:47+01:00
            data: EUR
            name: currencyPreference
            created_at: 2018-09-17T12:46:47+01:00
          id: "2"
          type: preferences
      properties:
        data:
          $ref: '#/components/schemas/PreferenceRead'
      required:
      - data
      type: object
    Recurrence:
      example:
        apply_rules: true
        nr_of_repetitions: 5
        notes: Some notes
        repeat_until: 2018-09-17T00:00:00.000+0000
        created_at: 2018-09-17T12:46:47+01:00
        description: Recurring transaction for the monthly rent
        active: true
        type: withdrawal
        title: Rent
        transactions:
        - category_name: Bills
          destination_iban: NL02ABNA0123456789
          source_iban: NL02ABNA0123456789
          budget_id: 4
          destination_id: 258
          description: Rent for the current month
          destination_name: Buy and Large
          currency_code: EUR
          currency_decimal_places: 2
          destination_type: Asset account
          category_id: 211
          foreign_currency_symbol: $
          piggy_bank_name: piggy_bank_name
          foreign_currency_id: 17
          source_name: Checking account
          amount: "123.45"
          budget_name: Groceries
          foreign_currency_code: GBP
          currency_symbol: €
          source_type: Asset account
          foreign_currency_decimal_places: 2
          piggy_bank_id: 0
          tags:
          - Barbecue preparation
          - Barbecue preparation
          foreign_amount: "123.45"
          source_id: 913
          currency_id: 3
        - category_name: Bills
          destination_iban: NL02ABNA0123456789
          source_iban: NL02ABNA0123456789
          budget_id: 4
          destination_id: 258
          description: Rent for the current month
          destination_name: Buy and Large
          currency_code: EUR
          currency_decimal_places: 2
          destination_type: Asset account
          category_id: 211
          foreign_currency_symbol: $
          piggy_bank_name: piggy_bank_name
          foreign_currency_id: 17
          source_name: Checking account
          amount: "123.45"
          budget_name: Groceries
          foreign_currency_code: GBP
          currency_symbol: €
          source_type: Asset account
          foreign_currency_decimal_places: 2
          piggy_bank_id: 0
          tags:
          - Barbecue preparation
          - Barbecue preparation
          foreign_amount: "123.45"
          source_id: 913
          currency_id: 3
        repetitions:
        - occurrences:
          - 2000-01-23
          - 2000-01-23
          updated_at: 2018-09-17T12:46:47+01:00
          weekend: 1
          created_at: 2018-09-17T12:46:47+01:00
          description: Every week on Friday
          skip: 0
          id: "2"
          type: weekly
          moment: "3"
        - occurrences:
          - 2000-01-23
          - 2000-01-23
          updated_at: 2018-09-17T12:46:47+01:00
          weekend: 1
          created_at: 2018-09-17T12:46:47+01:00
          description: Every week on Friday
          skip: 0
          id: "2"
          type: weekly
          moment: "3"
        updated_at: 2018-09-17T12:46:47+01:00
        latest_date: 2018-09-17T00:00:00.000+0000
        first_date: 2017-09-17T00:00:00.000+0000
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        type:
          enum:
          - withdrawal
          - transfer
          - deposit
          - opening-balance
          - reconciliation
          example: withdrawal
          format: string
          type: string
        title:
          example: Rent
          format: string
          type: string
        description:
          description: Not to be confused with the description of the actual transaction(s)
            being created.
          example: Recurring transaction for the monthly rent
          format: string
          type: string
        first_date:
          description: First time the recurring transaction will fire. Must be after
            today.
          example: 2017-09-17
          format: date
          type: string
        latest_date:
          description: First time the recurring transaction will fire. Must be after
            today.
          example: 2018-09-17
          format: date
          type: string
        repeat_until:
          description: Date until the recurring transaction can fire. Use either this
            field or repetitions.
          example: 2018-09-17
          format: date
          type: string
        nr_of_repetitions:
          description: Max number of created transactions. Use either this field or
            repeat_until.
          example: 5
          format: int32
          type: integer
        apply_rules:
          description: Whether or not to fire the rules after the creation of a transaction.
          example: true
          format: boolean
          type: boolean
        active:
          description: If the recurrence is even active.
          example: true
          format: boolean
          type: boolean
        notes:
          example: Some notes
          format: string
          type: string
        repetitions:
          items:
            $ref: '#/components/schemas/RecurrenceRepetition'
          type: array
        transactions:
          items:
            $ref: '#/components/schemas/RecurrenceTransaction'
          type: array
      required:
      - first_date
      - title
      - type
      type: object
    RecurrenceArray:
      example:
        data:
        - attributes:
            apply_rules: true
            nr_of_repetitions: 5
            notes: Some notes
            repeat_until: 2018-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            description: Recurring transaction for the monthly rent
            active: true
            type: withdrawal
            title: Rent
            transactions:
            - category_name: Bills
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              destination_id: 258
              description: Rent for the current month
              destination_name: Buy and Large
              currency_code: EUR
              currency_decimal_places: 2
              destination_type: Asset account
              category_id: 211
              foreign_currency_symbol: $
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              foreign_currency_code: GBP
              currency_symbol: €
              source_type: Asset account
              foreign_currency_decimal_places: 2
              piggy_bank_id: 0
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              source_id: 913
              currency_id: 3
            - category_name: Bills
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              destination_id: 258
              description: Rent for the current month
              destination_name: Buy and Large
              currency_code: EUR
              currency_decimal_places: 2
              destination_type: Asset account
              category_id: 211
              foreign_currency_symbol: $
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              foreign_currency_code: GBP
              currency_symbol: €
              source_type: Asset account
              foreign_currency_decimal_places: 2
              piggy_bank_id: 0
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              source_id: 913
              currency_id: 3
            repetitions:
            - occurrences:
              - 2000-01-23
              - 2000-01-23
              updated_at: 2018-09-17T12:46:47+01:00
              weekend: 1
              created_at: 2018-09-17T12:46:47+01:00
              description: Every week on Friday
              skip: 0
              id: "2"
              type: weekly
              moment: "3"
            - occurrences:
              - 2000-01-23
              - 2000-01-23
              updated_at: 2018-09-17T12:46:47+01:00
              weekend: 1
              created_at: 2018-09-17T12:46:47+01:00
              description: Every week on Friday
              skip: 0
              id: "2"
              type: weekly
              moment: "3"
            updated_at: 2018-09-17T12:46:47+01:00
            latest_date: 2018-09-17T00:00:00.000+0000
            first_date: 2017-09-17T00:00:00.000+0000
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: recurrences
        - attributes:
            apply_rules: true
            nr_of_repetitions: 5
            notes: Some notes
            repeat_until: 2018-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            description: Recurring transaction for the monthly rent
            active: true
            type: withdrawal
            title: Rent
            transactions:
            - category_name: Bills
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              destination_id: 258
              description: Rent for the current month
              destination_name: Buy and Large
              currency_code: EUR
              currency_decimal_places: 2
              destination_type: Asset account
              category_id: 211
              foreign_currency_symbol: $
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              foreign_currency_code: GBP
              currency_symbol: €
              source_type: Asset account
              foreign_currency_decimal_places: 2
              piggy_bank_id: 0
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              source_id: 913
              currency_id: 3
            - category_name: Bills
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              destination_id: 258
              description: Rent for the current month
              destination_name: Buy and Large
              currency_code: EUR
              currency_decimal_places: 2
              destination_type: Asset account
              category_id: 211
              foreign_currency_symbol: $
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              foreign_currency_code: GBP
              currency_symbol: €
              source_type: Asset account
              foreign_currency_decimal_places: 2
              piggy_bank_id: 0
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              source_id: 913
              currency_id: 3
            repetitions:
            - occurrences:
              - 2000-01-23
              - 2000-01-23
              updated_at: 2018-09-17T12:46:47+01:00
              weekend: 1
              created_at: 2018-09-17T12:46:47+01:00
              description: Every week on Friday
              skip: 0
              id: "2"
              type: weekly
              moment: "3"
            - occurrences:
              - 2000-01-23
              - 2000-01-23
              updated_at: 2018-09-17T12:46:47+01:00
              weekend: 1
              created_at: 2018-09-17T12:46:47+01:00
              description: Every week on Friday
              skip: 0
              id: "2"
              type: weekly
              moment: "3"
            updated_at: 2018-09-17T12:46:47+01:00
            latest_date: 2018-09-17T00:00:00.000+0000
            first_date: 2017-09-17T00:00:00.000+0000
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: recurrences
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/RecurrenceRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    RecurrenceRead:
      example:
        attributes:
          apply_rules: true
          nr_of_repetitions: 5
          notes: Some notes
          repeat_until: 2018-09-17T00:00:00.000+0000
          created_at: 2018-09-17T12:46:47+01:00
          description: Recurring transaction for the monthly rent
          active: true
          type: withdrawal
          title: Rent
          transactions:
          - category_name: Bills
            destination_iban: NL02ABNA0123456789
            source_iban: NL02ABNA0123456789
            budget_id: 4
            destination_id: 258
            description: Rent for the current month
            destination_name: Buy and Large
            currency_code: EUR
            currency_decimal_places: 2
            destination_type: Asset account
            category_id: 211
            foreign_currency_symbol: $
            piggy_bank_name: piggy_bank_name
            foreign_currency_id: 17
            source_name: Checking account
            amount: "123.45"
            budget_name: Groceries
            foreign_currency_code: GBP
            currency_symbol: €
            source_type: Asset account
            foreign_currency_decimal_places: 2
            piggy_bank_id: 0
            tags:
            - Barbecue preparation
            - Barbecue preparation
            foreign_amount: "123.45"
            source_id: 913
            currency_id: 3
          - category_name: Bills
            destination_iban: NL02ABNA0123456789
            source_iban: NL02ABNA0123456789
            budget_id: 4
            destination_id: 258
            description: Rent for the current month
            destination_name: Buy and Large
            currency_code: EUR
            currency_decimal_places: 2
            destination_type: Asset account
            category_id: 211
            foreign_currency_symbol: $
            piggy_bank_name: piggy_bank_name
            foreign_currency_id: 17
            source_name: Checking account
            amount: "123.45"
            budget_name: Groceries
            foreign_currency_code: GBP
            currency_symbol: €
            source_type: Asset account
            foreign_currency_decimal_places: 2
            piggy_bank_id: 0
            tags:
            - Barbecue preparation
            - Barbecue preparation
            foreign_amount: "123.45"
            source_id: 913
            currency_id: 3
          repetitions:
          - occurrences:
            - 2000-01-23
            - 2000-01-23
            updated_at: 2018-09-17T12:46:47+01:00
            weekend: 1
            created_at: 2018-09-17T12:46:47+01:00
            description: Every week on Friday
            skip: 0
            id: "2"
            type: weekly
            moment: "3"
          - occurrences:
            - 2000-01-23
            - 2000-01-23
            updated_at: 2018-09-17T12:46:47+01:00
            weekend: 1
            created_at: 2018-09-17T12:46:47+01:00
            description: Every week on Friday
            skip: 0
            id: "2"
            type: weekly
            moment: "3"
          updated_at: 2018-09-17T12:46:47+01:00
          latest_date: 2018-09-17T00:00:00.000+0000
          first_date: 2017-09-17T00:00:00.000+0000
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: recurrences
      properties:
        type:
          description: Immutable value
          example: recurrences
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Recurrence'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    RecurrenceRepetition:
      example:
        occurrences:
        - 2000-01-23
        - 2000-01-23
        updated_at: 2018-09-17T12:46:47+01:00
        weekend: 1
        created_at: 2018-09-17T12:46:47+01:00
        description: Every week on Friday
        skip: 0
        id: "2"
        type: weekly
        moment: "3"
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        type:
          description: 'The type of the repetition. ndom means: the n-th weekday of
            the month, where you can also specify which day of the week.'
          enum:
          - daily
          - weekly
          - ndom
          - monthly
          - yearly
          example: weekly
          format: string
          type: string
        moment:
          description: |
            Information that defined the type of repetition.
            - For 'daily', this is empty.
            - For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).
            - For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd Wednesday of the month
            - For 'monthly' it is the day of the month (1 - 31)
            - For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.
          example: "3"
          format: string
          type: string
        skip:
          description: How many occurrences to skip. 0 means skip nothing. 1 means
            every other.
          example: 0
          format: int32
          type: integer
        weekend:
          description: |
            How to respond when the recurring transaction falls in the weekend. Possible values:
            1. Do nothing, just create it
            2. Create no transaction.
            3. Skip to the previous Friday.
            4. Skip to the next Monday.
          example: 1
          format: int32
          type: integer
        description:
          description: Auto-generated repetition description.
          example: Every week on Friday
          format: string
          readOnly: true
          type: string
        occurrences:
          description: Array of future dates when the repetition will apply to. Auto
            generated.
          items:
            format: date
            type: string
          readOnly: true
          type: array
      required:
      - moment
      - type
      type: object
    RecurrenceSingle:
      example:
        data:
          attributes:
            apply_rules: true
            nr_of_repetitions: 5
            notes: Some notes
            repeat_until: 2018-09-17T00:00:00.000+0000
            created_at: 2018-09-17T12:46:47+01:00
            description: Recurring transaction for the monthly rent
            active: true
            type: withdrawal
            title: Rent
            transactions:
            - category_name: Bills
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              destination_id: 258
              description: Rent for the current month
              destination_name: Buy and Large
              currency_code: EUR
              currency_decimal_places: 2
              destination_type: Asset account
              category_id: 211
              foreign_currency_symbol: $
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              foreign_currency_code: GBP
              currency_symbol: €
              source_type: Asset account
              foreign_currency_decimal_places: 2
              piggy_bank_id: 0
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              source_id: 913
              currency_id: 3
            - category_name: Bills
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              destination_id: 258
              description: Rent for the current month
              destination_name: Buy and Large
              currency_code: EUR
              currency_decimal_places: 2
              destination_type: Asset account
              category_id: 211
              foreign_currency_symbol: $
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              foreign_currency_code: GBP
              currency_symbol: €
              source_type: Asset account
              foreign_currency_decimal_places: 2
              piggy_bank_id: 0
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              source_id: 913
              currency_id: 3
            repetitions:
            - occurrences:
              - 2000-01-23
              - 2000-01-23
              updated_at: 2018-09-17T12:46:47+01:00
              weekend: 1
              created_at: 2018-09-17T12:46:47+01:00
              description: Every week on Friday
              skip: 0
              id: "2"
              type: weekly
              moment: "3"
            - occurrences:
              - 2000-01-23
              - 2000-01-23
              updated_at: 2018-09-17T12:46:47+01:00
              weekend: 1
              created_at: 2018-09-17T12:46:47+01:00
              description: Every week on Friday
              skip: 0
              id: "2"
              type: weekly
              moment: "3"
            updated_at: 2018-09-17T12:46:47+01:00
            latest_date: 2018-09-17T00:00:00.000+0000
            first_date: 2017-09-17T00:00:00.000+0000
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: recurrences
      properties:
        data:
          $ref: '#/components/schemas/RecurrenceRead'
      required:
      - data
      type: object
    RecurrenceTransaction:
      example:
        category_name: Bills
        destination_iban: NL02ABNA0123456789
        source_iban: NL02ABNA0123456789
        budget_id: 4
        destination_id: 258
        description: Rent for the current month
        destination_name: Buy and Large
        currency_code: EUR
        currency_decimal_places: 2
        destination_type: Asset account
        category_id: 211
        foreign_currency_symbol: $
        piggy_bank_name: piggy_bank_name
        foreign_currency_id: 17
        source_name: Checking account
        amount: "123.45"
        budget_name: Groceries
        foreign_currency_code: GBP
        currency_symbol: €
        source_type: Asset account
        foreign_currency_decimal_places: 2
        piggy_bank_id: 0
        tags:
        - Barbecue preparation
        - Barbecue preparation
        foreign_amount: "123.45"
        source_id: 913
        currency_id: 3
      properties:
        description:
          example: Rent for the current month
          format: string
          type: string
        amount:
          description: Amount of the transaction.
          example: "123.45"
          format: amount
          type: string
        foreign_amount:
          description: Foreign amount of the transaction.
          example: "123.45"
          format: amount
          nullable: true
          type: string
        currency_id:
          description: Submit either a currency_id or a currency_code.
          example: 3
          format: int32
          type: integer
        currency_code:
          description: Submit either a currency_id or a currency_code.
          example: EUR
          format: string
          type: string
        currency_symbol:
          example: €
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          description: Number of decimals in the currency
          example: 2
          format: int32
          readOnly: true
          type: integer
        foreign_currency_id:
          description: Submit either a foreign_currency_id or a foreign_currency_code,
            or neither.
          example: 17
          format: int32
          nullable: true
          type: integer
        foreign_currency_code:
          description: Submit either a foreign_currency_id or a foreign_currency_code,
            or neither.
          example: GBP
          format: string
          nullable: true
          type: string
        foreign_currency_symbol:
          example: $
          format: string
          nullable: true
          readOnly: true
          type: string
        foreign_currency_decimal_places:
          description: Number of decimals in the currency
          example: 2
          format: int32
          nullable: true
          readOnly: true
          type: integer
        budget_id:
          description: The budget ID for this transaction.
          example: 4
          format: int32
          type: integer
        budget_name:
          description: The name of the budget to be used. If the budget name is unknown,
            the ID will be used or the value will be ignored.
          example: Groceries
          format: string
          nullable: true
          readOnly: true
          type: string
        category_id:
          description: Category ID for this transaction.
          example: 211
          format: int32
          type: integer
        category_name:
          description: Category name for this transaction.
          example: Bills
          format: string
          type: string
        source_id:
          description: ID of the source account. Submit either this or source_name.
          example: 913
          format: int32
          type: integer
        source_name:
          description: Name of the source account. Submit either this or source_id.
          example: Checking account
          format: string
          type: string
        source_iban:
          example: NL02ABNA0123456789
          format: string
          nullable: true
          readOnly: true
          type: string
        source_type:
          $ref: '#/components/schemas/AccountTypeProperty'
        destination_id:
          description: ID of the destination account. Submit either this or destination_name.
          example: 258
          format: int32
          type: integer
        destination_name:
          description: Name of the destination account. Submit either this or destination_id.
          example: Buy and Large
          format: string
          type: string
        destination_iban:
          example: NL02ABNA0123456789
          format: string
          nullable: true
          readOnly: true
          type: string
        destination_type:
          $ref: '#/components/schemas/AccountTypeProperty'
        tags:
          description: Array of tags.
          items:
            description: Tag.
            example: Barbecue preparation
            format: string
            type: string
          nullable: true
          type: array
        piggy_bank_id:
          description: Optional. Use either this or the piggy_bank_name
          format: int32
          type: integer
        piggy_bank_name:
          description: Optional. Use either this or the piggy_bank_id
          format: string
          type: string
      required:
      - amount
      - description
      type: object
    Rule:
      example:
        created_at: 2018-09-17T12:46:47+01:00
        description: First rule description
        active: true
        trigger: store-journal
        title: First rule title.
        rule_group_id: 81
        triggers:
        - stop_processing: false
          updated_at: 2018-09-17T12:46:47+01:00
          created_at: 2018-09-17T12:46:47+01:00
          active: true
          id: "2"
          type: user_action
          value: tag1
          order: 5
        - stop_processing: false
          updated_at: 2018-09-17T12:46:47+01:00
          created_at: 2018-09-17T12:46:47+01:00
          active: true
          id: "2"
          type: user_action
          value: tag1
          order: 5
        stop_processing: false
        updated_at: 2018-09-17T12:46:47+01:00
        rule_group_title: New rule group
        strict: true
        actions:
        - stop_processing: false
          updated_at: 2018-09-17T12:46:47+01:00
          created_at: 2018-09-17T12:46:47+01:00
          active: true
          id: "2"
          type: set_category
          value: Daily groceries
          order: 5
        - stop_processing: false
          updated_at: 2018-09-17T12:46:47+01:00
          created_at: 2018-09-17T12:46:47+01:00
          active: true
          id: "2"
          type: set_category
          value: Daily groceries
          order: 5
        order: 5
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        title:
          example: First rule title.
          format: string
          type: string
        description:
          example: First rule description
          format: string
          type: string
        rule_group_id:
          description: ID of the rule group under which the rule must be stored. Either
            this field or rule_group_title is mandatory.
          example: 81
          format: int32
          type: integer
        rule_group_title:
          description: Title of the rule group under which the rule must be stored.
            Either this field or rule_group_id is mandatory.
          example: New rule group
          format: string
          type: string
        order:
          example: 5
          format: int32
          readOnly: true
          type: integer
        trigger:
          description: Which action is necessary for the rule to fire? Use either
            store-journal or update-journal.
          enum:
          - store-journal
          - update-journal
          example: store-journal
          format: string
          type: string
        active:
          description: Whether or not the rule is even active. Default is true.
          example: true
          format: boolean
          type: boolean
        strict:
          description: If the rule is set to be strict, ALL triggers must hit in order
            for the rule to fire. Otherwise, just one is enough. Default value is
            true.
          example: true
          format: boolean
          type: boolean
        stop_processing:
          description: If this value is true and the rule is triggered, other rules  after
            this one in the group will be skipped. Default value is false.
          example: false
          format: boolean
          type: boolean
        triggers:
          items:
            $ref: '#/components/schemas/RuleTrigger'
          type: array
        actions:
          items:
            $ref: '#/components/schemas/RuleAction'
          type: array
      required:
      - actions
      - rule_group_id
      - title
      - trigger
      - triggers
      type: object
    RuleAction:
      example:
        stop_processing: false
        updated_at: 2018-09-17T12:46:47+01:00
        created_at: 2018-09-17T12:46:47+01:00
        active: true
        id: "2"
        type: set_category
        value: Daily groceries
        order: 5
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        type:
          description: The type of thing this action will do. A limited set is possible.
          enum:
          - user_action
          - set_category
          - clear_category
          - set_budget
          - clear_budget
          - add_tag
          - remove_tag
          - remove_all_tags
          - set_description
          - append_description
          - prepend_description
          - set_source_account
          - set_destination_account
          - set_notes
          - append_notes
          - prepend_notes
          - clear_notes
          - link_to_bill
          - convert_withdrawal
          - convert_deposit
          - convert_transfer
          example: set_category
          format: string
          type: string
        value:
          description: The accompanying value the action will set, change or update.
            Can be empty, but for some types this value is mandatory.
          example: Daily groceries
          format: string
          nullable: true
          type: string
        order:
          description: Order of the action
          example: 5
          format: int32
          type: integer
        active:
          description: If the action is active.
          example: true
          format: boolean
          type: boolean
        stop_processing:
          description: When true, other actions will not be fired after this action
            has fired.
          example: false
          format: boolean
          type: boolean
      required:
      - type
      - value
      type: object
    RuleArray:
      example:
        data:
        - attributes:
            created_at: 2018-09-17T12:46:47+01:00
            description: First rule description
            active: true
            trigger: store-journal
            title: First rule title.
            rule_group_id: 81
            triggers:
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: user_action
              value: tag1
              order: 5
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: user_action
              value: tag1
              order: 5
            stop_processing: false
            updated_at: 2018-09-17T12:46:47+01:00
            rule_group_title: New rule group
            strict: true
            actions:
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: set_category
              value: Daily groceries
              order: 5
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: set_category
              value: Daily groceries
              order: 5
            order: 5
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: rules
        - attributes:
            created_at: 2018-09-17T12:46:47+01:00
            description: First rule description
            active: true
            trigger: store-journal
            title: First rule title.
            rule_group_id: 81
            triggers:
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: user_action
              value: tag1
              order: 5
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: user_action
              value: tag1
              order: 5
            stop_processing: false
            updated_at: 2018-09-17T12:46:47+01:00
            rule_group_title: New rule group
            strict: true
            actions:
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: set_category
              value: Daily groceries
              order: 5
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: set_category
              value: Daily groceries
              order: 5
            order: 5
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: rules
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/RuleRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    RuleGroup:
      example:
        updated_at: 2018-09-17T12:46:47+01:00
        created_at: 2018-09-17T12:46:47+01:00
        description: Description of this rule group
        active: true
        title: Default rule group
        order: 4
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        title:
          example: Default rule group
          format: string
          type: string
        description:
          example: Description of this rule group
          format: string
          type: string
        order:
          example: 4
          format: int32
          readOnly: true
          type: integer
        active:
          example: true
          format: boolean
          type: boolean
      required:
      - title
      type: object
    RuleGroupArray:
      example:
        data:
        - attributes:
            updated_at: 2018-09-17T12:46:47+01:00
            created_at: 2018-09-17T12:46:47+01:00
            description: Description of this rule group
            active: true
            title: Default rule group
            order: 4
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: rules_group
        - attributes:
            updated_at: 2018-09-17T12:46:47+01:00
            created_at: 2018-09-17T12:46:47+01:00
            description: Description of this rule group
            active: true
            title: Default rule group
            order: 4
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: rules_group
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/RuleGroupRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    RuleGroupRead:
      example:
        attributes:
          updated_at: 2018-09-17T12:46:47+01:00
          created_at: 2018-09-17T12:46:47+01:00
          description: Description of this rule group
          active: true
          title: Default rule group
          order: 4
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: rules_group
      properties:
        type:
          description: Immutable value
          example: rules_group
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/RuleGroup'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    RuleGroupSingle:
      example:
        data:
          attributes:
            updated_at: 2018-09-17T12:46:47+01:00
            created_at: 2018-09-17T12:46:47+01:00
            description: Description of this rule group
            active: true
            title: Default rule group
            order: 4
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: rules_group
      properties:
        data:
          $ref: '#/components/schemas/RuleGroupRead'
      required:
      - data
      type: object
    RuleRead:
      example:
        attributes:
          created_at: 2018-09-17T12:46:47+01:00
          description: First rule description
          active: true
          trigger: store-journal
          title: First rule title.
          rule_group_id: 81
          triggers:
          - stop_processing: false
            updated_at: 2018-09-17T12:46:47+01:00
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            id: "2"
            type: user_action
            value: tag1
            order: 5
          - stop_processing: false
            updated_at: 2018-09-17T12:46:47+01:00
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            id: "2"
            type: user_action
            value: tag1
            order: 5
          stop_processing: false
          updated_at: 2018-09-17T12:46:47+01:00
          rule_group_title: New rule group
          strict: true
          actions:
          - stop_processing: false
            updated_at: 2018-09-17T12:46:47+01:00
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            id: "2"
            type: set_category
            value: Daily groceries
            order: 5
          - stop_processing: false
            updated_at: 2018-09-17T12:46:47+01:00
            created_at: 2018-09-17T12:46:47+01:00
            active: true
            id: "2"
            type: set_category
            value: Daily groceries
            order: 5
          order: 5
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: rules
      properties:
        type:
          description: Immutable value
          example: rules
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Rule'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    RuleSingle:
      example:
        data:
          attributes:
            created_at: 2018-09-17T12:46:47+01:00
            description: First rule description
            active: true
            trigger: store-journal
            title: First rule title.
            rule_group_id: 81
            triggers:
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: user_action
              value: tag1
              order: 5
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: user_action
              value: tag1
              order: 5
            stop_processing: false
            updated_at: 2018-09-17T12:46:47+01:00
            rule_group_title: New rule group
            strict: true
            actions:
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: set_category
              value: Daily groceries
              order: 5
            - stop_processing: false
              updated_at: 2018-09-17T12:46:47+01:00
              created_at: 2018-09-17T12:46:47+01:00
              active: true
              id: "2"
              type: set_category
              value: Daily groceries
              order: 5
            order: 5
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: rules
      properties:
        data:
          $ref: '#/components/schemas/RuleRead'
      required:
      - data
      type: object
    RuleTrigger:
      example:
        stop_processing: false
        updated_at: 2018-09-17T12:46:47+01:00
        created_at: 2018-09-17T12:46:47+01:00
        active: true
        id: "2"
        type: user_action
        value: tag1
        order: 5
      properties:
        id:
          example: "2"
          format: string
          readOnly: true
          type: string
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        type:
          description: The type of thing this trigger responds to. A limited set is
            possible
          enum:
          - from_account_starts
          - from_account_ends
          - from_account_is
          - from_account_contains
          - to_account_starts
          - to_account_ends
          - to_account_is
          - to_account_contains
          - amount_less
          - amount_exactly
          - amount_more
          - description_starts
          - description_ends
          - description_contains
          - description_is
          - transaction_type
          - category_is
          - budget_is
          - tag_is
          - currency_is
          - has_attachments
          - has_no_category
          - has_any_category
          - has_no_budget
          - has_any_budget
          - has_no_tag
          - has_any_tag
          - notes_contain
          - notes_start
          - notes_end
          - notes_are
          - no_notes
          - any_notes
          example: user_action
          format: string
          type: string
        value:
          description: The accompanying value the trigger responds to. This value
            is often mandatory, but this depends on the trigger.
          example: tag1
          format: string
          type: string
        order:
          description: Order of the trigger
          example: 5
          format: int32
          readOnly: true
          type: integer
        active:
          description: If the trigger is active.
          example: true
          format: boolean
          type: boolean
        stop_processing:
          description: When true, other triggers will not be checked if this trigger
            was triggered.
          example: false
          format: boolean
          type: boolean
      required:
      - type
      - value
      type: object
    SystemInfo:
      example:
        data:
          os: Linux vagrant-ubuntu-trusty-64
          driver: mysql
          php_version: "7.2"
          api_version: 0.10.0
          version: 4.8.0
      properties:
        data:
          $ref: '#/components/schemas/SystemInfo_data'
      required:
      - data
      type: object
    TagArray:
      example:
        data:
        - attributes:
            date: 2018-09-17T00:00:00.000+0000
            updated_at: 2018-09-17T12:46:47+01:00
            latitude: 51.983333
            created_at: 2018-09-17T12:46:47+01:00
            description: Tag for expensive stuff
            tag: expensive
            zoom_level: 6
            longitude: 5.916667
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: tags
        - attributes:
            date: 2018-09-17T00:00:00.000+0000
            updated_at: 2018-09-17T12:46:47+01:00
            latitude: 51.983333
            created_at: 2018-09-17T12:46:47+01:00
            description: Tag for expensive stuff
            tag: expensive
            zoom_level: 6
            longitude: 5.916667
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: tags
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/TagRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    TagCloud:
      example:
        tags:
        - size: 24.56
          tag: expensive
          id: "2"
          relative: 0.345
        - size: 24.56
          tag: expensive
          id: "2"
          relative: 0.345
      properties:
        tags:
          items:
            $ref: '#/components/schemas/TagCloudTag'
          type: array
      type: object
    TagCloudTag:
      example:
        size: 24.56
        tag: expensive
        id: "2"
        relative: 0.345
      properties:
        tag:
          description: The tag
          example: expensive
          format: string
          type: string
        id:
          description: ID of the tag
          example: "2"
          format: string
          type: string
        size:
          description: The total amount of money related to this tag. There is no
            currency information available, and this is a basic sum of all amounts
            added together.
          example: 24.56
          format: double
          type: number
        relative:
          description: A number between 0 and 1. 1 is given to the largest tag in
            the tag cloud, and 0 to the smallest. The rest are given a number between
            0 and 1, related to their size in comparison to the largest tag.
          example: 0.345
          format: double
          type: number
      title: A single tag cloud entry
      type: object
    TagModel:
      example:
        date: 2018-09-17T00:00:00.000+0000
        updated_at: 2018-09-17T12:46:47+01:00
        latitude: 51.983333
        created_at: 2018-09-17T12:46:47+01:00
        description: Tag for expensive stuff
        tag: expensive
        zoom_level: 6
        longitude: 5.916667
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        tag:
          description: The tag
          example: expensive
          format: string
          type: string
        date:
          description: The date to which the tag is applicable.
          example: 2018-09-17
          format: date
          nullable: true
          type: string
        description:
          example: Tag for expensive stuff
          format: string
          type: string
        latitude:
          description: Latitude of the tag's location, if applicable. Can be used
            to draw a map.
          example: 51.983333
          format: double
          nullable: true
          type: number
        longitude:
          description: Latitude of the tag's location, if applicable. Can be used
            to draw a map.
          example: 5.916667
          format: double
          nullable: true
          type: number
        zoom_level:
          description: Zoom level for the map, if drawn. This to set the box right.
            Unfortunately this is a proprietary value because each map provider has
            different zoom levels.
          example: 6
          format: int32
          nullable: true
          type: integer
      required:
      - tag
      title: A single tag
      type: object
    TagRead:
      example:
        attributes:
          date: 2018-09-17T00:00:00.000+0000
          updated_at: 2018-09-17T12:46:47+01:00
          latitude: 51.983333
          created_at: 2018-09-17T12:46:47+01:00
          description: Tag for expensive stuff
          tag: expensive
          zoom_level: 6
          longitude: 5.916667
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: tags
      properties:
        type:
          description: Immutable value
          example: tags
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/TagModel'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    TagSingle:
      example:
        data:
          attributes:
            date: 2018-09-17T00:00:00.000+0000
            updated_at: 2018-09-17T12:46:47+01:00
            latitude: 51.983333
            created_at: 2018-09-17T12:46:47+01:00
            description: Tag for expensive stuff
            tag: expensive
            zoom_level: 6
            longitude: 5.916667
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: tags
      properties:
        data:
          $ref: '#/components/schemas/TagRead'
      required:
      - data
      type: object
    Transaction:
      example:
        group_title: Split transaction title.
        apply_rules: false
        updated_at: 2018-09-17T12:46:47+01:00
        error_if_duplicate_hash: false
        created_at: 2018-09-17T12:46:47+01:00
        transactions:
        - date: 2000-01-23
          category_name: Groceries
          notes: Some example notes
          sepa_batch_id: sepa_batch_id
          destination_id: 2
          type: withdrawal
          destination_type: Asset account
          transaction_journal_id: 10421
          payment_date: 2000-01-23
          order: 0
          bill_id: 111
          foreign_currency_code: USD
          reconciled: false
          sepa_country: sepa_country
          source_type: Asset account
          foreign_currency_decimal_places: 2
          bill_name: Monthly rent
          piggy_bank_id: 0
          original_source: original_source
          sepa_ct_id: sepa_ct_id
          tags:
          - Barbecue preparation
          - Barbecue preparation
          foreign_amount: "123.45"
          process_date: 2000-01-23
          sepa_ep: sepa_ep
          internal_reference: internal_reference
          sepa_cc: sepa_cc
          destination_iban: NL02ABNA0123456789
          source_iban: NL02ABNA0123456789
          budget_id: 4
          description: Vegetables
          destination_name: Buy and Large
          external_id: external_id
          currency_code: EUR
          import_hash_v2: import_hash_v2
          currency_decimal_places: 2
          invoice_date: 2000-01-23
          category_id: 43
          foreign_currency_symbol: $
          recurrence_id: 6
          piggy_bank_name: piggy_bank_name
          foreign_currency_id: 17
          source_name: Checking account
          amount: "123.45"
          budget_name: Groceries
          currency_name: Euro
          currency_symbol: $
          interest_date: 2000-01-23
          sepa_db: sepa_db
          due_date: 2000-01-23
          recurrence_total: 0
          book_date: 2000-01-23
          recurrence_count: 12
          bunq_payment_id: bunq_payment_id
          sepa_ct_op: sepa_ct_op
          source_id: 2
          user: 3
          currency_id: 12
          sepa_ci: sepa_ci
        - date: 2000-01-23
          category_name: Groceries
          notes: Some example notes
          sepa_batch_id: sepa_batch_id
          destination_id: 2
          type: withdrawal
          destination_type: Asset account
          transaction_journal_id: 10421
          payment_date: 2000-01-23
          order: 0
          bill_id: 111
          foreign_currency_code: USD
          reconciled: false
          sepa_country: sepa_country
          source_type: Asset account
          foreign_currency_decimal_places: 2
          bill_name: Monthly rent
          piggy_bank_id: 0
          original_source: original_source
          sepa_ct_id: sepa_ct_id
          tags:
          - Barbecue preparation
          - Barbecue preparation
          foreign_amount: "123.45"
          process_date: 2000-01-23
          sepa_ep: sepa_ep
          internal_reference: internal_reference
          sepa_cc: sepa_cc
          destination_iban: NL02ABNA0123456789
          source_iban: NL02ABNA0123456789
          budget_id: 4
          description: Vegetables
          destination_name: Buy and Large
          external_id: external_id
          currency_code: EUR
          import_hash_v2: import_hash_v2
          currency_decimal_places: 2
          invoice_date: 2000-01-23
          category_id: 43
          foreign_currency_symbol: $
          recurrence_id: 6
          piggy_bank_name: piggy_bank_name
          foreign_currency_id: 17
          source_name: Checking account
          amount: "123.45"
          budget_name: Groceries
          currency_name: Euro
          currency_symbol: $
          interest_date: 2000-01-23
          sepa_db: sepa_db
          due_date: 2000-01-23
          recurrence_total: 0
          book_date: 2000-01-23
          recurrence_count: 12
          bunq_payment_id: bunq_payment_id
          sepa_ct_op: sepa_ct_op
          source_id: 2
          user: 3
          currency_id: 12
          sepa_ci: sepa_ci
        user: 3
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        user:
          description: User ID
          example: 3
          format: int32
          readOnly: true
          type: integer
        error_if_duplicate_hash:
          description: Break if the submitted transaction exists already.
          example: false
          format: boolean
          readOnly: false
          type: boolean
        apply_rules:
          description: Whether or not to apply rules when submitting transaction.
          example: false
          format: boolean
          readOnly: false
          type: boolean
        group_title:
          description: Title of the transaction if it has been split in more than
            one piece. Empty otherwise.
          example: Split transaction title.
          format: string
          readOnly: false
          type: string
        transactions:
          items:
            $ref: '#/components/schemas/TransactionSplit'
          type: array
      required:
      - transactions
      type: object
    TransactionArray:
      example:
        data:
        - attributes:
            group_title: Split transaction title.
            apply_rules: false
            updated_at: 2018-09-17T12:46:47+01:00
            error_if_duplicate_hash: false
            created_at: 2018-09-17T12:46:47+01:00
            transactions:
            - date: 2000-01-23
              category_name: Groceries
              notes: Some example notes
              sepa_batch_id: sepa_batch_id
              destination_id: 2
              type: withdrawal
              destination_type: Asset account
              transaction_journal_id: 10421
              payment_date: 2000-01-23
              order: 0
              bill_id: 111
              foreign_currency_code: USD
              reconciled: false
              sepa_country: sepa_country
              source_type: Asset account
              foreign_currency_decimal_places: 2
              bill_name: Monthly rent
              piggy_bank_id: 0
              original_source: original_source
              sepa_ct_id: sepa_ct_id
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              process_date: 2000-01-23
              sepa_ep: sepa_ep
              internal_reference: internal_reference
              sepa_cc: sepa_cc
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              description: Vegetables
              destination_name: Buy and Large
              external_id: external_id
              currency_code: EUR
              import_hash_v2: import_hash_v2
              currency_decimal_places: 2
              invoice_date: 2000-01-23
              category_id: 43
              foreign_currency_symbol: $
              recurrence_id: 6
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              currency_name: Euro
              currency_symbol: $
              interest_date: 2000-01-23
              sepa_db: sepa_db
              due_date: 2000-01-23
              recurrence_total: 0
              book_date: 2000-01-23
              recurrence_count: 12
              bunq_payment_id: bunq_payment_id
              sepa_ct_op: sepa_ct_op
              source_id: 2
              user: 3
              currency_id: 12
              sepa_ci: sepa_ci
            - date: 2000-01-23
              category_name: Groceries
              notes: Some example notes
              sepa_batch_id: sepa_batch_id
              destination_id: 2
              type: withdrawal
              destination_type: Asset account
              transaction_journal_id: 10421
              payment_date: 2000-01-23
              order: 0
              bill_id: 111
              foreign_currency_code: USD
              reconciled: false
              sepa_country: sepa_country
              source_type: Asset account
              foreign_currency_decimal_places: 2
              bill_name: Monthly rent
              piggy_bank_id: 0
              original_source: original_source
              sepa_ct_id: sepa_ct_id
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              process_date: 2000-01-23
              sepa_ep: sepa_ep
              internal_reference: internal_reference
              sepa_cc: sepa_cc
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              description: Vegetables
              destination_name: Buy and Large
              external_id: external_id
              currency_code: EUR
              import_hash_v2: import_hash_v2
              currency_decimal_places: 2
              invoice_date: 2000-01-23
              category_id: 43
              foreign_currency_symbol: $
              recurrence_id: 6
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              currency_name: Euro
              currency_symbol: $
              interest_date: 2000-01-23
              sepa_db: sepa_db
              due_date: 2000-01-23
              recurrence_total: 0
              book_date: 2000-01-23
              recurrence_count: 12
              bunq_payment_id: bunq_payment_id
              sepa_ct_op: sepa_ct_op
              source_id: 2
              user: 3
              currency_id: 12
              sepa_ci: sepa_ci
            user: 3
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: transactions
        - attributes:
            group_title: Split transaction title.
            apply_rules: false
            updated_at: 2018-09-17T12:46:47+01:00
            error_if_duplicate_hash: false
            created_at: 2018-09-17T12:46:47+01:00
            transactions:
            - date: 2000-01-23
              category_name: Groceries
              notes: Some example notes
              sepa_batch_id: sepa_batch_id
              destination_id: 2
              type: withdrawal
              destination_type: Asset account
              transaction_journal_id: 10421
              payment_date: 2000-01-23
              order: 0
              bill_id: 111
              foreign_currency_code: USD
              reconciled: false
              sepa_country: sepa_country
              source_type: Asset account
              foreign_currency_decimal_places: 2
              bill_name: Monthly rent
              piggy_bank_id: 0
              original_source: original_source
              sepa_ct_id: sepa_ct_id
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              process_date: 2000-01-23
              sepa_ep: sepa_ep
              internal_reference: internal_reference
              sepa_cc: sepa_cc
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              description: Vegetables
              destination_name: Buy and Large
              external_id: external_id
              currency_code: EUR
              import_hash_v2: import_hash_v2
              currency_decimal_places: 2
              invoice_date: 2000-01-23
              category_id: 43
              foreign_currency_symbol: $
              recurrence_id: 6
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              currency_name: Euro
              currency_symbol: $
              interest_date: 2000-01-23
              sepa_db: sepa_db
              due_date: 2000-01-23
              recurrence_total: 0
              book_date: 2000-01-23
              recurrence_count: 12
              bunq_payment_id: bunq_payment_id
              sepa_ct_op: sepa_ct_op
              source_id: 2
              user: 3
              currency_id: 12
              sepa_ci: sepa_ci
            - date: 2000-01-23
              category_name: Groceries
              notes: Some example notes
              sepa_batch_id: sepa_batch_id
              destination_id: 2
              type: withdrawal
              destination_type: Asset account
              transaction_journal_id: 10421
              payment_date: 2000-01-23
              order: 0
              bill_id: 111
              foreign_currency_code: USD
              reconciled: false
              sepa_country: sepa_country
              source_type: Asset account
              foreign_currency_decimal_places: 2
              bill_name: Monthly rent
              piggy_bank_id: 0
              original_source: original_source
              sepa_ct_id: sepa_ct_id
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              process_date: 2000-01-23
              sepa_ep: sepa_ep
              internal_reference: internal_reference
              sepa_cc: sepa_cc
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              description: Vegetables
              destination_name: Buy and Large
              external_id: external_id
              currency_code: EUR
              import_hash_v2: import_hash_v2
              currency_decimal_places: 2
              invoice_date: 2000-01-23
              category_id: 43
              foreign_currency_symbol: $
              recurrence_id: 6
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              currency_name: Euro
              currency_symbol: $
              interest_date: 2000-01-23
              sepa_db: sepa_db
              due_date: 2000-01-23
              recurrence_total: 0
              book_date: 2000-01-23
              recurrence_count: 12
              bunq_payment_id: bunq_payment_id
              sepa_ct_op: sepa_ct_op
              source_id: 2
              user: 3
              currency_id: 12
              sepa_ci: sepa_ci
            user: 3
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: transactions
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/TransactionRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    TransactionLink:
      example:
        notes: Some example notes
        updated_at: 2018-09-17T12:46:47+01:00
        link_type_id: 5
        link_type_name: Is paid by
        outward_id: 131
        created_at: 2018-09-17T12:46:47+01:00
        inward_id: 131
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        link_type_id:
          description: The link type ID to use. You can also use the link_type_name
            field.
          example: 5
          format: int32
          type: integer
          writeOnly: true
        link_type_name:
          description: The link type name to use. You can also use the link_type_id
            field.
          example: Is paid by
          format: string
          type: string
          writeOnly: true
        inward_id:
          description: The inward transaction transaction_journal_id for the link.
            This becomes the 'is paid by' transaction of the set.
          example: 131
          format: int32
          type: integer
        outward_id:
          description: The outward transaction transaction_journal_id for the link.
            This becomes the 'pays for' transaction of the set.
          example: 131
          format: int32
          type: integer
        notes:
          description: Optional. Some notes.
          example: Some example notes
          format: string
          type: string
      required:
      - inward_id
      - link_type_id
      - outward_id
      type: object
    TransactionLinkArray:
      example:
        data:
        - attributes:
            notes: Some example notes
            updated_at: 2018-09-17T12:46:47+01:00
            link_type_id: 5
            link_type_name: Is paid by
            outward_id: 131
            created_at: 2018-09-17T12:46:47+01:00
            inward_id: 131
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: transactionLinks
        - attributes:
            notes: Some example notes
            updated_at: 2018-09-17T12:46:47+01:00
            link_type_id: 5
            link_type_name: Is paid by
            outward_id: 131
            created_at: 2018-09-17T12:46:47+01:00
            inward_id: 131
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: transactionLinks
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/TransactionLinkRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    TransactionLinkRead:
      example:
        attributes:
          notes: Some example notes
          updated_at: 2018-09-17T12:46:47+01:00
          link_type_id: 5
          link_type_name: Is paid by
          outward_id: 131
          created_at: 2018-09-17T12:46:47+01:00
          inward_id: 131
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: transactionLinks
      properties:
        type:
          description: Immutable value
          example: transactionLinks
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/TransactionLink'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    TransactionLinkSingle:
      example:
        data:
          attributes:
            notes: Some example notes
            updated_at: 2018-09-17T12:46:47+01:00
            link_type_id: 5
            link_type_name: Is paid by
            outward_id: 131
            created_at: 2018-09-17T12:46:47+01:00
            inward_id: 131
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: transactionLinks
      properties:
        data:
          $ref: '#/components/schemas/TransactionLinkRead'
      required:
      - data
      type: object
    TransactionRead:
      example:
        attributes:
          group_title: Split transaction title.
          apply_rules: false
          updated_at: 2018-09-17T12:46:47+01:00
          error_if_duplicate_hash: false
          created_at: 2018-09-17T12:46:47+01:00
          transactions:
          - date: 2000-01-23
            category_name: Groceries
            notes: Some example notes
            sepa_batch_id: sepa_batch_id
            destination_id: 2
            type: withdrawal
            destination_type: Asset account
            transaction_journal_id: 10421
            payment_date: 2000-01-23
            order: 0
            bill_id: 111
            foreign_currency_code: USD
            reconciled: false
            sepa_country: sepa_country
            source_type: Asset account
            foreign_currency_decimal_places: 2
            bill_name: Monthly rent
            piggy_bank_id: 0
            original_source: original_source
            sepa_ct_id: sepa_ct_id
            tags:
            - Barbecue preparation
            - Barbecue preparation
            foreign_amount: "123.45"
            process_date: 2000-01-23
            sepa_ep: sepa_ep
            internal_reference: internal_reference
            sepa_cc: sepa_cc
            destination_iban: NL02ABNA0123456789
            source_iban: NL02ABNA0123456789
            budget_id: 4
            description: Vegetables
            destination_name: Buy and Large
            external_id: external_id
            currency_code: EUR
            import_hash_v2: import_hash_v2
            currency_decimal_places: 2
            invoice_date: 2000-01-23
            category_id: 43
            foreign_currency_symbol: $
            recurrence_id: 6
            piggy_bank_name: piggy_bank_name
            foreign_currency_id: 17
            source_name: Checking account
            amount: "123.45"
            budget_name: Groceries
            currency_name: Euro
            currency_symbol: $
            interest_date: 2000-01-23
            sepa_db: sepa_db
            due_date: 2000-01-23
            recurrence_total: 0
            book_date: 2000-01-23
            recurrence_count: 12
            bunq_payment_id: bunq_payment_id
            sepa_ct_op: sepa_ct_op
            source_id: 2
            user: 3
            currency_id: 12
            sepa_ci: sepa_ci
          - date: 2000-01-23
            category_name: Groceries
            notes: Some example notes
            sepa_batch_id: sepa_batch_id
            destination_id: 2
            type: withdrawal
            destination_type: Asset account
            transaction_journal_id: 10421
            payment_date: 2000-01-23
            order: 0
            bill_id: 111
            foreign_currency_code: USD
            reconciled: false
            sepa_country: sepa_country
            source_type: Asset account
            foreign_currency_decimal_places: 2
            bill_name: Monthly rent
            piggy_bank_id: 0
            original_source: original_source
            sepa_ct_id: sepa_ct_id
            tags:
            - Barbecue preparation
            - Barbecue preparation
            foreign_amount: "123.45"
            process_date: 2000-01-23
            sepa_ep: sepa_ep
            internal_reference: internal_reference
            sepa_cc: sepa_cc
            destination_iban: NL02ABNA0123456789
            source_iban: NL02ABNA0123456789
            budget_id: 4
            description: Vegetables
            destination_name: Buy and Large
            external_id: external_id
            currency_code: EUR
            import_hash_v2: import_hash_v2
            currency_decimal_places: 2
            invoice_date: 2000-01-23
            category_id: 43
            foreign_currency_symbol: $
            recurrence_id: 6
            piggy_bank_name: piggy_bank_name
            foreign_currency_id: 17
            source_name: Checking account
            amount: "123.45"
            budget_name: Groceries
            currency_name: Euro
            currency_symbol: $
            interest_date: 2000-01-23
            sepa_db: sepa_db
            due_date: 2000-01-23
            recurrence_total: 0
            book_date: 2000-01-23
            recurrence_count: 12
            bunq_payment_id: bunq_payment_id
            sepa_ct_op: sepa_ct_op
            source_id: 2
            user: 3
            currency_id: 12
            sepa_ci: sepa_ci
          user: 3
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: transactions
      properties:
        type:
          description: Immutable value
          example: transactions
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/Transaction'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    TransactionSingle:
      example:
        data:
          attributes:
            group_title: Split transaction title.
            apply_rules: false
            updated_at: 2018-09-17T12:46:47+01:00
            error_if_duplicate_hash: false
            created_at: 2018-09-17T12:46:47+01:00
            transactions:
            - date: 2000-01-23
              category_name: Groceries
              notes: Some example notes
              sepa_batch_id: sepa_batch_id
              destination_id: 2
              type: withdrawal
              destination_type: Asset account
              transaction_journal_id: 10421
              payment_date: 2000-01-23
              order: 0
              bill_id: 111
              foreign_currency_code: USD
              reconciled: false
              sepa_country: sepa_country
              source_type: Asset account
              foreign_currency_decimal_places: 2
              bill_name: Monthly rent
              piggy_bank_id: 0
              original_source: original_source
              sepa_ct_id: sepa_ct_id
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              process_date: 2000-01-23
              sepa_ep: sepa_ep
              internal_reference: internal_reference
              sepa_cc: sepa_cc
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              description: Vegetables
              destination_name: Buy and Large
              external_id: external_id
              currency_code: EUR
              import_hash_v2: import_hash_v2
              currency_decimal_places: 2
              invoice_date: 2000-01-23
              category_id: 43
              foreign_currency_symbol: $
              recurrence_id: 6
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              currency_name: Euro
              currency_symbol: $
              interest_date: 2000-01-23
              sepa_db: sepa_db
              due_date: 2000-01-23
              recurrence_total: 0
              book_date: 2000-01-23
              recurrence_count: 12
              bunq_payment_id: bunq_payment_id
              sepa_ct_op: sepa_ct_op
              source_id: 2
              user: 3
              currency_id: 12
              sepa_ci: sepa_ci
            - date: 2000-01-23
              category_name: Groceries
              notes: Some example notes
              sepa_batch_id: sepa_batch_id
              destination_id: 2
              type: withdrawal
              destination_type: Asset account
              transaction_journal_id: 10421
              payment_date: 2000-01-23
              order: 0
              bill_id: 111
              foreign_currency_code: USD
              reconciled: false
              sepa_country: sepa_country
              source_type: Asset account
              foreign_currency_decimal_places: 2
              bill_name: Monthly rent
              piggy_bank_id: 0
              original_source: original_source
              sepa_ct_id: sepa_ct_id
              tags:
              - Barbecue preparation
              - Barbecue preparation
              foreign_amount: "123.45"
              process_date: 2000-01-23
              sepa_ep: sepa_ep
              internal_reference: internal_reference
              sepa_cc: sepa_cc
              destination_iban: NL02ABNA0123456789
              source_iban: NL02ABNA0123456789
              budget_id: 4
              description: Vegetables
              destination_name: Buy and Large
              external_id: external_id
              currency_code: EUR
              import_hash_v2: import_hash_v2
              currency_decimal_places: 2
              invoice_date: 2000-01-23
              category_id: 43
              foreign_currency_symbol: $
              recurrence_id: 6
              piggy_bank_name: piggy_bank_name
              foreign_currency_id: 17
              source_name: Checking account
              amount: "123.45"
              budget_name: Groceries
              currency_name: Euro
              currency_symbol: $
              interest_date: 2000-01-23
              sepa_db: sepa_db
              due_date: 2000-01-23
              recurrence_total: 0
              book_date: 2000-01-23
              recurrence_count: 12
              bunq_payment_id: bunq_payment_id
              sepa_ct_op: sepa_ct_op
              source_id: 2
              user: 3
              currency_id: 12
              sepa_ci: sepa_ci
            user: 3
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: transactions
      properties:
        data:
          $ref: '#/components/schemas/TransactionRead'
      required:
      - data
      type: object
    TransactionSplit:
      example:
        date: 2000-01-23
        category_name: Groceries
        notes: Some example notes
        sepa_batch_id: sepa_batch_id
        destination_id: 2
        type: withdrawal
        destination_type: Asset account
        transaction_journal_id: 10421
        payment_date: 2000-01-23
        order: 0
        bill_id: 111
        foreign_currency_code: USD
        reconciled: false
        sepa_country: sepa_country
        source_type: Asset account
        foreign_currency_decimal_places: 2
        bill_name: Monthly rent
        piggy_bank_id: 0
        original_source: original_source
        sepa_ct_id: sepa_ct_id
        tags:
        - Barbecue preparation
        - Barbecue preparation
        foreign_amount: "123.45"
        process_date: 2000-01-23
        sepa_ep: sepa_ep
        internal_reference: internal_reference
        sepa_cc: sepa_cc
        destination_iban: NL02ABNA0123456789
        source_iban: NL02ABNA0123456789
        budget_id: 4
        description: Vegetables
        destination_name: Buy and Large
        external_id: external_id
        currency_code: EUR
        import_hash_v2: import_hash_v2
        currency_decimal_places: 2
        invoice_date: 2000-01-23
        category_id: 43
        foreign_currency_symbol: $
        recurrence_id: 6
        piggy_bank_name: piggy_bank_name
        foreign_currency_id: 17
        source_name: Checking account
        amount: "123.45"
        budget_name: Groceries
        currency_name: Euro
        currency_symbol: $
        interest_date: 2000-01-23
        sepa_db: sepa_db
        due_date: 2000-01-23
        recurrence_total: 0
        book_date: 2000-01-23
        recurrence_count: 12
        bunq_payment_id: bunq_payment_id
        sepa_ct_op: sepa_ct_op
        source_id: 2
        user: 3
        currency_id: 12
        sepa_ci: sepa_ci
      properties:
        user:
          description: User ID
          example: 3
          format: int32
          readOnly: true
          type: integer
        transaction_journal_id:
          description: |
            ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals
            making up the splits of the transaction.
          example: 10421
          format: int32
          readOnly: true
          type: integer
        type:
          description: Type of transaction.
          enum:
          - withdrawal
          - deposit
          - transfer
          - reconciliation
          - opening balance
          example: withdrawal
          format: string
          type: string
        date:
          description: Date of the transaction
          format: date
          type: string
        amount:
          description: Amount of the transaction.
          example: "123.45"
          format: amount
          type: string
        description:
          description: Description of the transaction.
          example: Vegetables
          format: string
          type: string
        order:
          description: Order of this entry in the list of transactions.
          example: 0
          format: int32
          nullable: true
          type: integer
        currency_id:
          description: Currency ID. Default is the source account's currency, or the
            user's default currency. Can be used instead of currency_code.
          example: 12
          format: int32
          nullable: true
          type: integer
        currency_code:
          description: Currency code. Default is the source account's currency, or
            the user's default currency. Can be used instead of currency_id.
          example: EUR
          format: string
          nullable: true
          type: string
        currency_symbol:
          example: $
          format: string
          readOnly: true
          type: string
        currency_name:
          example: Euro
          format: string
          readOnly: true
          type: string
        currency_decimal_places:
          description: Number of decimals used in this currency.
          example: 2
          format: int32
          readOnly: true
          type: integer
        foreign_amount:
          description: The amount in a foreign currency.
          example: "123.45"
          format: amount
          nullable: true
          type: string
        foreign_currency_id:
          description: Currency ID of the foreign currency. Default is null. Is required
            when you submit a foreign amount.
          example: 17
          format: int32
          nullable: true
          type: integer
        foreign_currency_code:
          description: Currency code of the foreign currency. Default is NULL. Can
            be used instead of the foreign_currency_id, but this or the ID is required
            when submitting a foreign amount.
          example: USD
          format: string
          nullable: true
          type: string
        foreign_currency_symbol:
          example: $
          format: string
          nullable: true
          readOnly: true
          type: string
        foreign_currency_decimal_places:
          description: Number of decimals in the currency
          example: 2
          format: int32
          nullable: true
          readOnly: true
          type: integer
        budget_id:
          description: The budget ID for this transaction.
          example: 4
          format: int32
          nullable: true
          type: integer
        budget_name:
          description: The name of the budget to be used. If the budget name is unknown,
            the ID will be used or the value will be ignored.
          example: Groceries
          format: string
          nullable: true
          readOnly: true
          type: string
        category_id:
          description: The category ID for this transaction.
          example: 43
          format: int32
          nullable: true
          type: integer
        category_name:
          description: The name of the category to be used. If the category is unknown,
            it will be created. If the ID and the name point to different categories,
            the ID overrules the name.
          example: Groceries
          format: string
          type: string
        source_id:
          description: ID of the source account. For a withdrawal or a transfer, this
            must always be an asset account. For deposits, this must be a revenue
            account.
          example: 2
          format: int32
          nullable: true
          type: integer
        source_name:
          description: 'Name of the source account. For a withdrawal or a transfer,
            this must always be an asset account. For deposits, this must be a revenue
            account. Can be used instead of the source_id. If the transaction is a
            deposit, the source_name can be filled in freely: the account will be
            created based on the name.'
          example: Checking account
          format: string
          nullable: true
          type: string
        source_iban:
          example: NL02ABNA0123456789
          format: string
          nullable: true
          readOnly: true
          type: string
        source_type:
          $ref: '#/components/schemas/AccountTypeProperty'
        destination_id:
          description: ID of the destination account. For a deposit or a transfer,
            this must always be an asset account. For withdrawals this must be an
            expense account.
          example: 2
          format: int32
          nullable: true
          type: integer
        destination_name:
          description: Name of the destination account. You can submit the name instead
            of the ID. For everything except transfers, the account will be auto-generated
            if unknown, so submitting a name is enough.
          example: Buy and Large
          format: string
          nullable: true
          type: string
        destination_iban:
          example: NL02ABNA0123456789
          format: string
          nullable: true
          readOnly: true
          type: string
        destination_type:
          $ref: '#/components/schemas/AccountTypeProperty'
        reconciled:
          description: If the transaction has been reconciled already. When you set
            this, the amount can no longer be edited by the user.
          example: false
          format: boolean
          type: boolean
        piggy_bank_id:
          description: Optional. Use either this or the piggy_bank_name
          format: int32
          type: integer
          writeOnly: true
        piggy_bank_name:
          description: Optional. Use either this or the piggy_bank_id
          format: string
          type: string
          writeOnly: true
        bill_id:
          description: Optional. Use either this or the bill_name
          example: 111
          format: int32
          nullable: true
          type: integer
        bill_name:
          description: Optional. Use either this or the bill_id
          example: Monthly rent
          format: string
          nullable: true
          type: string
        tags:
          description: Array of tags.
          items:
            description: Tag.
            example: Barbecue preparation
            format: string
            type: string
          nullable: true
          type: array
        notes:
          example: Some example notes
          format: string
          nullable: true
          type: string
        internal_reference:
          description: Reference to internal reference of other systems.
          format: string
          nullable: true
          type: string
        external_id:
          description: Reference to external ID in other systems.
          format: string
          nullable: true
          type: string
        original_source:
          description: System generated identifier for original creator of transaction.
          format: string
          nullable: true
          readOnly: true
          type: string
        recurrence_id:
          description: Reference to recurrence that made the transaction.
          format: int32
          nullable: true
          readOnly: true
          type: integer
        recurrence_total:
          description: Total number of transactions expected to be created by this
            recurrence repetition. Will be 0 if infinite.
          example: 0
          format: int32
          readOnly: true
          type: integer
        recurrence_count:
          description: 'The # of the current transaction created under this recurrence.'
          example: 12
          format: int32
          readOnly: true
          type: integer
        bunq_payment_id:
          description: Internal ID of bunq transaction.
          format: string
          nullable: true
          type: string
        import_hash_v2:
          description: Hash value of original import transaction (for duplicate detection).
          format: string
          nullable: true
          readOnly: true
          type: string
        sepa_cc:
          description: SEPA Clearing Code
          format: string
          nullable: true
          type: string
        sepa_ct_op:
          description: SEPA Opposing Account Identifier
          format: string
          type: string
        sepa_ct_id:
          description: SEPA end-to-end Identifier
          format: string
          nullable: true
          type: string
        sepa_db:
          description: SEPA mandate identifier
          format: string
          nullable: true
          type: string
        sepa_country:
          description: SEPA Country
          format: string
          nullable: true
          type: string
        sepa_ep:
          description: SEPA External Purpose indicator
          format: string
          nullable: true
          type: string
        sepa_ci:
          description: SEPA Creditor Identifier
          format: string
          nullable: true
          type: string
        sepa_batch_id:
          description: SEPA Batch ID
          format: string
          nullable: true
          type: string
        interest_date:
          format: date
          nullable: true
          type: string
        book_date:
          format: date
          nullable: true
          type: string
        process_date:
          format: date
          nullable: true
          type: string
        due_date:
          format: date
          nullable: true
          type: string
        payment_date:
          format: date
          nullable: true
          type: string
        invoice_date:
          format: date
          nullable: true
          type: string
      required:
      - amount
      - date
      - description
      - destination_id
      - source_id
      - type
      type: object
    TransactionTypeFilter:
      enum:
      - all
      - withdrawal
      - withdrawals
      - expense
      - deposit
      - deposits
      - income
      - transfer
      - transfers
      - opening_balance
      - reconciliation
      - special
      - specials
      - default
      type: string
    User:
      example:
        role: owner
        updated_at: 2018-09-17T12:46:47+01:00
        blocked: false
        created_at: 2018-09-17T12:46:47+01:00
        blocked_code: email_changed
        email: james@firefly-iii.org
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          readOnly: true
          type: string
        email:
          description: The new users email address.
          example: james@firefly-iii.org
          format: email
          type: string
        blocked:
          description: Boolean to indicate if the user is blocked.
          example: false
          format: boolean
          type: boolean
        blocked_code:
          description: If you say the user must be blocked, this will be the reason
            code.
          enum:
          - email_changed
          example: email_changed
          format: string
          nullable: true
          type: string
        role:
          description: Role for the new user. Can be empty or omitted.
          enum:
          - owner
          - demo
          example: owner
          format: string
          nullable: true
          type: string
      required:
      - email
      title: A single user
      type: object
    UserArray:
      example:
        data:
        - attributes:
            role: owner
            updated_at: 2018-09-17T12:46:47+01:00
            blocked: false
            created_at: 2018-09-17T12:46:47+01:00
            blocked_code: email_changed
            email: james@firefly-iii.org
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: users
        - attributes:
            role: owner
            updated_at: 2018-09-17T12:46:47+01:00
            blocked: false
            created_at: 2018-09-17T12:46:47+01:00
            blocked_code: email_changed
            email: james@firefly-iii.org
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: users
        meta:
          pagination:
            per_page: 100
            total: 3
            count: 20
            total_pages: 1
            current_page: 1
        links:
          last: https://demo.firefly-iii.org/api/v1/OBJECT?&page=12
          self: https://demo.firefly-iii.org/api/v1/OBJECT?&page=4
          first: https://demo.firefly-iii.org/api/v1/OBJECT?&page=1
      properties:
        data:
          items:
            $ref: '#/components/schemas/UserRead'
          type: array
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'
      required:
      - data
      - links
      - meta
      type: object
    UserRead:
      example:
        attributes:
          role: owner
          updated_at: 2018-09-17T12:46:47+01:00
          blocked: false
          created_at: 2018-09-17T12:46:47+01:00
          blocked_code: email_changed
          email: james@firefly-iii.org
        links:
          "0":
            rel: self
            uri: /OBJECTS/1
          self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
        id: "2"
        type: users
      properties:
        type:
          description: Immutable value
          example: users
          format: string
          type: string
        id:
          example: "2"
          format: string
          type: string
        attributes:
          $ref: '#/components/schemas/User'
        links:
          $ref: '#/components/schemas/ObjectLink'
      required:
      - attributes
      - id
      - links
      - type
      type: object
    UserSingle:
      example:
        data:
          attributes:
            role: owner
            updated_at: 2018-09-17T12:46:47+01:00
            blocked: false
            created_at: 2018-09-17T12:46:47+01:00
            blocked_code: email_changed
            email: james@firefly-iii.org
          links:
            "0":
              rel: self
              uri: /OBJECTS/1
            self: https://demo.firefly-iii.org/api/v1/OBJECTS/1
          id: "2"
          type: users
      properties:
        data:
          $ref: '#/components/schemas/UserRead'
      required:
      - data
      type: object
    ValidationError:
      properties:
        message:
          example: The given data was invalid.
          format: string
          type: string
        errors:
          $ref: '#/components/schemas/ValidationError_errors'
      type: object
    Bill_paid_dates:
      example:
        date: 2000-01-23
        transaction_group_id: 0
        transaction_journal_id: 6
      properties:
        transaction_group_id:
          description: Transaction group ID of the paid bill.
          format: int32
          readOnly: true
          type: integer
        transaction_journal_id:
          description: Transaction journal ID of the paid bill.
          format: int32
          readOnly: true
          type: integer
        date:
          description: Date the bill was paid.
          format: date
          readOnly: true
          type: string
      readOnly: true
      type: object
    Configuration_data:
      example:
        permission_update_check: -1
        single_user_mode: true
        last_update_check: 2018-09-17T12:46:47+01:00
        is_demo_site: true
      properties:
        is_demo_site:
          example: true
          format: boolean
          type: boolean
        permission_update_check:
          description: |
            If the user has given permission to check for updates.
            - null = never asked.
            - -1 = never asked.
            - 0 = no permission.
            - 1 = permission
          example: -1
          format: int32
          nullable: true
          type: integer
        last_update_check:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          type: string
        single_user_mode:
          description: Whether other users can register.
          example: true
          format: boolean
          type: boolean
      type: object
    ExchangeRate_attributes:
      example:
        date: 2018-09-17T00:00:00.000+0000
        to_currency_decimal_places: 2
        amount: "123.45"
        to_currency_symbol: $
        from_currency_symbol: $
        to_currency_code: EUR
        created_at: 2018-09-17T12:46:47+01:00
        from_currency_code: EUR
        updated_at: 2018-09-17T12:46:47+01:00
        rate: 1.1213
        to_currency_id: 5
        from_currency_decimal_places: 2
        from_currency_name: Euro
        from_currency_id: 5
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          type: string
        from_currency_id:
          example: 5
          format: int32
          type: integer
        from_currency_name:
          example: Euro
          format: string
          type: string
        from_currency_code:
          example: EUR
          format: string
          type: string
        from_currency_symbol:
          example: $
          format: string
          type: string
        from_currency_decimal_places:
          example: 2
          format: int32
          type: integer
        to_currency_id:
          example: 5
          format: int32
          type: integer
        to_currency_code:
          example: EUR
          format: string
          type: string
        to_currency_symbol:
          example: $
          format: string
          type: string
        to_currency_decimal_places:
          example: 2
          format: int32
          type: integer
        date:
          example: 2018-09-17
          format: date
          type: string
        rate:
          example: 1.1213
          format: float
          type: number
        amount:
          description: The amount in the "to"-currency, if provided in the request.
          example: "123.45"
          format: amount
          type: string
      type: object
    ImportJob_attributes:
      example:
        tag_tag: Import with key 'abcdef'
        configuration: configuration
        created_at: 2018-09-17T12:46:47+01:00
        transactions: transactions
        updated_at: 2018-09-17T12:46:47+01:00
        stage: apply_rules
        provider: bunq
        file_type: csv
        tag_id: 121
        extended_status: extended_status
        key: abcdef
        errors: errors
        status: import_finished
      properties:
        created_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          type: string
        updated_at:
          example: 2018-09-17T12:46:47+01:00
          format: date-time
          type: string
        tag_id:
          description: ID of the tag related to the import job, if present.
          example: 121
          format: int32
          type: integer
        tag_tag:
          description: Tag related to the import job, if present.
          example: Import with key 'abcdef'
          format: string
          type: string
        key:
          description: Import job unique identifier.
          example: abcdef
          format: string
          type: string
        file_type:
          description: File type, if relevant.
          example: csv
          format: string
          type: string
        provider:
          description: Import provider that did the import.
          example: bunq
          format: string
          type: string
        status:
          description: Status of import job.
          example: import_finished
          format: string
          type: string
        stage:
          description: Current stage.
          example: apply_rules
          format: string
          type: string
        configuration:
          description: JSON string with job-specific configuration.
          format: string
          type: string
        extended_status:
          description: JSON string with job-specific status.
          format: string
          type: string
        transactions:
          description: JSON string with a count of transactions in the job.
          format: string
          type: string
        errors:
          description: JSON string with a list of errors.
          format: string
          type: string
      type: object
    Meta_pagination:
      example:
        per_page: 100
        total: 3
        count: 20
        total_pages: 1
        current_page: 1
      properties:
        total:
          example: 3
          type: integer
        count:
          example: 20
          type: integer
        per_page:
          example: 100
          type: integer
        current_page:
          example: 1
          type: integer
        total_pages:
          example: 1
          type: integer
      type: object
    ObjectLink_0:
      example:
        rel: self
        uri: /OBJECTS/1
      properties:
        rel:
          example: self
          format: string
          type: string
        uri:
          example: /OBJECTS/1
          format: string
          type: string
      type: object
    SystemInfo_data:
      example:
        os: Linux vagrant-ubuntu-trusty-64
        driver: mysql
        php_version: "7.2"
        api_version: 0.10.0
        version: 4.8.0
      properties:
        version:
          example: 4.8.0
          format: semver
          type: string
        api_version:
          example: 0.10.0
          format: semver
          type: string
        php_version:
          example: "7.2"
          format: semver
          type: string
        os:
          example: Linux vagrant-ubuntu-trusty-64
          format: string
          type: string
        driver:
          example: mysql
          format: string
          type: string
      required:
      - api_version
      - driver
      - os
      - php_version
      - version
      type: object
    ValidationError_errors:
      properties:
        field1:
          items:
            format: string
            type: string
          type: array
        field2:
          items:
            format: string
            type: string
          type: array
      type: object
  securitySchemes:
    firefly_iii_auth:
      description: Default OAuth2 flow
      flows:
        authorizationCode:
          authorizationUrl: https://demo.firefly-iii.org/oauth/authorize
          refreshUrl: https://demo.firefly-iii.org/oauth/token
          scopes: {}
          tokenUrl: https://demo.firefly-iii.org/oauth/token
      type: oauth2
