/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// ImportJob struct for ImportJob
type ImportJob struct {
	// Immutable value
	Type *string `json:"type,omitempty"`
	Id *string `json:"id,omitempty"`
	Attributes *ImportJobAttributes `json:"attributes,omitempty"`
}

// NewImportJob instantiates a new ImportJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportJob() *ImportJob {
	this := ImportJob{}
	return &this
}

// NewImportJobWithDefaults instantiates a new ImportJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportJobWithDefaults() *ImportJob {
	this := ImportJob{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ImportJob) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportJob) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ImportJob) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ImportJob) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImportJob) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportJob) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImportJob) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImportJob) SetId(v string) {
	o.Id = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ImportJob) GetAttributes() ImportJobAttributes {
	if o == nil || o.Attributes == nil {
		var ret ImportJobAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportJob) GetAttributesOk() (*ImportJobAttributes, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ImportJob) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given ImportJobAttributes and assigns it to the Attributes field.
func (o *ImportJob) SetAttributes(v ImportJobAttributes) {
	o.Attributes = &v
}

func (o ImportJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableImportJob struct {
	value *ImportJob
	isSet bool
}

func (v NullableImportJob) Get() *ImportJob {
	return v.value
}

func (v *NullableImportJob) Set(val *ImportJob) {
	v.value = val
	v.isSet = true
}

func (v NullableImportJob) IsSet() bool {
	return v.isSet
}

func (v *NullableImportJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportJob(val *ImportJob) *NullableImportJob {
	return &NullableImportJob{value: val, isSet: true}
}

func (v NullableImportJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


