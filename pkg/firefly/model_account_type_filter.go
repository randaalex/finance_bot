/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"fmt"
)

// AccountTypeFilter the model 'AccountTypeFilter'
type AccountTypeFilter string

// List of AccountTypeFilter
const (
	ACCOUNTTYPEFILTER_ALL AccountTypeFilter = "all"
	ACCOUNTTYPEFILTER_ASSET AccountTypeFilter = "asset"
	ACCOUNTTYPEFILTER_CASH AccountTypeFilter = "cash"
	ACCOUNTTYPEFILTER_EXPENSE AccountTypeFilter = "expense"
	ACCOUNTTYPEFILTER_REVENUE AccountTypeFilter = "revenue"
	ACCOUNTTYPEFILTER_SPECIAL AccountTypeFilter = "special"
	ACCOUNTTYPEFILTER_HIDDEN AccountTypeFilter = "hidden"
	ACCOUNTTYPEFILTER_LIABILITY AccountTypeFilter = "liability"
	ACCOUNTTYPEFILTER_LIABILITIES AccountTypeFilter = "liabilities"
	ACCOUNTTYPEFILTER_DEFAULT_ACCOUNT AccountTypeFilter = "Default account"
	ACCOUNTTYPEFILTER_CASH_ACCOUNT AccountTypeFilter = "Cash account"
	ACCOUNTTYPEFILTER_ASSET_ACCOUNT AccountTypeFilter = "Asset account"
	ACCOUNTTYPEFILTER_EXPENSE_ACCOUNT AccountTypeFilter = "Expense account"
	ACCOUNTTYPEFILTER_REVENUE_ACCOUNT AccountTypeFilter = "Revenue account"
	ACCOUNTTYPEFILTER_INITIAL_BALANCE_ACCOUNT AccountTypeFilter = "Initial balance account"
	ACCOUNTTYPEFILTER_BENEFICIARY_ACCOUNT AccountTypeFilter = "Beneficiary account"
	ACCOUNTTYPEFILTER_IMPORT_ACCOUNT AccountTypeFilter = "Import account"
	ACCOUNTTYPEFILTER_RECONCILIATION_ACCOUNT AccountTypeFilter = "Reconciliation account"
	ACCOUNTTYPEFILTER_LOAN AccountTypeFilter = "Loan"
	ACCOUNTTYPEFILTER_DEBT AccountTypeFilter = "Debt"
	ACCOUNTTYPEFILTER_MORTGAGE AccountTypeFilter = "Mortgage"
)

var allowedAccountTypeFilterEnumValues = []AccountTypeFilter{
	"all",
	"asset",
	"cash",
	"expense",
	"revenue",
	"special",
	"hidden",
	"liability",
	"liabilities",
	"Default account",
	"Cash account",
	"Asset account",
	"Expense account",
	"Revenue account",
	"Initial balance account",
	"Beneficiary account",
	"Import account",
	"Reconciliation account",
	"Loan",
	"Debt",
	"Mortgage",
}

func (v *AccountTypeFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountTypeFilter(value)
	for _, existing := range allowedAccountTypeFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountTypeFilter", value)
}

// NewAccountTypeFilterFromValue returns a pointer to a valid AccountTypeFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountTypeFilterFromValue(v string) (*AccountTypeFilter, error) {
	ev := AccountTypeFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountTypeFilter: valid values are %v", v, allowedAccountTypeFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountTypeFilter) IsValid() bool {
	for _, existing := range allowedAccountTypeFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountTypeFilter value
func (v AccountTypeFilter) Ptr() *AccountTypeFilter {
	return &v
}

type NullableAccountTypeFilter struct {
	value *AccountTypeFilter
	isSet bool
}

func (v NullableAccountTypeFilter) Get() *AccountTypeFilter {
	return v.value
}

func (v *NullableAccountTypeFilter) Set(val *AccountTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountTypeFilter(val *AccountTypeFilter) *NullableAccountTypeFilter {
	return &NullableAccountTypeFilter{value: val, isSet: true}
}

func (v NullableAccountTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

