/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"time"
)

// TransactionSplitUpdate struct for TransactionSplitUpdate
type TransactionSplitUpdate struct {
	// Date of the transaction
	Date *time.Time `json:"date,omitempty"`
	// Amount of the transaction.
	Amount *string `json:"amount,omitempty"`
	// Description of the transaction.
	Description *string `json:"description,omitempty"`
	// Order of this entry in the list of transactions.
	Order NullableInt32 `json:"order,omitempty"`
	// Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.
	CurrencyId NullableString `json:"currency_id,omitempty"`
	// Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.
	CurrencyCode NullableString `json:"currency_code,omitempty"`
	CurrencySymbol *string `json:"currency_symbol,omitempty"`
	CurrencyName *string `json:"currency_name,omitempty"`
	// Number of decimals used in this currency.
	CurrencyDecimalPlaces *int32 `json:"currency_decimal_places,omitempty"`
	// The amount in a foreign currency.
	ForeignAmount NullableString `json:"foreign_amount,omitempty"`
	// Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
	ForeignCurrencyId NullableString `json:"foreign_currency_id,omitempty"`
	// Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
	ForeignCurrencyCode NullableString `json:"foreign_currency_code,omitempty"`
	ForeignCurrencySymbol NullableString `json:"foreign_currency_symbol,omitempty"`
	// Number of decimals in the currency
	ForeignCurrencyDecimalPlaces NullableInt32 `json:"foreign_currency_decimal_places,omitempty"`
	// The budget ID for this transaction.
	BudgetId NullableString `json:"budget_id,omitempty"`
	// The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
	BudgetName NullableString `json:"budget_name,omitempty"`
	// The category ID for this transaction.
	CategoryId NullableString `json:"category_id,omitempty"`
	// The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.
	CategoryName NullableString `json:"category_name,omitempty"`
	// ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.
	SourceId NullableString `json:"source_id,omitempty"`
	// Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.
	SourceName NullableString `json:"source_name,omitempty"`
	SourceIban NullableString `json:"source_iban,omitempty"`
	// ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.
	DestinationId NullableString `json:"destination_id,omitempty"`
	// Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.
	DestinationName NullableString `json:"destination_name,omitempty"`
	DestinationIban NullableString `json:"destination_iban,omitempty"`
	// If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.
	Reconciled *bool `json:"reconciled,omitempty"`
	// Optional. Use either this or the bill_name
	BillId NullableString `json:"bill_id,omitempty"`
	// Optional. Use either this or the bill_id
	BillName NullableString `json:"bill_name,omitempty"`
	// Array of tags.
	Tags []string `json:"tags,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
	// Reference to internal reference of other systems.
	InternalReference NullableString `json:"internal_reference,omitempty"`
	// Reference to external ID in other systems.
	ExternalId NullableString `json:"external_id,omitempty"`
	// Internal ID of bunq transaction.
	BunqPaymentId NullableString `json:"bunq_payment_id,omitempty"`
	// SEPA Clearing Code
	SepaCc NullableString `json:"sepa_cc,omitempty"`
	// SEPA Opposing Account Identifier
	SepaCtOp NullableString `json:"sepa_ct_op,omitempty"`
	// SEPA end-to-end Identifier
	SepaCtId NullableString `json:"sepa_ct_id,omitempty"`
	// SEPA mandate identifier
	SepaDb NullableString `json:"sepa_db,omitempty"`
	// SEPA Country
	SepaCountry NullableString `json:"sepa_country,omitempty"`
	// SEPA External Purpose indicator
	SepaEp NullableString `json:"sepa_ep,omitempty"`
	// SEPA Creditor Identifier
	SepaCi NullableString `json:"sepa_ci,omitempty"`
	// SEPA Batch ID
	SepaBatchId NullableString `json:"sepa_batch_id,omitempty"`
	InterestDate NullableTime `json:"interest_date,omitempty"`
	BookDate NullableTime `json:"book_date,omitempty"`
	ProcessDate NullableTime `json:"process_date,omitempty"`
	DueDate NullableTime `json:"due_date,omitempty"`
	PaymentDate NullableTime `json:"payment_date,omitempty"`
	InvoiceDate NullableTime `json:"invoice_date,omitempty"`
}

// NewTransactionSplitUpdate instantiates a new TransactionSplitUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionSplitUpdate() *TransactionSplitUpdate {
	this := TransactionSplitUpdate{}
	return &this
}

// NewTransactionSplitUpdateWithDefaults instantiates a new TransactionSplitUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionSplitUpdateWithDefaults() *TransactionSplitUpdate {
	this := TransactionSplitUpdate{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *TransactionSplitUpdate) GetDate() time.Time {
	if o == nil || o.Date == nil {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSplitUpdate) GetDateOk() (*time.Time, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *TransactionSplitUpdate) SetDate(v time.Time) {
	o.Date = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TransactionSplitUpdate) GetAmount() string {
	if o == nil || o.Amount == nil {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSplitUpdate) GetAmountOk() (*string, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *TransactionSplitUpdate) SetAmount(v string) {
	o.Amount = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TransactionSplitUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSplitUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TransactionSplitUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetOrder returns the Order field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetOrder() int32 {
	if o == nil || o.Order.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Order.Get()
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetOrderOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Order.Get(), o.Order.IsSet()
}

// HasOrder returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasOrder() bool {
	if o != nil && o.Order.IsSet() {
		return true
	}

	return false
}

// SetOrder gets a reference to the given NullableInt32 and assigns it to the Order field.
func (o *TransactionSplitUpdate) SetOrder(v int32) {
	o.Order.Set(&v)
}
// SetOrderNil sets the value for Order to be an explicit nil
func (o *TransactionSplitUpdate) SetOrderNil() {
	o.Order.Set(nil)
}

// UnsetOrder ensures that no value is present for Order, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetOrder() {
	o.Order.Unset()
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetCurrencyId() string {
	if o == nil || o.CurrencyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrencyId.Get()
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetCurrencyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrencyId.Get(), o.CurrencyId.IsSet()
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasCurrencyId() bool {
	if o != nil && o.CurrencyId.IsSet() {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given NullableString and assigns it to the CurrencyId field.
func (o *TransactionSplitUpdate) SetCurrencyId(v string) {
	o.CurrencyId.Set(&v)
}
// SetCurrencyIdNil sets the value for CurrencyId to be an explicit nil
func (o *TransactionSplitUpdate) SetCurrencyIdNil() {
	o.CurrencyId.Set(nil)
}

// UnsetCurrencyId ensures that no value is present for CurrencyId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetCurrencyId() {
	o.CurrencyId.Unset()
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode.Get()
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrencyCode.Get(), o.CurrencyCode.IsSet()
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given NullableString and assigns it to the CurrencyCode field.
func (o *TransactionSplitUpdate) SetCurrencyCode(v string) {
	o.CurrencyCode.Set(&v)
}
// SetCurrencyCodeNil sets the value for CurrencyCode to be an explicit nil
func (o *TransactionSplitUpdate) SetCurrencyCodeNil() {
	o.CurrencyCode.Set(nil)
}

// UnsetCurrencyCode ensures that no value is present for CurrencyCode, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetCurrencyCode() {
	o.CurrencyCode.Unset()
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *TransactionSplitUpdate) GetCurrencySymbol() string {
	if o == nil || o.CurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSplitUpdate) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || o.CurrencySymbol == nil {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasCurrencySymbol() bool {
	if o != nil && o.CurrencySymbol != nil {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *TransactionSplitUpdate) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetCurrencyName returns the CurrencyName field value if set, zero value otherwise.
func (o *TransactionSplitUpdate) GetCurrencyName() string {
	if o == nil || o.CurrencyName == nil {
		var ret string
		return ret
	}
	return *o.CurrencyName
}

// GetCurrencyNameOk returns a tuple with the CurrencyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSplitUpdate) GetCurrencyNameOk() (*string, bool) {
	if o == nil || o.CurrencyName == nil {
		return nil, false
	}
	return o.CurrencyName, true
}

// HasCurrencyName returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasCurrencyName() bool {
	if o != nil && o.CurrencyName != nil {
		return true
	}

	return false
}

// SetCurrencyName gets a reference to the given string and assigns it to the CurrencyName field.
func (o *TransactionSplitUpdate) SetCurrencyName(v string) {
	o.CurrencyName = &v
}

// GetCurrencyDecimalPlaces returns the CurrencyDecimalPlaces field value if set, zero value otherwise.
func (o *TransactionSplitUpdate) GetCurrencyDecimalPlaces() int32 {
	if o == nil || o.CurrencyDecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.CurrencyDecimalPlaces
}

// GetCurrencyDecimalPlacesOk returns a tuple with the CurrencyDecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSplitUpdate) GetCurrencyDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.CurrencyDecimalPlaces == nil {
		return nil, false
	}
	return o.CurrencyDecimalPlaces, true
}

// HasCurrencyDecimalPlaces returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasCurrencyDecimalPlaces() bool {
	if o != nil && o.CurrencyDecimalPlaces != nil {
		return true
	}

	return false
}

// SetCurrencyDecimalPlaces gets a reference to the given int32 and assigns it to the CurrencyDecimalPlaces field.
func (o *TransactionSplitUpdate) SetCurrencyDecimalPlaces(v int32) {
	o.CurrencyDecimalPlaces = &v
}

// GetForeignAmount returns the ForeignAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetForeignAmount() string {
	if o == nil || o.ForeignAmount.Get() == nil {
		var ret string
		return ret
	}
	return *o.ForeignAmount.Get()
}

// GetForeignAmountOk returns a tuple with the ForeignAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetForeignAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForeignAmount.Get(), o.ForeignAmount.IsSet()
}

// HasForeignAmount returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasForeignAmount() bool {
	if o != nil && o.ForeignAmount.IsSet() {
		return true
	}

	return false
}

// SetForeignAmount gets a reference to the given NullableString and assigns it to the ForeignAmount field.
func (o *TransactionSplitUpdate) SetForeignAmount(v string) {
	o.ForeignAmount.Set(&v)
}
// SetForeignAmountNil sets the value for ForeignAmount to be an explicit nil
func (o *TransactionSplitUpdate) SetForeignAmountNil() {
	o.ForeignAmount.Set(nil)
}

// UnsetForeignAmount ensures that no value is present for ForeignAmount, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetForeignAmount() {
	o.ForeignAmount.Unset()
}

// GetForeignCurrencyId returns the ForeignCurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetForeignCurrencyId() string {
	if o == nil || o.ForeignCurrencyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ForeignCurrencyId.Get()
}

// GetForeignCurrencyIdOk returns a tuple with the ForeignCurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetForeignCurrencyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForeignCurrencyId.Get(), o.ForeignCurrencyId.IsSet()
}

// HasForeignCurrencyId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasForeignCurrencyId() bool {
	if o != nil && o.ForeignCurrencyId.IsSet() {
		return true
	}

	return false
}

// SetForeignCurrencyId gets a reference to the given NullableString and assigns it to the ForeignCurrencyId field.
func (o *TransactionSplitUpdate) SetForeignCurrencyId(v string) {
	o.ForeignCurrencyId.Set(&v)
}
// SetForeignCurrencyIdNil sets the value for ForeignCurrencyId to be an explicit nil
func (o *TransactionSplitUpdate) SetForeignCurrencyIdNil() {
	o.ForeignCurrencyId.Set(nil)
}

// UnsetForeignCurrencyId ensures that no value is present for ForeignCurrencyId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetForeignCurrencyId() {
	o.ForeignCurrencyId.Unset()
}

// GetForeignCurrencyCode returns the ForeignCurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetForeignCurrencyCode() string {
	if o == nil || o.ForeignCurrencyCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ForeignCurrencyCode.Get()
}

// GetForeignCurrencyCodeOk returns a tuple with the ForeignCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetForeignCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForeignCurrencyCode.Get(), o.ForeignCurrencyCode.IsSet()
}

// HasForeignCurrencyCode returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasForeignCurrencyCode() bool {
	if o != nil && o.ForeignCurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetForeignCurrencyCode gets a reference to the given NullableString and assigns it to the ForeignCurrencyCode field.
func (o *TransactionSplitUpdate) SetForeignCurrencyCode(v string) {
	o.ForeignCurrencyCode.Set(&v)
}
// SetForeignCurrencyCodeNil sets the value for ForeignCurrencyCode to be an explicit nil
func (o *TransactionSplitUpdate) SetForeignCurrencyCodeNil() {
	o.ForeignCurrencyCode.Set(nil)
}

// UnsetForeignCurrencyCode ensures that no value is present for ForeignCurrencyCode, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetForeignCurrencyCode() {
	o.ForeignCurrencyCode.Unset()
}

// GetForeignCurrencySymbol returns the ForeignCurrencySymbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetForeignCurrencySymbol() string {
	if o == nil || o.ForeignCurrencySymbol.Get() == nil {
		var ret string
		return ret
	}
	return *o.ForeignCurrencySymbol.Get()
}

// GetForeignCurrencySymbolOk returns a tuple with the ForeignCurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetForeignCurrencySymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForeignCurrencySymbol.Get(), o.ForeignCurrencySymbol.IsSet()
}

// HasForeignCurrencySymbol returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasForeignCurrencySymbol() bool {
	if o != nil && o.ForeignCurrencySymbol.IsSet() {
		return true
	}

	return false
}

// SetForeignCurrencySymbol gets a reference to the given NullableString and assigns it to the ForeignCurrencySymbol field.
func (o *TransactionSplitUpdate) SetForeignCurrencySymbol(v string) {
	o.ForeignCurrencySymbol.Set(&v)
}
// SetForeignCurrencySymbolNil sets the value for ForeignCurrencySymbol to be an explicit nil
func (o *TransactionSplitUpdate) SetForeignCurrencySymbolNil() {
	o.ForeignCurrencySymbol.Set(nil)
}

// UnsetForeignCurrencySymbol ensures that no value is present for ForeignCurrencySymbol, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetForeignCurrencySymbol() {
	o.ForeignCurrencySymbol.Unset()
}

// GetForeignCurrencyDecimalPlaces returns the ForeignCurrencyDecimalPlaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetForeignCurrencyDecimalPlaces() int32 {
	if o == nil || o.ForeignCurrencyDecimalPlaces.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ForeignCurrencyDecimalPlaces.Get()
}

// GetForeignCurrencyDecimalPlacesOk returns a tuple with the ForeignCurrencyDecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetForeignCurrencyDecimalPlacesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForeignCurrencyDecimalPlaces.Get(), o.ForeignCurrencyDecimalPlaces.IsSet()
}

// HasForeignCurrencyDecimalPlaces returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasForeignCurrencyDecimalPlaces() bool {
	if o != nil && o.ForeignCurrencyDecimalPlaces.IsSet() {
		return true
	}

	return false
}

// SetForeignCurrencyDecimalPlaces gets a reference to the given NullableInt32 and assigns it to the ForeignCurrencyDecimalPlaces field.
func (o *TransactionSplitUpdate) SetForeignCurrencyDecimalPlaces(v int32) {
	o.ForeignCurrencyDecimalPlaces.Set(&v)
}
// SetForeignCurrencyDecimalPlacesNil sets the value for ForeignCurrencyDecimalPlaces to be an explicit nil
func (o *TransactionSplitUpdate) SetForeignCurrencyDecimalPlacesNil() {
	o.ForeignCurrencyDecimalPlaces.Set(nil)
}

// UnsetForeignCurrencyDecimalPlaces ensures that no value is present for ForeignCurrencyDecimalPlaces, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetForeignCurrencyDecimalPlaces() {
	o.ForeignCurrencyDecimalPlaces.Unset()
}

// GetBudgetId returns the BudgetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetBudgetId() string {
	if o == nil || o.BudgetId.Get() == nil {
		var ret string
		return ret
	}
	return *o.BudgetId.Get()
}

// GetBudgetIdOk returns a tuple with the BudgetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetBudgetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BudgetId.Get(), o.BudgetId.IsSet()
}

// HasBudgetId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasBudgetId() bool {
	if o != nil && o.BudgetId.IsSet() {
		return true
	}

	return false
}

// SetBudgetId gets a reference to the given NullableString and assigns it to the BudgetId field.
func (o *TransactionSplitUpdate) SetBudgetId(v string) {
	o.BudgetId.Set(&v)
}
// SetBudgetIdNil sets the value for BudgetId to be an explicit nil
func (o *TransactionSplitUpdate) SetBudgetIdNil() {
	o.BudgetId.Set(nil)
}

// UnsetBudgetId ensures that no value is present for BudgetId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetBudgetId() {
	o.BudgetId.Unset()
}

// GetBudgetName returns the BudgetName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetBudgetName() string {
	if o == nil || o.BudgetName.Get() == nil {
		var ret string
		return ret
	}
	return *o.BudgetName.Get()
}

// GetBudgetNameOk returns a tuple with the BudgetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetBudgetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BudgetName.Get(), o.BudgetName.IsSet()
}

// HasBudgetName returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasBudgetName() bool {
	if o != nil && o.BudgetName.IsSet() {
		return true
	}

	return false
}

// SetBudgetName gets a reference to the given NullableString and assigns it to the BudgetName field.
func (o *TransactionSplitUpdate) SetBudgetName(v string) {
	o.BudgetName.Set(&v)
}
// SetBudgetNameNil sets the value for BudgetName to be an explicit nil
func (o *TransactionSplitUpdate) SetBudgetNameNil() {
	o.BudgetName.Set(nil)
}

// UnsetBudgetName ensures that no value is present for BudgetName, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetBudgetName() {
	o.BudgetName.Unset()
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetCategoryId() string {
	if o == nil || o.CategoryId.Get() == nil {
		var ret string
		return ret
	}
	return *o.CategoryId.Get()
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetCategoryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CategoryId.Get(), o.CategoryId.IsSet()
}

// HasCategoryId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasCategoryId() bool {
	if o != nil && o.CategoryId.IsSet() {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given NullableString and assigns it to the CategoryId field.
func (o *TransactionSplitUpdate) SetCategoryId(v string) {
	o.CategoryId.Set(&v)
}
// SetCategoryIdNil sets the value for CategoryId to be an explicit nil
func (o *TransactionSplitUpdate) SetCategoryIdNil() {
	o.CategoryId.Set(nil)
}

// UnsetCategoryId ensures that no value is present for CategoryId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetCategoryId() {
	o.CategoryId.Unset()
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetCategoryName() string {
	if o == nil || o.CategoryName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CategoryName.Get()
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetCategoryNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CategoryName.Get(), o.CategoryName.IsSet()
}

// HasCategoryName returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasCategoryName() bool {
	if o != nil && o.CategoryName.IsSet() {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given NullableString and assigns it to the CategoryName field.
func (o *TransactionSplitUpdate) SetCategoryName(v string) {
	o.CategoryName.Set(&v)
}
// SetCategoryNameNil sets the value for CategoryName to be an explicit nil
func (o *TransactionSplitUpdate) SetCategoryNameNil() {
	o.CategoryName.Set(nil)
}

// UnsetCategoryName ensures that no value is present for CategoryName, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetCategoryName() {
	o.CategoryName.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSourceId() string {
	if o == nil || o.SourceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSourceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableString and assigns it to the SourceId field.
func (o *TransactionSplitUpdate) SetSourceId(v string) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *TransactionSplitUpdate) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSourceName() string {
	if o == nil || o.SourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *TransactionSplitUpdate) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *TransactionSplitUpdate) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetSourceIban returns the SourceIban field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSourceIban() string {
	if o == nil || o.SourceIban.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceIban.Get()
}

// GetSourceIbanOk returns a tuple with the SourceIban field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSourceIbanOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceIban.Get(), o.SourceIban.IsSet()
}

// HasSourceIban returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSourceIban() bool {
	if o != nil && o.SourceIban.IsSet() {
		return true
	}

	return false
}

// SetSourceIban gets a reference to the given NullableString and assigns it to the SourceIban field.
func (o *TransactionSplitUpdate) SetSourceIban(v string) {
	o.SourceIban.Set(&v)
}
// SetSourceIbanNil sets the value for SourceIban to be an explicit nil
func (o *TransactionSplitUpdate) SetSourceIbanNil() {
	o.SourceIban.Set(nil)
}

// UnsetSourceIban ensures that no value is present for SourceIban, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSourceIban() {
	o.SourceIban.Unset()
}

// GetDestinationId returns the DestinationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetDestinationId() string {
	if o == nil || o.DestinationId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationId.Get()
}

// GetDestinationIdOk returns a tuple with the DestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetDestinationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationId.Get(), o.DestinationId.IsSet()
}

// HasDestinationId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasDestinationId() bool {
	if o != nil && o.DestinationId.IsSet() {
		return true
	}

	return false
}

// SetDestinationId gets a reference to the given NullableString and assigns it to the DestinationId field.
func (o *TransactionSplitUpdate) SetDestinationId(v string) {
	o.DestinationId.Set(&v)
}
// SetDestinationIdNil sets the value for DestinationId to be an explicit nil
func (o *TransactionSplitUpdate) SetDestinationIdNil() {
	o.DestinationId.Set(nil)
}

// UnsetDestinationId ensures that no value is present for DestinationId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetDestinationId() {
	o.DestinationId.Unset()
}

// GetDestinationName returns the DestinationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetDestinationName() string {
	if o == nil || o.DestinationName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationName.Get()
}

// GetDestinationNameOk returns a tuple with the DestinationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetDestinationNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationName.Get(), o.DestinationName.IsSet()
}

// HasDestinationName returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasDestinationName() bool {
	if o != nil && o.DestinationName.IsSet() {
		return true
	}

	return false
}

// SetDestinationName gets a reference to the given NullableString and assigns it to the DestinationName field.
func (o *TransactionSplitUpdate) SetDestinationName(v string) {
	o.DestinationName.Set(&v)
}
// SetDestinationNameNil sets the value for DestinationName to be an explicit nil
func (o *TransactionSplitUpdate) SetDestinationNameNil() {
	o.DestinationName.Set(nil)
}

// UnsetDestinationName ensures that no value is present for DestinationName, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetDestinationName() {
	o.DestinationName.Unset()
}

// GetDestinationIban returns the DestinationIban field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetDestinationIban() string {
	if o == nil || o.DestinationIban.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationIban.Get()
}

// GetDestinationIbanOk returns a tuple with the DestinationIban field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetDestinationIbanOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationIban.Get(), o.DestinationIban.IsSet()
}

// HasDestinationIban returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasDestinationIban() bool {
	if o != nil && o.DestinationIban.IsSet() {
		return true
	}

	return false
}

// SetDestinationIban gets a reference to the given NullableString and assigns it to the DestinationIban field.
func (o *TransactionSplitUpdate) SetDestinationIban(v string) {
	o.DestinationIban.Set(&v)
}
// SetDestinationIbanNil sets the value for DestinationIban to be an explicit nil
func (o *TransactionSplitUpdate) SetDestinationIbanNil() {
	o.DestinationIban.Set(nil)
}

// UnsetDestinationIban ensures that no value is present for DestinationIban, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetDestinationIban() {
	o.DestinationIban.Unset()
}

// GetReconciled returns the Reconciled field value if set, zero value otherwise.
func (o *TransactionSplitUpdate) GetReconciled() bool {
	if o == nil || o.Reconciled == nil {
		var ret bool
		return ret
	}
	return *o.Reconciled
}

// GetReconciledOk returns a tuple with the Reconciled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionSplitUpdate) GetReconciledOk() (*bool, bool) {
	if o == nil || o.Reconciled == nil {
		return nil, false
	}
	return o.Reconciled, true
}

// HasReconciled returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasReconciled() bool {
	if o != nil && o.Reconciled != nil {
		return true
	}

	return false
}

// SetReconciled gets a reference to the given bool and assigns it to the Reconciled field.
func (o *TransactionSplitUpdate) SetReconciled(v bool) {
	o.Reconciled = &v
}

// GetBillId returns the BillId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetBillId() string {
	if o == nil || o.BillId.Get() == nil {
		var ret string
		return ret
	}
	return *o.BillId.Get()
}

// GetBillIdOk returns a tuple with the BillId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetBillIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BillId.Get(), o.BillId.IsSet()
}

// HasBillId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasBillId() bool {
	if o != nil && o.BillId.IsSet() {
		return true
	}

	return false
}

// SetBillId gets a reference to the given NullableString and assigns it to the BillId field.
func (o *TransactionSplitUpdate) SetBillId(v string) {
	o.BillId.Set(&v)
}
// SetBillIdNil sets the value for BillId to be an explicit nil
func (o *TransactionSplitUpdate) SetBillIdNil() {
	o.BillId.Set(nil)
}

// UnsetBillId ensures that no value is present for BillId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetBillId() {
	o.BillId.Unset()
}

// GetBillName returns the BillName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetBillName() string {
	if o == nil || o.BillName.Get() == nil {
		var ret string
		return ret
	}
	return *o.BillName.Get()
}

// GetBillNameOk returns a tuple with the BillName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetBillNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BillName.Get(), o.BillName.IsSet()
}

// HasBillName returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasBillName() bool {
	if o != nil && o.BillName.IsSet() {
		return true
	}

	return false
}

// SetBillName gets a reference to the given NullableString and assigns it to the BillName field.
func (o *TransactionSplitUpdate) SetBillName(v string) {
	o.BillName.Set(&v)
}
// SetBillNameNil sets the value for BillName to be an explicit nil
func (o *TransactionSplitUpdate) SetBillNameNil() {
	o.BillName.Set(nil)
}

// UnsetBillName ensures that no value is present for BillName, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetBillName() {
	o.BillName.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetTags() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *TransactionSplitUpdate) SetTags(v []string) {
	o.Tags = v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetNotes() string {
	if o == nil || o.Notes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetNotesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *TransactionSplitUpdate) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *TransactionSplitUpdate) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetNotes() {
	o.Notes.Unset()
}

// GetInternalReference returns the InternalReference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetInternalReference() string {
	if o == nil || o.InternalReference.Get() == nil {
		var ret string
		return ret
	}
	return *o.InternalReference.Get()
}

// GetInternalReferenceOk returns a tuple with the InternalReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetInternalReferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InternalReference.Get(), o.InternalReference.IsSet()
}

// HasInternalReference returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasInternalReference() bool {
	if o != nil && o.InternalReference.IsSet() {
		return true
	}

	return false
}

// SetInternalReference gets a reference to the given NullableString and assigns it to the InternalReference field.
func (o *TransactionSplitUpdate) SetInternalReference(v string) {
	o.InternalReference.Set(&v)
}
// SetInternalReferenceNil sets the value for InternalReference to be an explicit nil
func (o *TransactionSplitUpdate) SetInternalReferenceNil() {
	o.InternalReference.Set(nil)
}

// UnsetInternalReference ensures that no value is present for InternalReference, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetInternalReference() {
	o.InternalReference.Unset()
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetExternalId() string {
	if o == nil || o.ExternalId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalId.Get()
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetExternalIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalId.Get(), o.ExternalId.IsSet()
}

// HasExternalId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasExternalId() bool {
	if o != nil && o.ExternalId.IsSet() {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given NullableString and assigns it to the ExternalId field.
func (o *TransactionSplitUpdate) SetExternalId(v string) {
	o.ExternalId.Set(&v)
}
// SetExternalIdNil sets the value for ExternalId to be an explicit nil
func (o *TransactionSplitUpdate) SetExternalIdNil() {
	o.ExternalId.Set(nil)
}

// UnsetExternalId ensures that no value is present for ExternalId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetExternalId() {
	o.ExternalId.Unset()
}

// GetBunqPaymentId returns the BunqPaymentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetBunqPaymentId() string {
	if o == nil || o.BunqPaymentId.Get() == nil {
		var ret string
		return ret
	}
	return *o.BunqPaymentId.Get()
}

// GetBunqPaymentIdOk returns a tuple with the BunqPaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetBunqPaymentIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BunqPaymentId.Get(), o.BunqPaymentId.IsSet()
}

// HasBunqPaymentId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasBunqPaymentId() bool {
	if o != nil && o.BunqPaymentId.IsSet() {
		return true
	}

	return false
}

// SetBunqPaymentId gets a reference to the given NullableString and assigns it to the BunqPaymentId field.
func (o *TransactionSplitUpdate) SetBunqPaymentId(v string) {
	o.BunqPaymentId.Set(&v)
}
// SetBunqPaymentIdNil sets the value for BunqPaymentId to be an explicit nil
func (o *TransactionSplitUpdate) SetBunqPaymentIdNil() {
	o.BunqPaymentId.Set(nil)
}

// UnsetBunqPaymentId ensures that no value is present for BunqPaymentId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetBunqPaymentId() {
	o.BunqPaymentId.Unset()
}

// GetSepaCc returns the SepaCc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSepaCc() string {
	if o == nil || o.SepaCc.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaCc.Get()
}

// GetSepaCcOk returns a tuple with the SepaCc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSepaCcOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SepaCc.Get(), o.SepaCc.IsSet()
}

// HasSepaCc returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSepaCc() bool {
	if o != nil && o.SepaCc.IsSet() {
		return true
	}

	return false
}

// SetSepaCc gets a reference to the given NullableString and assigns it to the SepaCc field.
func (o *TransactionSplitUpdate) SetSepaCc(v string) {
	o.SepaCc.Set(&v)
}
// SetSepaCcNil sets the value for SepaCc to be an explicit nil
func (o *TransactionSplitUpdate) SetSepaCcNil() {
	o.SepaCc.Set(nil)
}

// UnsetSepaCc ensures that no value is present for SepaCc, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSepaCc() {
	o.SepaCc.Unset()
}

// GetSepaCtOp returns the SepaCtOp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSepaCtOp() string {
	if o == nil || o.SepaCtOp.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaCtOp.Get()
}

// GetSepaCtOpOk returns a tuple with the SepaCtOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSepaCtOpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SepaCtOp.Get(), o.SepaCtOp.IsSet()
}

// HasSepaCtOp returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSepaCtOp() bool {
	if o != nil && o.SepaCtOp.IsSet() {
		return true
	}

	return false
}

// SetSepaCtOp gets a reference to the given NullableString and assigns it to the SepaCtOp field.
func (o *TransactionSplitUpdate) SetSepaCtOp(v string) {
	o.SepaCtOp.Set(&v)
}
// SetSepaCtOpNil sets the value for SepaCtOp to be an explicit nil
func (o *TransactionSplitUpdate) SetSepaCtOpNil() {
	o.SepaCtOp.Set(nil)
}

// UnsetSepaCtOp ensures that no value is present for SepaCtOp, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSepaCtOp() {
	o.SepaCtOp.Unset()
}

// GetSepaCtId returns the SepaCtId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSepaCtId() string {
	if o == nil || o.SepaCtId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaCtId.Get()
}

// GetSepaCtIdOk returns a tuple with the SepaCtId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSepaCtIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SepaCtId.Get(), o.SepaCtId.IsSet()
}

// HasSepaCtId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSepaCtId() bool {
	if o != nil && o.SepaCtId.IsSet() {
		return true
	}

	return false
}

// SetSepaCtId gets a reference to the given NullableString and assigns it to the SepaCtId field.
func (o *TransactionSplitUpdate) SetSepaCtId(v string) {
	o.SepaCtId.Set(&v)
}
// SetSepaCtIdNil sets the value for SepaCtId to be an explicit nil
func (o *TransactionSplitUpdate) SetSepaCtIdNil() {
	o.SepaCtId.Set(nil)
}

// UnsetSepaCtId ensures that no value is present for SepaCtId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSepaCtId() {
	o.SepaCtId.Unset()
}

// GetSepaDb returns the SepaDb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSepaDb() string {
	if o == nil || o.SepaDb.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaDb.Get()
}

// GetSepaDbOk returns a tuple with the SepaDb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSepaDbOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SepaDb.Get(), o.SepaDb.IsSet()
}

// HasSepaDb returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSepaDb() bool {
	if o != nil && o.SepaDb.IsSet() {
		return true
	}

	return false
}

// SetSepaDb gets a reference to the given NullableString and assigns it to the SepaDb field.
func (o *TransactionSplitUpdate) SetSepaDb(v string) {
	o.SepaDb.Set(&v)
}
// SetSepaDbNil sets the value for SepaDb to be an explicit nil
func (o *TransactionSplitUpdate) SetSepaDbNil() {
	o.SepaDb.Set(nil)
}

// UnsetSepaDb ensures that no value is present for SepaDb, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSepaDb() {
	o.SepaDb.Unset()
}

// GetSepaCountry returns the SepaCountry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSepaCountry() string {
	if o == nil || o.SepaCountry.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaCountry.Get()
}

// GetSepaCountryOk returns a tuple with the SepaCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSepaCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SepaCountry.Get(), o.SepaCountry.IsSet()
}

// HasSepaCountry returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSepaCountry() bool {
	if o != nil && o.SepaCountry.IsSet() {
		return true
	}

	return false
}

// SetSepaCountry gets a reference to the given NullableString and assigns it to the SepaCountry field.
func (o *TransactionSplitUpdate) SetSepaCountry(v string) {
	o.SepaCountry.Set(&v)
}
// SetSepaCountryNil sets the value for SepaCountry to be an explicit nil
func (o *TransactionSplitUpdate) SetSepaCountryNil() {
	o.SepaCountry.Set(nil)
}

// UnsetSepaCountry ensures that no value is present for SepaCountry, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSepaCountry() {
	o.SepaCountry.Unset()
}

// GetSepaEp returns the SepaEp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSepaEp() string {
	if o == nil || o.SepaEp.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaEp.Get()
}

// GetSepaEpOk returns a tuple with the SepaEp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSepaEpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SepaEp.Get(), o.SepaEp.IsSet()
}

// HasSepaEp returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSepaEp() bool {
	if o != nil && o.SepaEp.IsSet() {
		return true
	}

	return false
}

// SetSepaEp gets a reference to the given NullableString and assigns it to the SepaEp field.
func (o *TransactionSplitUpdate) SetSepaEp(v string) {
	o.SepaEp.Set(&v)
}
// SetSepaEpNil sets the value for SepaEp to be an explicit nil
func (o *TransactionSplitUpdate) SetSepaEpNil() {
	o.SepaEp.Set(nil)
}

// UnsetSepaEp ensures that no value is present for SepaEp, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSepaEp() {
	o.SepaEp.Unset()
}

// GetSepaCi returns the SepaCi field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSepaCi() string {
	if o == nil || o.SepaCi.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaCi.Get()
}

// GetSepaCiOk returns a tuple with the SepaCi field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSepaCiOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SepaCi.Get(), o.SepaCi.IsSet()
}

// HasSepaCi returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSepaCi() bool {
	if o != nil && o.SepaCi.IsSet() {
		return true
	}

	return false
}

// SetSepaCi gets a reference to the given NullableString and assigns it to the SepaCi field.
func (o *TransactionSplitUpdate) SetSepaCi(v string) {
	o.SepaCi.Set(&v)
}
// SetSepaCiNil sets the value for SepaCi to be an explicit nil
func (o *TransactionSplitUpdate) SetSepaCiNil() {
	o.SepaCi.Set(nil)
}

// UnsetSepaCi ensures that no value is present for SepaCi, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSepaCi() {
	o.SepaCi.Unset()
}

// GetSepaBatchId returns the SepaBatchId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetSepaBatchId() string {
	if o == nil || o.SepaBatchId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SepaBatchId.Get()
}

// GetSepaBatchIdOk returns a tuple with the SepaBatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetSepaBatchIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SepaBatchId.Get(), o.SepaBatchId.IsSet()
}

// HasSepaBatchId returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasSepaBatchId() bool {
	if o != nil && o.SepaBatchId.IsSet() {
		return true
	}

	return false
}

// SetSepaBatchId gets a reference to the given NullableString and assigns it to the SepaBatchId field.
func (o *TransactionSplitUpdate) SetSepaBatchId(v string) {
	o.SepaBatchId.Set(&v)
}
// SetSepaBatchIdNil sets the value for SepaBatchId to be an explicit nil
func (o *TransactionSplitUpdate) SetSepaBatchIdNil() {
	o.SepaBatchId.Set(nil)
}

// UnsetSepaBatchId ensures that no value is present for SepaBatchId, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetSepaBatchId() {
	o.SepaBatchId.Unset()
}

// GetInterestDate returns the InterestDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetInterestDate() time.Time {
	if o == nil || o.InterestDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.InterestDate.Get()
}

// GetInterestDateOk returns a tuple with the InterestDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetInterestDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InterestDate.Get(), o.InterestDate.IsSet()
}

// HasInterestDate returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasInterestDate() bool {
	if o != nil && o.InterestDate.IsSet() {
		return true
	}

	return false
}

// SetInterestDate gets a reference to the given NullableTime and assigns it to the InterestDate field.
func (o *TransactionSplitUpdate) SetInterestDate(v time.Time) {
	o.InterestDate.Set(&v)
}
// SetInterestDateNil sets the value for InterestDate to be an explicit nil
func (o *TransactionSplitUpdate) SetInterestDateNil() {
	o.InterestDate.Set(nil)
}

// UnsetInterestDate ensures that no value is present for InterestDate, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetInterestDate() {
	o.InterestDate.Unset()
}

// GetBookDate returns the BookDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetBookDate() time.Time {
	if o == nil || o.BookDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.BookDate.Get()
}

// GetBookDateOk returns a tuple with the BookDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetBookDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BookDate.Get(), o.BookDate.IsSet()
}

// HasBookDate returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasBookDate() bool {
	if o != nil && o.BookDate.IsSet() {
		return true
	}

	return false
}

// SetBookDate gets a reference to the given NullableTime and assigns it to the BookDate field.
func (o *TransactionSplitUpdate) SetBookDate(v time.Time) {
	o.BookDate.Set(&v)
}
// SetBookDateNil sets the value for BookDate to be an explicit nil
func (o *TransactionSplitUpdate) SetBookDateNil() {
	o.BookDate.Set(nil)
}

// UnsetBookDate ensures that no value is present for BookDate, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetBookDate() {
	o.BookDate.Unset()
}

// GetProcessDate returns the ProcessDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetProcessDate() time.Time {
	if o == nil || o.ProcessDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ProcessDate.Get()
}

// GetProcessDateOk returns a tuple with the ProcessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetProcessDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProcessDate.Get(), o.ProcessDate.IsSet()
}

// HasProcessDate returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasProcessDate() bool {
	if o != nil && o.ProcessDate.IsSet() {
		return true
	}

	return false
}

// SetProcessDate gets a reference to the given NullableTime and assigns it to the ProcessDate field.
func (o *TransactionSplitUpdate) SetProcessDate(v time.Time) {
	o.ProcessDate.Set(&v)
}
// SetProcessDateNil sets the value for ProcessDate to be an explicit nil
func (o *TransactionSplitUpdate) SetProcessDateNil() {
	o.ProcessDate.Set(nil)
}

// UnsetProcessDate ensures that no value is present for ProcessDate, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetProcessDate() {
	o.ProcessDate.Unset()
}

// GetDueDate returns the DueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetDueDate() time.Time {
	if o == nil || o.DueDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DueDate.Get()
}

// GetDueDateOk returns a tuple with the DueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetDueDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DueDate.Get(), o.DueDate.IsSet()
}

// HasDueDate returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasDueDate() bool {
	if o != nil && o.DueDate.IsSet() {
		return true
	}

	return false
}

// SetDueDate gets a reference to the given NullableTime and assigns it to the DueDate field.
func (o *TransactionSplitUpdate) SetDueDate(v time.Time) {
	o.DueDate.Set(&v)
}
// SetDueDateNil sets the value for DueDate to be an explicit nil
func (o *TransactionSplitUpdate) SetDueDateNil() {
	o.DueDate.Set(nil)
}

// UnsetDueDate ensures that no value is present for DueDate, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetDueDate() {
	o.DueDate.Unset()
}

// GetPaymentDate returns the PaymentDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetPaymentDate() time.Time {
	if o == nil || o.PaymentDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.PaymentDate.Get()
}

// GetPaymentDateOk returns a tuple with the PaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetPaymentDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaymentDate.Get(), o.PaymentDate.IsSet()
}

// HasPaymentDate returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasPaymentDate() bool {
	if o != nil && o.PaymentDate.IsSet() {
		return true
	}

	return false
}

// SetPaymentDate gets a reference to the given NullableTime and assigns it to the PaymentDate field.
func (o *TransactionSplitUpdate) SetPaymentDate(v time.Time) {
	o.PaymentDate.Set(&v)
}
// SetPaymentDateNil sets the value for PaymentDate to be an explicit nil
func (o *TransactionSplitUpdate) SetPaymentDateNil() {
	o.PaymentDate.Set(nil)
}

// UnsetPaymentDate ensures that no value is present for PaymentDate, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetPaymentDate() {
	o.PaymentDate.Unset()
}

// GetInvoiceDate returns the InvoiceDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionSplitUpdate) GetInvoiceDate() time.Time {
	if o == nil || o.InvoiceDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.InvoiceDate.Get()
}

// GetInvoiceDateOk returns a tuple with the InvoiceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionSplitUpdate) GetInvoiceDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InvoiceDate.Get(), o.InvoiceDate.IsSet()
}

// HasInvoiceDate returns a boolean if a field has been set.
func (o *TransactionSplitUpdate) HasInvoiceDate() bool {
	if o != nil && o.InvoiceDate.IsSet() {
		return true
	}

	return false
}

// SetInvoiceDate gets a reference to the given NullableTime and assigns it to the InvoiceDate field.
func (o *TransactionSplitUpdate) SetInvoiceDate(v time.Time) {
	o.InvoiceDate.Set(&v)
}
// SetInvoiceDateNil sets the value for InvoiceDate to be an explicit nil
func (o *TransactionSplitUpdate) SetInvoiceDateNil() {
	o.InvoiceDate.Set(nil)
}

// UnsetInvoiceDate ensures that no value is present for InvoiceDate, not even an explicit nil
func (o *TransactionSplitUpdate) UnsetInvoiceDate() {
	o.InvoiceDate.Unset()
}

func (o TransactionSplitUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Order.IsSet() {
		toSerialize["order"] = o.Order.Get()
	}
	if o.CurrencyId.IsSet() {
		toSerialize["currency_id"] = o.CurrencyId.Get()
	}
	if o.CurrencyCode.IsSet() {
		toSerialize["currency_code"] = o.CurrencyCode.Get()
	}
	if o.CurrencySymbol != nil {
		toSerialize["currency_symbol"] = o.CurrencySymbol
	}
	if o.CurrencyName != nil {
		toSerialize["currency_name"] = o.CurrencyName
	}
	if o.CurrencyDecimalPlaces != nil {
		toSerialize["currency_decimal_places"] = o.CurrencyDecimalPlaces
	}
	if o.ForeignAmount.IsSet() {
		toSerialize["foreign_amount"] = o.ForeignAmount.Get()
	}
	if o.ForeignCurrencyId.IsSet() {
		toSerialize["foreign_currency_id"] = o.ForeignCurrencyId.Get()
	}
	if o.ForeignCurrencyCode.IsSet() {
		toSerialize["foreign_currency_code"] = o.ForeignCurrencyCode.Get()
	}
	if o.ForeignCurrencySymbol.IsSet() {
		toSerialize["foreign_currency_symbol"] = o.ForeignCurrencySymbol.Get()
	}
	if o.ForeignCurrencyDecimalPlaces.IsSet() {
		toSerialize["foreign_currency_decimal_places"] = o.ForeignCurrencyDecimalPlaces.Get()
	}
	if o.BudgetId.IsSet() {
		toSerialize["budget_id"] = o.BudgetId.Get()
	}
	if o.BudgetName.IsSet() {
		toSerialize["budget_name"] = o.BudgetName.Get()
	}
	if o.CategoryId.IsSet() {
		toSerialize["category_id"] = o.CategoryId.Get()
	}
	if o.CategoryName.IsSet() {
		toSerialize["category_name"] = o.CategoryName.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["source_id"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["source_name"] = o.SourceName.Get()
	}
	if o.SourceIban.IsSet() {
		toSerialize["source_iban"] = o.SourceIban.Get()
	}
	if o.DestinationId.IsSet() {
		toSerialize["destination_id"] = o.DestinationId.Get()
	}
	if o.DestinationName.IsSet() {
		toSerialize["destination_name"] = o.DestinationName.Get()
	}
	if o.DestinationIban.IsSet() {
		toSerialize["destination_iban"] = o.DestinationIban.Get()
	}
	if o.Reconciled != nil {
		toSerialize["reconciled"] = o.Reconciled
	}
	if o.BillId.IsSet() {
		toSerialize["bill_id"] = o.BillId.Get()
	}
	if o.BillName.IsSet() {
		toSerialize["bill_name"] = o.BillName.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.InternalReference.IsSet() {
		toSerialize["internal_reference"] = o.InternalReference.Get()
	}
	if o.ExternalId.IsSet() {
		toSerialize["external_id"] = o.ExternalId.Get()
	}
	if o.BunqPaymentId.IsSet() {
		toSerialize["bunq_payment_id"] = o.BunqPaymentId.Get()
	}
	if o.SepaCc.IsSet() {
		toSerialize["sepa_cc"] = o.SepaCc.Get()
	}
	if o.SepaCtOp.IsSet() {
		toSerialize["sepa_ct_op"] = o.SepaCtOp.Get()
	}
	if o.SepaCtId.IsSet() {
		toSerialize["sepa_ct_id"] = o.SepaCtId.Get()
	}
	if o.SepaDb.IsSet() {
		toSerialize["sepa_db"] = o.SepaDb.Get()
	}
	if o.SepaCountry.IsSet() {
		toSerialize["sepa_country"] = o.SepaCountry.Get()
	}
	if o.SepaEp.IsSet() {
		toSerialize["sepa_ep"] = o.SepaEp.Get()
	}
	if o.SepaCi.IsSet() {
		toSerialize["sepa_ci"] = o.SepaCi.Get()
	}
	if o.SepaBatchId.IsSet() {
		toSerialize["sepa_batch_id"] = o.SepaBatchId.Get()
	}
	if o.InterestDate.IsSet() {
		toSerialize["interest_date"] = o.InterestDate.Get()
	}
	if o.BookDate.IsSet() {
		toSerialize["book_date"] = o.BookDate.Get()
	}
	if o.ProcessDate.IsSet() {
		toSerialize["process_date"] = o.ProcessDate.Get()
	}
	if o.DueDate.IsSet() {
		toSerialize["due_date"] = o.DueDate.Get()
	}
	if o.PaymentDate.IsSet() {
		toSerialize["payment_date"] = o.PaymentDate.Get()
	}
	if o.InvoiceDate.IsSet() {
		toSerialize["invoice_date"] = o.InvoiceDate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionSplitUpdate struct {
	value *TransactionSplitUpdate
	isSet bool
}

func (v NullableTransactionSplitUpdate) Get() *TransactionSplitUpdate {
	return v.value
}

func (v *NullableTransactionSplitUpdate) Set(val *TransactionSplitUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionSplitUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionSplitUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionSplitUpdate(val *TransactionSplitUpdate) *NullableTransactionSplitUpdate {
	return &NullableTransactionSplitUpdate{value: val, isSet: true}
}

func (v NullableTransactionSplitUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionSplitUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


