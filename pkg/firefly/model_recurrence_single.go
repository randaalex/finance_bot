/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// RecurrenceSingle struct for RecurrenceSingle
type RecurrenceSingle struct {
	Data RecurrenceRead `json:"data"`
}

// NewRecurrenceSingle instantiates a new RecurrenceSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrenceSingle(data RecurrenceRead) *RecurrenceSingle {
	this := RecurrenceSingle{}
	this.Data = data
	return &this
}

// NewRecurrenceSingleWithDefaults instantiates a new RecurrenceSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceSingleWithDefaults() *RecurrenceSingle {
	this := RecurrenceSingle{}
	return &this
}

// GetData returns the Data field value
func (o *RecurrenceSingle) GetData() RecurrenceRead {
	if o == nil {
		var ret RecurrenceRead
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *RecurrenceSingle) GetDataOk() (*RecurrenceRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *RecurrenceSingle) SetData(v RecurrenceRead) {
	o.Data = v
}

func (o RecurrenceSingle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrenceSingle struct {
	value *RecurrenceSingle
	isSet bool
}

func (v NullableRecurrenceSingle) Get() *RecurrenceSingle {
	return v.value
}

func (v *NullableRecurrenceSingle) Set(val *RecurrenceSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrenceSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrenceSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrenceSingle(val *RecurrenceSingle) *NullableRecurrenceSingle {
	return &NullableRecurrenceSingle{value: val, isSet: true}
}

func (v NullableRecurrenceSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrenceSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


