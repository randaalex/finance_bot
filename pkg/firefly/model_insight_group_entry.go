/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// InsightGroupEntry struct for InsightGroupEntry
type InsightGroupEntry struct {
	// This ID is a reference to the original object.
	Id *string `json:"id,omitempty"`
	// This is the name of the object.
	Name *string `json:"name,omitempty"`
	// The amount spent or earned between start date and end date, a number defined as a string, for this object and all asset accounts.
	Difference *string `json:"difference,omitempty"`
	// The amount spent or earned between start date and end date, a number as a float, for this object and all asset accounts. May have rounding errors.
	DifferenceFloat *float64 `json:"difference_float,omitempty"`
	// The currency ID of the expenses listed for this account.
	CurrencyId *string `json:"currency_id,omitempty"`
	// The currency code of the expenses listed for this account.
	CurrencyCode *string `json:"currency_code,omitempty"`
}

// NewInsightGroupEntry instantiates a new InsightGroupEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInsightGroupEntry() *InsightGroupEntry {
	this := InsightGroupEntry{}
	return &this
}

// NewInsightGroupEntryWithDefaults instantiates a new InsightGroupEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInsightGroupEntryWithDefaults() *InsightGroupEntry {
	this := InsightGroupEntry{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InsightGroupEntry) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightGroupEntry) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InsightGroupEntry) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *InsightGroupEntry) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InsightGroupEntry) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightGroupEntry) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InsightGroupEntry) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InsightGroupEntry) SetName(v string) {
	o.Name = &v
}

// GetDifference returns the Difference field value if set, zero value otherwise.
func (o *InsightGroupEntry) GetDifference() string {
	if o == nil || o.Difference == nil {
		var ret string
		return ret
	}
	return *o.Difference
}

// GetDifferenceOk returns a tuple with the Difference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightGroupEntry) GetDifferenceOk() (*string, bool) {
	if o == nil || o.Difference == nil {
		return nil, false
	}
	return o.Difference, true
}

// HasDifference returns a boolean if a field has been set.
func (o *InsightGroupEntry) HasDifference() bool {
	if o != nil && o.Difference != nil {
		return true
	}

	return false
}

// SetDifference gets a reference to the given string and assigns it to the Difference field.
func (o *InsightGroupEntry) SetDifference(v string) {
	o.Difference = &v
}

// GetDifferenceFloat returns the DifferenceFloat field value if set, zero value otherwise.
func (o *InsightGroupEntry) GetDifferenceFloat() float64 {
	if o == nil || o.DifferenceFloat == nil {
		var ret float64
		return ret
	}
	return *o.DifferenceFloat
}

// GetDifferenceFloatOk returns a tuple with the DifferenceFloat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightGroupEntry) GetDifferenceFloatOk() (*float64, bool) {
	if o == nil || o.DifferenceFloat == nil {
		return nil, false
	}
	return o.DifferenceFloat, true
}

// HasDifferenceFloat returns a boolean if a field has been set.
func (o *InsightGroupEntry) HasDifferenceFloat() bool {
	if o != nil && o.DifferenceFloat != nil {
		return true
	}

	return false
}

// SetDifferenceFloat gets a reference to the given float64 and assigns it to the DifferenceFloat field.
func (o *InsightGroupEntry) SetDifferenceFloat(v float64) {
	o.DifferenceFloat = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *InsightGroupEntry) GetCurrencyId() string {
	if o == nil || o.CurrencyId == nil {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightGroupEntry) GetCurrencyIdOk() (*string, bool) {
	if o == nil || o.CurrencyId == nil {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *InsightGroupEntry) HasCurrencyId() bool {
	if o != nil && o.CurrencyId != nil {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *InsightGroupEntry) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *InsightGroupEntry) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InsightGroupEntry) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || o.CurrencyCode == nil {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *InsightGroupEntry) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode != nil {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *InsightGroupEntry) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

func (o InsightGroupEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Difference != nil {
		toSerialize["difference"] = o.Difference
	}
	if o.DifferenceFloat != nil {
		toSerialize["difference_float"] = o.DifferenceFloat
	}
	if o.CurrencyId != nil {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if o.CurrencyCode != nil {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	return json.Marshal(toSerialize)
}

type NullableInsightGroupEntry struct {
	value *InsightGroupEntry
	isSet bool
}

func (v NullableInsightGroupEntry) Get() *InsightGroupEntry {
	return v.value
}

func (v *NullableInsightGroupEntry) Set(val *InsightGroupEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableInsightGroupEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableInsightGroupEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInsightGroupEntry(val *InsightGroupEntry) *NullableInsightGroupEntry {
	return &NullableInsightGroupEntry{value: val, isSet: true}
}

func (v NullableInsightGroupEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInsightGroupEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


