/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// WebhookStore struct for WebhookStore
type WebhookStore struct {
	// Boolean to indicate if the webhook is active
	Active *bool `json:"active,omitempty"`
	// A title for the webhook for easy recognition.
	Title string `json:"title"`
	// The trigger for the webhook.
	Trigger string `json:"trigger"`
	// Indicator for what Firefly III will deliver to the webhook URL.
	Response string `json:"response"`
	// Format of the delivered response.
	Delivery string `json:"delivery"`
	// The URL of the webhook. Has to start with `https`.
	Url string `json:"url"`
}

// NewWebhookStore instantiates a new WebhookStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookStore(title string, trigger string, response string, delivery string, url string) *WebhookStore {
	this := WebhookStore{}
	this.Title = title
	this.Trigger = trigger
	this.Response = response
	this.Delivery = delivery
	this.Url = url
	return &this
}

// NewWebhookStoreWithDefaults instantiates a new WebhookStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookStoreWithDefaults() *WebhookStore {
	this := WebhookStore{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *WebhookStore) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookStore) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *WebhookStore) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *WebhookStore) SetActive(v bool) {
	o.Active = &v
}

// GetTitle returns the Title field value
func (o *WebhookStore) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *WebhookStore) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *WebhookStore) SetTitle(v string) {
	o.Title = v
}

// GetTrigger returns the Trigger field value
func (o *WebhookStore) GetTrigger() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *WebhookStore) GetTriggerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value
func (o *WebhookStore) SetTrigger(v string) {
	o.Trigger = v
}

// GetResponse returns the Response field value
func (o *WebhookStore) GetResponse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *WebhookStore) GetResponseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *WebhookStore) SetResponse(v string) {
	o.Response = v
}

// GetDelivery returns the Delivery field value
func (o *WebhookStore) GetDelivery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Delivery
}

// GetDeliveryOk returns a tuple with the Delivery field value
// and a boolean to check if the value has been set.
func (o *WebhookStore) GetDeliveryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Delivery, true
}

// SetDelivery sets field value
func (o *WebhookStore) SetDelivery(v string) {
	o.Delivery = v
}

// GetUrl returns the Url field value
func (o *WebhookStore) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebhookStore) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebhookStore) SetUrl(v string) {
	o.Url = v
}

func (o WebhookStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["trigger"] = o.Trigger
	}
	if true {
		toSerialize["response"] = o.Response
	}
	if true {
		toSerialize["delivery"] = o.Delivery
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableWebhookStore struct {
	value *WebhookStore
	isSet bool
}

func (v NullableWebhookStore) Get() *WebhookStore {
	return v.value
}

func (v *NullableWebhookStore) Set(val *WebhookStore) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookStore) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookStore(val *WebhookStore) *NullableWebhookStore {
	return &NullableWebhookStore{value: val, isSet: true}
}

func (v NullableWebhookStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


