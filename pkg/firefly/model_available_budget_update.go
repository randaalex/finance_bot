/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// AvailableBudgetUpdate struct for AvailableBudgetUpdate
type AvailableBudgetUpdate struct {
	// Use either currency_id or currency_code.
	CurrencyId *string `json:"currency_id,omitempty"`
	// Use either currency_id or currency_code.
	CurrencyCode *string `json:"currency_code,omitempty"`
	Amount *string `json:"amount,omitempty"`
	// Start date of the available budget.
	Start *string `json:"start,omitempty"`
	// End date of the available budget.
	End *string `json:"end,omitempty"`
}

// NewAvailableBudgetUpdate instantiates a new AvailableBudgetUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailableBudgetUpdate() *AvailableBudgetUpdate {
	this := AvailableBudgetUpdate{}
	return &this
}

// NewAvailableBudgetUpdateWithDefaults instantiates a new AvailableBudgetUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableBudgetUpdateWithDefaults() *AvailableBudgetUpdate {
	this := AvailableBudgetUpdate{}
	return &this
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *AvailableBudgetUpdate) GetCurrencyId() string {
	if o == nil || o.CurrencyId == nil {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableBudgetUpdate) GetCurrencyIdOk() (*string, bool) {
	if o == nil || o.CurrencyId == nil {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *AvailableBudgetUpdate) HasCurrencyId() bool {
	if o != nil && o.CurrencyId != nil {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *AvailableBudgetUpdate) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *AvailableBudgetUpdate) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableBudgetUpdate) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || o.CurrencyCode == nil {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *AvailableBudgetUpdate) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode != nil {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *AvailableBudgetUpdate) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AvailableBudgetUpdate) GetAmount() string {
	if o == nil || o.Amount == nil {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableBudgetUpdate) GetAmountOk() (*string, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AvailableBudgetUpdate) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *AvailableBudgetUpdate) SetAmount(v string) {
	o.Amount = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *AvailableBudgetUpdate) GetStart() string {
	if o == nil || o.Start == nil {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableBudgetUpdate) GetStartOk() (*string, bool) {
	if o == nil || o.Start == nil {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *AvailableBudgetUpdate) HasStart() bool {
	if o != nil && o.Start != nil {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *AvailableBudgetUpdate) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *AvailableBudgetUpdate) GetEnd() string {
	if o == nil || o.End == nil {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailableBudgetUpdate) GetEndOk() (*string, bool) {
	if o == nil || o.End == nil {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *AvailableBudgetUpdate) HasEnd() bool {
	if o != nil && o.End != nil {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *AvailableBudgetUpdate) SetEnd(v string) {
	o.End = &v
}

func (o AvailableBudgetUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrencyId != nil {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if o.CurrencyCode != nil {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Start != nil {
		toSerialize["start"] = o.Start
	}
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	return json.Marshal(toSerialize)
}

type NullableAvailableBudgetUpdate struct {
	value *AvailableBudgetUpdate
	isSet bool
}

func (v NullableAvailableBudgetUpdate) Get() *AvailableBudgetUpdate {
	return v.value
}

func (v *NullableAvailableBudgetUpdate) Set(val *AvailableBudgetUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailableBudgetUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailableBudgetUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailableBudgetUpdate(val *AvailableBudgetUpdate) *NullableAvailableBudgetUpdate {
	return &NullableAvailableBudgetUpdate{value: val, isSet: true}
}

func (v NullableAvailableBudgetUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailableBudgetUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


