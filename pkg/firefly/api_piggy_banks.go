/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type PiggyBanksApi interface {

	/*
	 * DeletePiggyBank Delete a piggy bank.
	 * Delete a piggy bank.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id The ID of the piggy bank.
	 * @return ApiDeletePiggyBankRequest
	 */
	DeletePiggyBank(ctx _context.Context, id int32) ApiDeletePiggyBankRequest

	/*
	 * DeletePiggyBankExecute executes the request
	 */
	DeletePiggyBankExecute(r ApiDeletePiggyBankRequest) (*_nethttp.Response, error)

	/*
	 * GetPiggyBank Get a single piggy bank.
	 * Get a single piggy bank.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id The ID of the piggy bank.
	 * @return ApiGetPiggyBankRequest
	 */
	GetPiggyBank(ctx _context.Context, id int32) ApiGetPiggyBankRequest

	/*
	 * GetPiggyBankExecute executes the request
	 * @return PiggyBankSingle
	 */
	GetPiggyBankExecute(r ApiGetPiggyBankRequest) (PiggyBankSingle, *_nethttp.Response, error)

	/*
	 * ListAttachmentByPiggyBank Lists all attachments.
	 * Lists all attachments.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id The ID of the piggy bank.
	 * @return ApiListAttachmentByPiggyBankRequest
	 */
	ListAttachmentByPiggyBank(ctx _context.Context, id int32) ApiListAttachmentByPiggyBankRequest

	/*
	 * ListAttachmentByPiggyBankExecute executes the request
	 * @return AttachmentArray
	 */
	ListAttachmentByPiggyBankExecute(r ApiListAttachmentByPiggyBankRequest) (AttachmentArray, *_nethttp.Response, error)

	/*
	 * ListEventByPiggyBank List all events linked to a piggy bank.
	 * List all events linked to a piggy bank (adding and removing money).
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id The ID of the piggy bank
	 * @return ApiListEventByPiggyBankRequest
	 */
	ListEventByPiggyBank(ctx _context.Context, id int32) ApiListEventByPiggyBankRequest

	/*
	 * ListEventByPiggyBankExecute executes the request
	 * @return PiggyBankEventArray
	 */
	ListEventByPiggyBankExecute(r ApiListEventByPiggyBankRequest) (PiggyBankEventArray, *_nethttp.Response, error)

	/*
	 * ListPiggyBank List all piggy banks.
	 * List all piggy banks.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiListPiggyBankRequest
	 */
	ListPiggyBank(ctx _context.Context) ApiListPiggyBankRequest

	/*
	 * ListPiggyBankExecute executes the request
	 * @return PiggyBankArray
	 */
	ListPiggyBankExecute(r ApiListPiggyBankRequest) (PiggyBankArray, *_nethttp.Response, error)

	/*
	 * StorePiggyBank Store a new piggy bank
	 * Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiStorePiggyBankRequest
	 */
	StorePiggyBank(ctx _context.Context) ApiStorePiggyBankRequest

	/*
	 * StorePiggyBankExecute executes the request
	 * @return PiggyBankSingle
	 */
	StorePiggyBankExecute(r ApiStorePiggyBankRequest) (PiggyBankSingle, *_nethttp.Response, error)

	/*
	 * UpdatePiggyBank Update existing piggy bank.
	 * Update existing piggy bank.
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id The ID of the piggy bank
	 * @return ApiUpdatePiggyBankRequest
	 */
	UpdatePiggyBank(ctx _context.Context, id int32) ApiUpdatePiggyBankRequest

	/*
	 * UpdatePiggyBankExecute executes the request
	 * @return PiggyBankSingle
	 */
	UpdatePiggyBankExecute(r ApiUpdatePiggyBankRequest) (PiggyBankSingle, *_nethttp.Response, error)
}

// PiggyBanksApiService PiggyBanksApi service
type PiggyBanksApiService service

type ApiDeletePiggyBankRequest struct {
	ctx _context.Context
	ApiService PiggyBanksApi
	id int32
}


func (r ApiDeletePiggyBankRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeletePiggyBankExecute(r)
}

/*
 * DeletePiggyBank Delete a piggy bank.
 * Delete a piggy bank.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the piggy bank.
 * @return ApiDeletePiggyBankRequest
 */
func (a *PiggyBanksApiService) DeletePiggyBank(ctx _context.Context, id int32) ApiDeletePiggyBankRequest {
	return ApiDeletePiggyBankRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *PiggyBanksApiService) DeletePiggyBankExecute(r ApiDeletePiggyBankRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PiggyBanksApiService.DeletePiggyBank")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/piggy_banks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPiggyBankRequest struct {
	ctx _context.Context
	ApiService PiggyBanksApi
	id int32
}


func (r ApiGetPiggyBankRequest) Execute() (PiggyBankSingle, *_nethttp.Response, error) {
	return r.ApiService.GetPiggyBankExecute(r)
}

/*
 * GetPiggyBank Get a single piggy bank.
 * Get a single piggy bank.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the piggy bank.
 * @return ApiGetPiggyBankRequest
 */
func (a *PiggyBanksApiService) GetPiggyBank(ctx _context.Context, id int32) ApiGetPiggyBankRequest {
	return ApiGetPiggyBankRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return PiggyBankSingle
 */
func (a *PiggyBanksApiService) GetPiggyBankExecute(r ApiGetPiggyBankRequest) (PiggyBankSingle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PiggyBankSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PiggyBanksApiService.GetPiggyBank")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/piggy_banks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAttachmentByPiggyBankRequest struct {
	ctx _context.Context
	ApiService PiggyBanksApi
	id int32
	page *int32
}

func (r ApiListAttachmentByPiggyBankRequest) Page(page int32) ApiListAttachmentByPiggyBankRequest {
	r.page = &page
	return r
}

func (r ApiListAttachmentByPiggyBankRequest) Execute() (AttachmentArray, *_nethttp.Response, error) {
	return r.ApiService.ListAttachmentByPiggyBankExecute(r)
}

/*
 * ListAttachmentByPiggyBank Lists all attachments.
 * Lists all attachments.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the piggy bank.
 * @return ApiListAttachmentByPiggyBankRequest
 */
func (a *PiggyBanksApiService) ListAttachmentByPiggyBank(ctx _context.Context, id int32) ApiListAttachmentByPiggyBankRequest {
	return ApiListAttachmentByPiggyBankRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return AttachmentArray
 */
func (a *PiggyBanksApiService) ListAttachmentByPiggyBankExecute(r ApiListAttachmentByPiggyBankRequest) (AttachmentArray, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AttachmentArray
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PiggyBanksApiService.ListAttachmentByPiggyBank")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/piggy_banks/{id}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListEventByPiggyBankRequest struct {
	ctx _context.Context
	ApiService PiggyBanksApi
	id int32
	page *int32
}

func (r ApiListEventByPiggyBankRequest) Page(page int32) ApiListEventByPiggyBankRequest {
	r.page = &page
	return r
}

func (r ApiListEventByPiggyBankRequest) Execute() (PiggyBankEventArray, *_nethttp.Response, error) {
	return r.ApiService.ListEventByPiggyBankExecute(r)
}

/*
 * ListEventByPiggyBank List all events linked to a piggy bank.
 * List all events linked to a piggy bank (adding and removing money).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the piggy bank
 * @return ApiListEventByPiggyBankRequest
 */
func (a *PiggyBanksApiService) ListEventByPiggyBank(ctx _context.Context, id int32) ApiListEventByPiggyBankRequest {
	return ApiListEventByPiggyBankRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return PiggyBankEventArray
 */
func (a *PiggyBanksApiService) ListEventByPiggyBankExecute(r ApiListEventByPiggyBankRequest) (PiggyBankEventArray, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PiggyBankEventArray
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PiggyBanksApiService.ListEventByPiggyBank")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/piggy_banks/{id}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPiggyBankRequest struct {
	ctx _context.Context
	ApiService PiggyBanksApi
	page *int32
}

func (r ApiListPiggyBankRequest) Page(page int32) ApiListPiggyBankRequest {
	r.page = &page
	return r
}

func (r ApiListPiggyBankRequest) Execute() (PiggyBankArray, *_nethttp.Response, error) {
	return r.ApiService.ListPiggyBankExecute(r)
}

/*
 * ListPiggyBank List all piggy banks.
 * List all piggy banks.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListPiggyBankRequest
 */
func (a *PiggyBanksApiService) ListPiggyBank(ctx _context.Context) ApiListPiggyBankRequest {
	return ApiListPiggyBankRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PiggyBankArray
 */
func (a *PiggyBanksApiService) ListPiggyBankExecute(r ApiListPiggyBankRequest) (PiggyBankArray, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PiggyBankArray
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PiggyBanksApiService.ListPiggyBank")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/piggy_banks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStorePiggyBankRequest struct {
	ctx _context.Context
	ApiService PiggyBanksApi
	piggyBankStore *PiggyBankStore
}

func (r ApiStorePiggyBankRequest) PiggyBankStore(piggyBankStore PiggyBankStore) ApiStorePiggyBankRequest {
	r.piggyBankStore = &piggyBankStore
	return r
}

func (r ApiStorePiggyBankRequest) Execute() (PiggyBankSingle, *_nethttp.Response, error) {
	return r.ApiService.StorePiggyBankExecute(r)
}

/*
 * StorePiggyBank Store a new piggy bank
 * Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiStorePiggyBankRequest
 */
func (a *PiggyBanksApiService) StorePiggyBank(ctx _context.Context) ApiStorePiggyBankRequest {
	return ApiStorePiggyBankRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return PiggyBankSingle
 */
func (a *PiggyBanksApiService) StorePiggyBankExecute(r ApiStorePiggyBankRequest) (PiggyBankSingle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PiggyBankSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PiggyBanksApiService.StorePiggyBank")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/piggy_banks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.piggyBankStore == nil {
		return localVarReturnValue, nil, reportError("piggyBankStore is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piggyBankStore
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePiggyBankRequest struct {
	ctx _context.Context
	ApiService PiggyBanksApi
	id int32
	piggyBankUpdate *PiggyBankUpdate
}

func (r ApiUpdatePiggyBankRequest) PiggyBankUpdate(piggyBankUpdate PiggyBankUpdate) ApiUpdatePiggyBankRequest {
	r.piggyBankUpdate = &piggyBankUpdate
	return r
}

func (r ApiUpdatePiggyBankRequest) Execute() (PiggyBankSingle, *_nethttp.Response, error) {
	return r.ApiService.UpdatePiggyBankExecute(r)
}

/*
 * UpdatePiggyBank Update existing piggy bank.
 * Update existing piggy bank.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the piggy bank
 * @return ApiUpdatePiggyBankRequest
 */
func (a *PiggyBanksApiService) UpdatePiggyBank(ctx _context.Context, id int32) ApiUpdatePiggyBankRequest {
	return ApiUpdatePiggyBankRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return PiggyBankSingle
 */
func (a *PiggyBanksApiService) UpdatePiggyBankExecute(r ApiUpdatePiggyBankRequest) (PiggyBankSingle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PiggyBankSingle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PiggyBanksApiService.UpdatePiggyBank")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/piggy_banks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.piggyBankUpdate == nil {
		return localVarReturnValue, nil, reportError("piggyBankUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.api+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piggyBankUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
