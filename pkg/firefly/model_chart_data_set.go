/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// ChartDataSet struct for ChartDataSet
type ChartDataSet struct {
	// This is the title of the current set. It can refer to an account, a budget or another object (by name).
	Label *string `json:"label,omitempty"`
	// The currency ID of the currency associated to the data in the entries.
	CurrencyId *string `json:"currency_id,omitempty"`
	CurrencyCode *string `json:"currency_code,omitempty"`
	CurrencySymbol *string `json:"currency_symbol,omitempty"`
	// Number of decimals for the currency associated to the data in the entries.
	CurrencyDecimalPlaces *int32 `json:"currency_decimal_places,omitempty"`
	// Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want.
	Type *string `json:"type,omitempty"`
	// Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart).
	YAxisID *int32 `json:"yAxisID,omitempty"`
	// The actual entries for this data set. They 'key' value is the label for the data point. The value is the actual (numerical) value.
	Entries *[]ChartDataPoint `json:"entries,omitempty"`
}

// NewChartDataSet instantiates a new ChartDataSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartDataSet() *ChartDataSet {
	this := ChartDataSet{}
	return &this
}

// NewChartDataSetWithDefaults instantiates a new ChartDataSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartDataSetWithDefaults() *ChartDataSet {
	this := ChartDataSet{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ChartDataSet) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataSet) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ChartDataSet) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ChartDataSet) SetLabel(v string) {
	o.Label = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *ChartDataSet) GetCurrencyId() string {
	if o == nil || o.CurrencyId == nil {
		var ret string
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataSet) GetCurrencyIdOk() (*string, bool) {
	if o == nil || o.CurrencyId == nil {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *ChartDataSet) HasCurrencyId() bool {
	if o != nil && o.CurrencyId != nil {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given string and assigns it to the CurrencyId field.
func (o *ChartDataSet) SetCurrencyId(v string) {
	o.CurrencyId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *ChartDataSet) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataSet) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || o.CurrencyCode == nil {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *ChartDataSet) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode != nil {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *ChartDataSet) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *ChartDataSet) GetCurrencySymbol() string {
	if o == nil || o.CurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataSet) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || o.CurrencySymbol == nil {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *ChartDataSet) HasCurrencySymbol() bool {
	if o != nil && o.CurrencySymbol != nil {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *ChartDataSet) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetCurrencyDecimalPlaces returns the CurrencyDecimalPlaces field value if set, zero value otherwise.
func (o *ChartDataSet) GetCurrencyDecimalPlaces() int32 {
	if o == nil || o.CurrencyDecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.CurrencyDecimalPlaces
}

// GetCurrencyDecimalPlacesOk returns a tuple with the CurrencyDecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataSet) GetCurrencyDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.CurrencyDecimalPlaces == nil {
		return nil, false
	}
	return o.CurrencyDecimalPlaces, true
}

// HasCurrencyDecimalPlaces returns a boolean if a field has been set.
func (o *ChartDataSet) HasCurrencyDecimalPlaces() bool {
	if o != nil && o.CurrencyDecimalPlaces != nil {
		return true
	}

	return false
}

// SetCurrencyDecimalPlaces gets a reference to the given int32 and assigns it to the CurrencyDecimalPlaces field.
func (o *ChartDataSet) SetCurrencyDecimalPlaces(v int32) {
	o.CurrencyDecimalPlaces = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ChartDataSet) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataSet) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ChartDataSet) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ChartDataSet) SetType(v string) {
	o.Type = &v
}

// GetYAxisID returns the YAxisID field value if set, zero value otherwise.
func (o *ChartDataSet) GetYAxisID() int32 {
	if o == nil || o.YAxisID == nil {
		var ret int32
		return ret
	}
	return *o.YAxisID
}

// GetYAxisIDOk returns a tuple with the YAxisID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataSet) GetYAxisIDOk() (*int32, bool) {
	if o == nil || o.YAxisID == nil {
		return nil, false
	}
	return o.YAxisID, true
}

// HasYAxisID returns a boolean if a field has been set.
func (o *ChartDataSet) HasYAxisID() bool {
	if o != nil && o.YAxisID != nil {
		return true
	}

	return false
}

// SetYAxisID gets a reference to the given int32 and assigns it to the YAxisID field.
func (o *ChartDataSet) SetYAxisID(v int32) {
	o.YAxisID = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *ChartDataSet) GetEntries() []ChartDataPoint {
	if o == nil || o.Entries == nil {
		var ret []ChartDataPoint
		return ret
	}
	return *o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartDataSet) GetEntriesOk() (*[]ChartDataPoint, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *ChartDataSet) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []ChartDataPoint and assigns it to the Entries field.
func (o *ChartDataSet) SetEntries(v []ChartDataPoint) {
	o.Entries = &v
}

func (o ChartDataSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.CurrencyId != nil {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if o.CurrencyCode != nil {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if o.CurrencySymbol != nil {
		toSerialize["currency_symbol"] = o.CurrencySymbol
	}
	if o.CurrencyDecimalPlaces != nil {
		toSerialize["currency_decimal_places"] = o.CurrencyDecimalPlaces
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.YAxisID != nil {
		toSerialize["yAxisID"] = o.YAxisID
	}
	if o.Entries != nil {
		toSerialize["entries"] = o.Entries
	}
	return json.Marshal(toSerialize)
}

type NullableChartDataSet struct {
	value *ChartDataSet
	isSet bool
}

func (v NullableChartDataSet) Get() *ChartDataSet {
	return v.value
}

func (v *NullableChartDataSet) Set(val *ChartDataSet) {
	v.value = val
	v.isSet = true
}

func (v NullableChartDataSet) IsSet() bool {
	return v.isSet
}

func (v *NullableChartDataSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartDataSet(val *ChartDataSet) *NullableChartDataSet {
	return &NullableChartDataSet{value: val, isSet: true}
}

func (v NullableChartDataSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartDataSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


