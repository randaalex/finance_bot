/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// CronResultRow struct for CronResultRow
type CronResultRow struct {
	// This value tells you if this specific cron job actually fired. It may not fire. Some cron jobs only fire every 24 hours, for example. 
	JobFired NullableBool `json:"job_fired,omitempty"`
	// This value tells you if this specific cron job actually did something. The job may fire but not change anything. 
	JobSucceeded NullableBool `json:"job_succeeded,omitempty"`
	// If the cron job ran into some kind of an error, this value will be true.
	JobErrored NullableBool `json:"job_errored,omitempty"`
	// If the cron job ran into some kind of an error, this value will be the error message. The success message if the job actually ran OK. 
	Message NullableString `json:"message,omitempty"`
}

// NewCronResultRow instantiates a new CronResultRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCronResultRow() *CronResultRow {
	this := CronResultRow{}
	return &this
}

// NewCronResultRowWithDefaults instantiates a new CronResultRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCronResultRowWithDefaults() *CronResultRow {
	this := CronResultRow{}
	return &this
}

// GetJobFired returns the JobFired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CronResultRow) GetJobFired() bool {
	if o == nil || o.JobFired.Get() == nil {
		var ret bool
		return ret
	}
	return *o.JobFired.Get()
}

// GetJobFiredOk returns a tuple with the JobFired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CronResultRow) GetJobFiredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobFired.Get(), o.JobFired.IsSet()
}

// HasJobFired returns a boolean if a field has been set.
func (o *CronResultRow) HasJobFired() bool {
	if o != nil && o.JobFired.IsSet() {
		return true
	}

	return false
}

// SetJobFired gets a reference to the given NullableBool and assigns it to the JobFired field.
func (o *CronResultRow) SetJobFired(v bool) {
	o.JobFired.Set(&v)
}
// SetJobFiredNil sets the value for JobFired to be an explicit nil
func (o *CronResultRow) SetJobFiredNil() {
	o.JobFired.Set(nil)
}

// UnsetJobFired ensures that no value is present for JobFired, not even an explicit nil
func (o *CronResultRow) UnsetJobFired() {
	o.JobFired.Unset()
}

// GetJobSucceeded returns the JobSucceeded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CronResultRow) GetJobSucceeded() bool {
	if o == nil || o.JobSucceeded.Get() == nil {
		var ret bool
		return ret
	}
	return *o.JobSucceeded.Get()
}

// GetJobSucceededOk returns a tuple with the JobSucceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CronResultRow) GetJobSucceededOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobSucceeded.Get(), o.JobSucceeded.IsSet()
}

// HasJobSucceeded returns a boolean if a field has been set.
func (o *CronResultRow) HasJobSucceeded() bool {
	if o != nil && o.JobSucceeded.IsSet() {
		return true
	}

	return false
}

// SetJobSucceeded gets a reference to the given NullableBool and assigns it to the JobSucceeded field.
func (o *CronResultRow) SetJobSucceeded(v bool) {
	o.JobSucceeded.Set(&v)
}
// SetJobSucceededNil sets the value for JobSucceeded to be an explicit nil
func (o *CronResultRow) SetJobSucceededNil() {
	o.JobSucceeded.Set(nil)
}

// UnsetJobSucceeded ensures that no value is present for JobSucceeded, not even an explicit nil
func (o *CronResultRow) UnsetJobSucceeded() {
	o.JobSucceeded.Unset()
}

// GetJobErrored returns the JobErrored field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CronResultRow) GetJobErrored() bool {
	if o == nil || o.JobErrored.Get() == nil {
		var ret bool
		return ret
	}
	return *o.JobErrored.Get()
}

// GetJobErroredOk returns a tuple with the JobErrored field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CronResultRow) GetJobErroredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobErrored.Get(), o.JobErrored.IsSet()
}

// HasJobErrored returns a boolean if a field has been set.
func (o *CronResultRow) HasJobErrored() bool {
	if o != nil && o.JobErrored.IsSet() {
		return true
	}

	return false
}

// SetJobErrored gets a reference to the given NullableBool and assigns it to the JobErrored field.
func (o *CronResultRow) SetJobErrored(v bool) {
	o.JobErrored.Set(&v)
}
// SetJobErroredNil sets the value for JobErrored to be an explicit nil
func (o *CronResultRow) SetJobErroredNil() {
	o.JobErrored.Set(nil)
}

// UnsetJobErrored ensures that no value is present for JobErrored, not even an explicit nil
func (o *CronResultRow) UnsetJobErrored() {
	o.JobErrored.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CronResultRow) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CronResultRow) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *CronResultRow) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *CronResultRow) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *CronResultRow) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *CronResultRow) UnsetMessage() {
	o.Message.Unset()
}

func (o CronResultRow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JobFired.IsSet() {
		toSerialize["job_fired"] = o.JobFired.Get()
	}
	if o.JobSucceeded.IsSet() {
		toSerialize["job_succeeded"] = o.JobSucceeded.Get()
	}
	if o.JobErrored.IsSet() {
		toSerialize["job_errored"] = o.JobErrored.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCronResultRow struct {
	value *CronResultRow
	isSet bool
}

func (v NullableCronResultRow) Get() *CronResultRow {
	return v.value
}

func (v *NullableCronResultRow) Set(val *CronResultRow) {
	v.value = val
	v.isSet = true
}

func (v NullableCronResultRow) IsSet() bool {
	return v.isSet
}

func (v *NullableCronResultRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCronResultRow(val *CronResultRow) *NullableCronResultRow {
	return &NullableCronResultRow{value: val, isSet: true}
}

func (v NullableCronResultRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCronResultRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


