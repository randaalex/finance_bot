/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// ValidationErrorErrors struct for ValidationErrorErrors
type ValidationErrorErrors struct {
	Field1 *[]string `json:"field1,omitempty"`
	Field2 *[]string `json:"field2,omitempty"`
}

// NewValidationErrorErrors instantiates a new ValidationErrorErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationErrorErrors() *ValidationErrorErrors {
	this := ValidationErrorErrors{}
	return &this
}

// NewValidationErrorErrorsWithDefaults instantiates a new ValidationErrorErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationErrorErrorsWithDefaults() *ValidationErrorErrors {
	this := ValidationErrorErrors{}
	return &this
}

// GetField1 returns the Field1 field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetField1() []string {
	if o == nil || o.Field1 == nil {
		var ret []string
		return ret
	}
	return *o.Field1
}

// GetField1Ok returns a tuple with the Field1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetField1Ok() (*[]string, bool) {
	if o == nil || o.Field1 == nil {
		return nil, false
	}
	return o.Field1, true
}

// HasField1 returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasField1() bool {
	if o != nil && o.Field1 != nil {
		return true
	}

	return false
}

// SetField1 gets a reference to the given []string and assigns it to the Field1 field.
func (o *ValidationErrorErrors) SetField1(v []string) {
	o.Field1 = &v
}

// GetField2 returns the Field2 field value if set, zero value otherwise.
func (o *ValidationErrorErrors) GetField2() []string {
	if o == nil || o.Field2 == nil {
		var ret []string
		return ret
	}
	return *o.Field2
}

// GetField2Ok returns a tuple with the Field2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorErrors) GetField2Ok() (*[]string, bool) {
	if o == nil || o.Field2 == nil {
		return nil, false
	}
	return o.Field2, true
}

// HasField2 returns a boolean if a field has been set.
func (o *ValidationErrorErrors) HasField2() bool {
	if o != nil && o.Field2 != nil {
		return true
	}

	return false
}

// SetField2 gets a reference to the given []string and assigns it to the Field2 field.
func (o *ValidationErrorErrors) SetField2(v []string) {
	o.Field2 = &v
}

func (o ValidationErrorErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Field1 != nil {
		toSerialize["field1"] = o.Field1
	}
	if o.Field2 != nil {
		toSerialize["field2"] = o.Field2
	}
	return json.Marshal(toSerialize)
}

type NullableValidationErrorErrors struct {
	value *ValidationErrorErrors
	isSet bool
}

func (v NullableValidationErrorErrors) Get() *ValidationErrorErrors {
	return v.value
}

func (v *NullableValidationErrorErrors) Set(val *ValidationErrorErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationErrorErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationErrorErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationErrorErrors(val *ValidationErrorErrors) *NullableValidationErrorErrors {
	return &NullableValidationErrorErrors{value: val, isSet: true}
}

func (v NullableValidationErrorErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationErrorErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


