/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// TagModelStore struct for TagModelStore
type TagModelStore struct {
	// The tag
	Tag string `json:"tag"`
	// The date to which the tag is applicable.
	Date NullableString `json:"date,omitempty"`
	Description NullableString `json:"description,omitempty"`
	// Latitude of the tag's location, if applicable. Can be used to draw a map.
	Latitude NullableFloat64 `json:"latitude,omitempty"`
	// Latitude of the tag's location, if applicable. Can be used to draw a map.
	Longitude NullableFloat64 `json:"longitude,omitempty"`
	// Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
	ZoomLevel NullableInt32 `json:"zoom_level,omitempty"`
}

// NewTagModelStore instantiates a new TagModelStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagModelStore(tag string) *TagModelStore {
	this := TagModelStore{}
	this.Tag = tag
	return &this
}

// NewTagModelStoreWithDefaults instantiates a new TagModelStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagModelStoreWithDefaults() *TagModelStore {
	this := TagModelStore{}
	return &this
}

// GetTag returns the Tag field value
func (o *TagModelStore) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *TagModelStore) GetTagOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *TagModelStore) SetTag(v string) {
	o.Tag = v
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagModelStore) GetDate() string {
	if o == nil || o.Date.Get() == nil {
		var ret string
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagModelStore) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *TagModelStore) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableString and assigns it to the Date field.
func (o *TagModelStore) SetDate(v string) {
	o.Date.Set(&v)
}
// SetDateNil sets the value for Date to be an explicit nil
func (o *TagModelStore) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *TagModelStore) UnsetDate() {
	o.Date.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagModelStore) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagModelStore) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TagModelStore) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TagModelStore) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TagModelStore) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TagModelStore) UnsetDescription() {
	o.Description.Unset()
}

// GetLatitude returns the Latitude field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagModelStore) GetLatitude() float64 {
	if o == nil || o.Latitude.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Latitude.Get()
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagModelStore) GetLatitudeOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Latitude.Get(), o.Latitude.IsSet()
}

// HasLatitude returns a boolean if a field has been set.
func (o *TagModelStore) HasLatitude() bool {
	if o != nil && o.Latitude.IsSet() {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given NullableFloat64 and assigns it to the Latitude field.
func (o *TagModelStore) SetLatitude(v float64) {
	o.Latitude.Set(&v)
}
// SetLatitudeNil sets the value for Latitude to be an explicit nil
func (o *TagModelStore) SetLatitudeNil() {
	o.Latitude.Set(nil)
}

// UnsetLatitude ensures that no value is present for Latitude, not even an explicit nil
func (o *TagModelStore) UnsetLatitude() {
	o.Latitude.Unset()
}

// GetLongitude returns the Longitude field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagModelStore) GetLongitude() float64 {
	if o == nil || o.Longitude.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Longitude.Get()
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagModelStore) GetLongitudeOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Longitude.Get(), o.Longitude.IsSet()
}

// HasLongitude returns a boolean if a field has been set.
func (o *TagModelStore) HasLongitude() bool {
	if o != nil && o.Longitude.IsSet() {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given NullableFloat64 and assigns it to the Longitude field.
func (o *TagModelStore) SetLongitude(v float64) {
	o.Longitude.Set(&v)
}
// SetLongitudeNil sets the value for Longitude to be an explicit nil
func (o *TagModelStore) SetLongitudeNil() {
	o.Longitude.Set(nil)
}

// UnsetLongitude ensures that no value is present for Longitude, not even an explicit nil
func (o *TagModelStore) UnsetLongitude() {
	o.Longitude.Unset()
}

// GetZoomLevel returns the ZoomLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagModelStore) GetZoomLevel() int32 {
	if o == nil || o.ZoomLevel.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ZoomLevel.Get()
}

// GetZoomLevelOk returns a tuple with the ZoomLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagModelStore) GetZoomLevelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ZoomLevel.Get(), o.ZoomLevel.IsSet()
}

// HasZoomLevel returns a boolean if a field has been set.
func (o *TagModelStore) HasZoomLevel() bool {
	if o != nil && o.ZoomLevel.IsSet() {
		return true
	}

	return false
}

// SetZoomLevel gets a reference to the given NullableInt32 and assigns it to the ZoomLevel field.
func (o *TagModelStore) SetZoomLevel(v int32) {
	o.ZoomLevel.Set(&v)
}
// SetZoomLevelNil sets the value for ZoomLevel to be an explicit nil
func (o *TagModelStore) SetZoomLevelNil() {
	o.ZoomLevel.Set(nil)
}

// UnsetZoomLevel ensures that no value is present for ZoomLevel, not even an explicit nil
func (o *TagModelStore) UnsetZoomLevel() {
	o.ZoomLevel.Unset()
}

func (o TagModelStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tag"] = o.Tag
	}
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Latitude.IsSet() {
		toSerialize["latitude"] = o.Latitude.Get()
	}
	if o.Longitude.IsSet() {
		toSerialize["longitude"] = o.Longitude.Get()
	}
	if o.ZoomLevel.IsSet() {
		toSerialize["zoom_level"] = o.ZoomLevel.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTagModelStore struct {
	value *TagModelStore
	isSet bool
}

func (v NullableTagModelStore) Get() *TagModelStore {
	return v.value
}

func (v *NullableTagModelStore) Set(val *TagModelStore) {
	v.value = val
	v.isSet = true
}

func (v NullableTagModelStore) IsSet() bool {
	return v.isSet
}

func (v *NullableTagModelStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagModelStore(val *TagModelStore) *NullableTagModelStore {
	return &NullableTagModelStore{value: val, isSet: true}
}

func (v NullableTagModelStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagModelStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


