/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"time"
)

// TransactionLink struct for TransactionLink
type TransactionLink struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The link type ID to use. You can also use the link_type_name field.
	LinkTypeId int32 `json:"link_type_id"`
	// The link type name to use. You can also use the link_type_id field.
	LinkTypeName *string `json:"link_type_name,omitempty"`
	// The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set.
	InwardId int32 `json:"inward_id"`
	// The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set.
	OutwardId int32 `json:"outward_id"`
	// Optional. Some notes.
	Notes *string `json:"notes,omitempty"`
}

// NewTransactionLink instantiates a new TransactionLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionLink(linkTypeId int32, inwardId int32, outwardId int32) *TransactionLink {
	this := TransactionLink{}
	this.LinkTypeId = linkTypeId
	this.InwardId = inwardId
	this.OutwardId = outwardId
	return &this
}

// NewTransactionLinkWithDefaults instantiates a new TransactionLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionLinkWithDefaults() *TransactionLink {
	this := TransactionLink{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TransactionLink) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionLink) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TransactionLink) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TransactionLink) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TransactionLink) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionLink) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TransactionLink) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *TransactionLink) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLinkTypeId returns the LinkTypeId field value
func (o *TransactionLink) GetLinkTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LinkTypeId
}

// GetLinkTypeIdOk returns a tuple with the LinkTypeId field value
// and a boolean to check if the value has been set.
func (o *TransactionLink) GetLinkTypeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LinkTypeId, true
}

// SetLinkTypeId sets field value
func (o *TransactionLink) SetLinkTypeId(v int32) {
	o.LinkTypeId = v
}

// GetLinkTypeName returns the LinkTypeName field value if set, zero value otherwise.
func (o *TransactionLink) GetLinkTypeName() string {
	if o == nil || o.LinkTypeName == nil {
		var ret string
		return ret
	}
	return *o.LinkTypeName
}

// GetLinkTypeNameOk returns a tuple with the LinkTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionLink) GetLinkTypeNameOk() (*string, bool) {
	if o == nil || o.LinkTypeName == nil {
		return nil, false
	}
	return o.LinkTypeName, true
}

// HasLinkTypeName returns a boolean if a field has been set.
func (o *TransactionLink) HasLinkTypeName() bool {
	if o != nil && o.LinkTypeName != nil {
		return true
	}

	return false
}

// SetLinkTypeName gets a reference to the given string and assigns it to the LinkTypeName field.
func (o *TransactionLink) SetLinkTypeName(v string) {
	o.LinkTypeName = &v
}

// GetInwardId returns the InwardId field value
func (o *TransactionLink) GetInwardId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InwardId
}

// GetInwardIdOk returns a tuple with the InwardId field value
// and a boolean to check if the value has been set.
func (o *TransactionLink) GetInwardIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InwardId, true
}

// SetInwardId sets field value
func (o *TransactionLink) SetInwardId(v int32) {
	o.InwardId = v
}

// GetOutwardId returns the OutwardId field value
func (o *TransactionLink) GetOutwardId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OutwardId
}

// GetOutwardIdOk returns a tuple with the OutwardId field value
// and a boolean to check if the value has been set.
func (o *TransactionLink) GetOutwardIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OutwardId, true
}

// SetOutwardId sets field value
func (o *TransactionLink) SetOutwardId(v int32) {
	o.OutwardId = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TransactionLink) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionLink) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TransactionLink) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TransactionLink) SetNotes(v string) {
	o.Notes = &v
}

func (o TransactionLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["link_type_id"] = o.LinkTypeId
	}
	if o.LinkTypeName != nil {
		toSerialize["link_type_name"] = o.LinkTypeName
	}
	if true {
		toSerialize["inward_id"] = o.InwardId
	}
	if true {
		toSerialize["outward_id"] = o.OutwardId
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionLink struct {
	value *TransactionLink
	isSet bool
}

func (v NullableTransactionLink) Get() *TransactionLink {
	return v.value
}

func (v *NullableTransactionLink) Set(val *TransactionLink) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionLink) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionLink(val *TransactionLink) *NullableTransactionLink {
	return &NullableTransactionLink{value: val, isSet: true}
}

func (v NullableTransactionLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


