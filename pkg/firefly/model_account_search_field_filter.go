/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"fmt"
)

// AccountSearchFieldFilter the model 'AccountSearchFieldFilter'
type AccountSearchFieldFilter string

// List of AccountSearchFieldFilter
const (
	ACCOUNTSEARCHFIELDFILTER_ALL AccountSearchFieldFilter = "all"
	ACCOUNTSEARCHFIELDFILTER_IBAN AccountSearchFieldFilter = "iban"
	ACCOUNTSEARCHFIELDFILTER_NAME AccountSearchFieldFilter = "name"
	ACCOUNTSEARCHFIELDFILTER_NUMBER AccountSearchFieldFilter = "number"
	ACCOUNTSEARCHFIELDFILTER_ID AccountSearchFieldFilter = "id"
)

var allowedAccountSearchFieldFilterEnumValues = []AccountSearchFieldFilter{
	"all",
	"iban",
	"name",
	"number",
	"id",
}

func (v *AccountSearchFieldFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountSearchFieldFilter(value)
	for _, existing := range allowedAccountSearchFieldFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountSearchFieldFilter", value)
}

// NewAccountSearchFieldFilterFromValue returns a pointer to a valid AccountSearchFieldFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountSearchFieldFilterFromValue(v string) (*AccountSearchFieldFilter, error) {
	ev := AccountSearchFieldFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountSearchFieldFilter: valid values are %v", v, allowedAccountSearchFieldFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountSearchFieldFilter) IsValid() bool {
	for _, existing := range allowedAccountSearchFieldFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountSearchFieldFilter value
func (v AccountSearchFieldFilter) Ptr() *AccountSearchFieldFilter {
	return &v
}

type NullableAccountSearchFieldFilter struct {
	value *AccountSearchFieldFilter
	isSet bool
}

func (v NullableAccountSearchFieldFilter) Get() *AccountSearchFieldFilter {
	return v.value
}

func (v *NullableAccountSearchFieldFilter) Set(val *AccountSearchFieldFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSearchFieldFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSearchFieldFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSearchFieldFilter(val *AccountSearchFieldFilter) *NullableAccountSearchFieldFilter {
	return &NullableAccountSearchFieldFilter{value: val, isSet: true}
}

func (v NullableAccountSearchFieldFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSearchFieldFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

