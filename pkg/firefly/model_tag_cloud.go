/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// TagCloud struct for TagCloud
type TagCloud struct {
	Tags *[]TagCloudTag `json:"tags,omitempty"`
}

// NewTagCloud instantiates a new TagCloud object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagCloud() *TagCloud {
	this := TagCloud{}
	return &this
}

// NewTagCloudWithDefaults instantiates a new TagCloud object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagCloudWithDefaults() *TagCloud {
	this := TagCloud{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TagCloud) GetTags() []TagCloudTag {
	if o == nil || o.Tags == nil {
		var ret []TagCloudTag
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCloud) GetTagsOk() (*[]TagCloudTag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TagCloud) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagCloudTag and assigns it to the Tags field.
func (o *TagCloud) SetTags(v []TagCloudTag) {
	o.Tags = &v
}

func (o TagCloud) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableTagCloud struct {
	value *TagCloud
	isSet bool
}

func (v NullableTagCloud) Get() *TagCloud {
	return v.value
}

func (v *NullableTagCloud) Set(val *TagCloud) {
	v.value = val
	v.isSet = true
}

func (v NullableTagCloud) IsSet() bool {
	return v.isSet
}

func (v *NullableTagCloud) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagCloud(val *TagCloud) *NullableTagCloud {
	return &NullableTagCloud{value: val, isSet: true}
}

func (v NullableTagCloud) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagCloud) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


