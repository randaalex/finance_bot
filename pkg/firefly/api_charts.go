/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type ChartsApi interface {

	/*
	 * GetChartAccountOverview Dashboard chart with asset account balance information.
	 * This endpoint returns the data required to generate a chart with basic asset account balance information.

	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetChartAccountOverviewRequest
	 */
	GetChartAccountOverview(ctx _context.Context) ApiGetChartAccountOverviewRequest

	/*
	 * GetChartAccountOverviewExecute executes the request
	 * @return []ChartDataSet
	 */
	GetChartAccountOverviewExecute(r ApiGetChartAccountOverviewRequest) ([]ChartDataSet, *_nethttp.Response, error)
}

// ChartsApiService ChartsApi service
type ChartsApiService service

type ApiGetChartAccountOverviewRequest struct {
	ctx _context.Context
	ApiService ChartsApi
	start *string
	end *string
}

func (r ApiGetChartAccountOverviewRequest) Start(start string) ApiGetChartAccountOverviewRequest {
	r.start = &start
	return r
}
func (r ApiGetChartAccountOverviewRequest) End(end string) ApiGetChartAccountOverviewRequest {
	r.end = &end
	return r
}

func (r ApiGetChartAccountOverviewRequest) Execute() ([]ChartDataSet, *_nethttp.Response, error) {
	return r.ApiService.GetChartAccountOverviewExecute(r)
}

/*
 * GetChartAccountOverview Dashboard chart with asset account balance information.
 * This endpoint returns the data required to generate a chart with basic asset account balance information.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetChartAccountOverviewRequest
 */
func (a *ChartsApiService) GetChartAccountOverview(ctx _context.Context) ApiGetChartAccountOverviewRequest {
	return ApiGetChartAccountOverviewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []ChartDataSet
 */
func (a *ChartsApiService) GetChartAccountOverviewExecute(r ApiGetChartAccountOverviewRequest) ([]ChartDataSet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ChartDataSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartsApiService.GetChartAccountOverview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/chart/account/overview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
