/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ChartsApi interface {

	/*
	 * GetChartABOverview Dashboard chart with an overview of the available budget.
	 * This endpoint returns the data required to generate a pie chart for the available budget.

	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param id The ID of the available budget.
	 * @return ApiGetChartABOverviewRequest
	 */
	GetChartABOverview(ctx _context.Context, id int32) ApiGetChartABOverviewRequest

	/*
	 * GetChartABOverviewExecute executes the request
	 * @return []ChartDataSet
	 */
	GetChartABOverviewExecute(r ApiGetChartABOverviewRequest) ([]ChartDataSet, *_nethttp.Response, error)

	/*
	 * GetChartAccountExpense Dashboard chart with expense account balance information.
	 * This endpoint returns the data required to generate a chart that shows the user how much they've spent on their expense accounts.

	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetChartAccountExpenseRequest
	 */
	GetChartAccountExpense(ctx _context.Context) ApiGetChartAccountExpenseRequest

	/*
	 * GetChartAccountExpenseExecute executes the request
	 * @return []ChartDataSet
	 */
	GetChartAccountExpenseExecute(r ApiGetChartAccountExpenseRequest) ([]ChartDataSet, *_nethttp.Response, error)

	/*
	 * GetChartAccountOverview Dashboard chart with asset account balance information.
	 * This endpoint returns the data required to generate a chart with basic asset account balance information.

	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetChartAccountOverviewRequest
	 */
	GetChartAccountOverview(ctx _context.Context) ApiGetChartAccountOverviewRequest

	/*
	 * GetChartAccountOverviewExecute executes the request
	 * @return []ChartDataSet
	 */
	GetChartAccountOverviewExecute(r ApiGetChartAccountOverviewRequest) ([]ChartDataSet, *_nethttp.Response, error)

	/*
	 * GetChartAccountRevenue Dashboard chart with revenue account balance information.
	 * This endpoint returns the data required to generate a chart that shows the user how much they've earned from their revenue accounts.

	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetChartAccountRevenueRequest
	 */
	GetChartAccountRevenue(ctx _context.Context) ApiGetChartAccountRevenueRequest

	/*
	 * GetChartAccountRevenueExecute executes the request
	 * @return []ChartDataSet
	 */
	GetChartAccountRevenueExecute(r ApiGetChartAccountRevenueRequest) ([]ChartDataSet, *_nethttp.Response, error)

	/*
	 * GetChartCategoryOverview Dashboard chart with an overview of the users categories.
	 * This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories.

	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetChartCategoryOverviewRequest
	 */
	GetChartCategoryOverview(ctx _context.Context) ApiGetChartCategoryOverviewRequest

	/*
	 * GetChartCategoryOverviewExecute executes the request
	 * @return []ChartDataSet
	 */
	GetChartCategoryOverviewExecute(r ApiGetChartCategoryOverviewRequest) ([]ChartDataSet, *_nethttp.Response, error)
}

// ChartsApiService ChartsApi service
type ChartsApiService service

type ApiGetChartABOverviewRequest struct {
	ctx _context.Context
	ApiService ChartsApi
	id int32
	start *string
	end *string
}

func (r ApiGetChartABOverviewRequest) Start(start string) ApiGetChartABOverviewRequest {
	r.start = &start
	return r
}
func (r ApiGetChartABOverviewRequest) End(end string) ApiGetChartABOverviewRequest {
	r.end = &end
	return r
}

func (r ApiGetChartABOverviewRequest) Execute() ([]ChartDataSet, *_nethttp.Response, error) {
	return r.ApiService.GetChartABOverviewExecute(r)
}

/*
 * GetChartABOverview Dashboard chart with an overview of the available budget.
 * This endpoint returns the data required to generate a pie chart for the available budget.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The ID of the available budget.
 * @return ApiGetChartABOverviewRequest
 */
func (a *ChartsApiService) GetChartABOverview(ctx _context.Context, id int32) ApiGetChartABOverviewRequest {
	return ApiGetChartABOverviewRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 * @return []ChartDataSet
 */
func (a *ChartsApiService) GetChartABOverviewExecute(r ApiGetChartABOverviewRequest) ([]ChartDataSet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ChartDataSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartsApiService.GetChartABOverview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/chart/ab/overview/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChartAccountExpenseRequest struct {
	ctx _context.Context
	ApiService ChartsApi
	start *string
	end *string
}

func (r ApiGetChartAccountExpenseRequest) Start(start string) ApiGetChartAccountExpenseRequest {
	r.start = &start
	return r
}
func (r ApiGetChartAccountExpenseRequest) End(end string) ApiGetChartAccountExpenseRequest {
	r.end = &end
	return r
}

func (r ApiGetChartAccountExpenseRequest) Execute() ([]ChartDataSet, *_nethttp.Response, error) {
	return r.ApiService.GetChartAccountExpenseExecute(r)
}

/*
 * GetChartAccountExpense Dashboard chart with expense account balance information.
 * This endpoint returns the data required to generate a chart that shows the user how much they've spent on their expense accounts.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetChartAccountExpenseRequest
 */
func (a *ChartsApiService) GetChartAccountExpense(ctx _context.Context) ApiGetChartAccountExpenseRequest {
	return ApiGetChartAccountExpenseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []ChartDataSet
 */
func (a *ChartsApiService) GetChartAccountExpenseExecute(r ApiGetChartAccountExpenseRequest) ([]ChartDataSet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ChartDataSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartsApiService.GetChartAccountExpense")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/chart/account/expense"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChartAccountOverviewRequest struct {
	ctx _context.Context
	ApiService ChartsApi
	start *string
	end *string
}

func (r ApiGetChartAccountOverviewRequest) Start(start string) ApiGetChartAccountOverviewRequest {
	r.start = &start
	return r
}
func (r ApiGetChartAccountOverviewRequest) End(end string) ApiGetChartAccountOverviewRequest {
	r.end = &end
	return r
}

func (r ApiGetChartAccountOverviewRequest) Execute() ([]ChartDataSet, *_nethttp.Response, error) {
	return r.ApiService.GetChartAccountOverviewExecute(r)
}

/*
 * GetChartAccountOverview Dashboard chart with asset account balance information.
 * This endpoint returns the data required to generate a chart with basic asset account balance information.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetChartAccountOverviewRequest
 */
func (a *ChartsApiService) GetChartAccountOverview(ctx _context.Context) ApiGetChartAccountOverviewRequest {
	return ApiGetChartAccountOverviewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []ChartDataSet
 */
func (a *ChartsApiService) GetChartAccountOverviewExecute(r ApiGetChartAccountOverviewRequest) ([]ChartDataSet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ChartDataSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartsApiService.GetChartAccountOverview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/chart/account/overview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChartAccountRevenueRequest struct {
	ctx _context.Context
	ApiService ChartsApi
	start *string
	end *string
}

func (r ApiGetChartAccountRevenueRequest) Start(start string) ApiGetChartAccountRevenueRequest {
	r.start = &start
	return r
}
func (r ApiGetChartAccountRevenueRequest) End(end string) ApiGetChartAccountRevenueRequest {
	r.end = &end
	return r
}

func (r ApiGetChartAccountRevenueRequest) Execute() ([]ChartDataSet, *_nethttp.Response, error) {
	return r.ApiService.GetChartAccountRevenueExecute(r)
}

/*
 * GetChartAccountRevenue Dashboard chart with revenue account balance information.
 * This endpoint returns the data required to generate a chart that shows the user how much they've earned from their revenue accounts.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetChartAccountRevenueRequest
 */
func (a *ChartsApiService) GetChartAccountRevenue(ctx _context.Context) ApiGetChartAccountRevenueRequest {
	return ApiGetChartAccountRevenueRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []ChartDataSet
 */
func (a *ChartsApiService) GetChartAccountRevenueExecute(r ApiGetChartAccountRevenueRequest) ([]ChartDataSet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ChartDataSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartsApiService.GetChartAccountRevenue")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/chart/account/revenue"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChartCategoryOverviewRequest struct {
	ctx _context.Context
	ApiService ChartsApi
	start *string
	end *string
}

func (r ApiGetChartCategoryOverviewRequest) Start(start string) ApiGetChartCategoryOverviewRequest {
	r.start = &start
	return r
}
func (r ApiGetChartCategoryOverviewRequest) End(end string) ApiGetChartCategoryOverviewRequest {
	r.end = &end
	return r
}

func (r ApiGetChartCategoryOverviewRequest) Execute() ([]ChartDataSet, *_nethttp.Response, error) {
	return r.ApiService.GetChartCategoryOverviewExecute(r)
}

/*
 * GetChartCategoryOverview Dashboard chart with an overview of the users categories.
 * This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetChartCategoryOverviewRequest
 */
func (a *ChartsApiService) GetChartCategoryOverview(ctx _context.Context) ApiGetChartCategoryOverviewRequest {
	return ApiGetChartCategoryOverviewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []ChartDataSet
 */
func (a *ChartsApiService) GetChartCategoryOverviewExecute(r ApiGetChartCategoryOverviewRequest) ([]ChartDataSet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ChartDataSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChartsApiService.GetChartCategoryOverview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/chart/category/overview"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
