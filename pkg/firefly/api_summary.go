/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type SummaryApi interface {

	/*
	 * GetBasicSummary Returns basic sums of the users data.
	 * Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard.

	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetBasicSummaryRequest
	 */
	GetBasicSummary(ctx _context.Context) ApiGetBasicSummaryRequest

	/*
	 * GetBasicSummaryExecute executes the request
	 * @return []BasicSummaryEntry
	 */
	GetBasicSummaryExecute(r ApiGetBasicSummaryRequest) ([]BasicSummaryEntry, *_nethttp.Response, error)
}

// SummaryApiService SummaryApi service
type SummaryApiService service

type ApiGetBasicSummaryRequest struct {
	ctx _context.Context
	ApiService SummaryApi
	start *string
	end *string
	currencyCode *string
}

func (r ApiGetBasicSummaryRequest) Start(start string) ApiGetBasicSummaryRequest {
	r.start = &start
	return r
}
func (r ApiGetBasicSummaryRequest) End(end string) ApiGetBasicSummaryRequest {
	r.end = &end
	return r
}
func (r ApiGetBasicSummaryRequest) CurrencyCode(currencyCode string) ApiGetBasicSummaryRequest {
	r.currencyCode = &currencyCode
	return r
}

func (r ApiGetBasicSummaryRequest) Execute() ([]BasicSummaryEntry, *_nethttp.Response, error) {
	return r.ApiService.GetBasicSummaryExecute(r)
}

/*
 * GetBasicSummary Returns basic sums of the users data.
 * Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetBasicSummaryRequest
 */
func (a *SummaryApiService) GetBasicSummary(ctx _context.Context) ApiGetBasicSummaryRequest {
	return ApiGetBasicSummaryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []BasicSummaryEntry
 */
func (a *SummaryApiService) GetBasicSummaryExecute(r ApiGetBasicSummaryRequest) ([]BasicSummaryEntry, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []BasicSummaryEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SummaryApiService.GetBasicSummary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/summary/basic"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.start == nil {
		return localVarReturnValue, nil, reportError("start is required and must be specified")
	}
	if r.end == nil {
		return localVarReturnValue, nil, reportError("end is required and must be specified")
	}

	localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	if r.currencyCode != nil {
		localVarQueryParams.Add("currency_code", parameterToString(*r.currencyCode, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
