/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"time"
)

// ExchangeRateAttributes struct for ExchangeRateAttributes
type ExchangeRateAttributes struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	FromCurrencyId *int32 `json:"from_currency_id,omitempty"`
	FromCurrencyName *string `json:"from_currency_name,omitempty"`
	FromCurrencyCode *string `json:"from_currency_code,omitempty"`
	FromCurrencySymbol *string `json:"from_currency_symbol,omitempty"`
	FromCurrencyDecimalPlaces *int32 `json:"from_currency_decimal_places,omitempty"`
	ToCurrencyId *int32 `json:"to_currency_id,omitempty"`
	ToCurrencyCode *string `json:"to_currency_code,omitempty"`
	ToCurrencySymbol *string `json:"to_currency_symbol,omitempty"`
	ToCurrencyDecimalPlaces *int32 `json:"to_currency_decimal_places,omitempty"`
	Date *string `json:"date,omitempty"`
	Rate *float32 `json:"rate,omitempty"`
	// The amount in the \"to\"-currency, if provided in the request.
	Amount *string `json:"amount,omitempty"`
}

// NewExchangeRateAttributes instantiates a new ExchangeRateAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRateAttributes() *ExchangeRateAttributes {
	this := ExchangeRateAttributes{}
	return &this
}

// NewExchangeRateAttributesWithDefaults instantiates a new ExchangeRateAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRateAttributesWithDefaults() *ExchangeRateAttributes {
	this := ExchangeRateAttributes{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ExchangeRateAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ExchangeRateAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetFromCurrencyId returns the FromCurrencyId field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetFromCurrencyId() int32 {
	if o == nil || o.FromCurrencyId == nil {
		var ret int32
		return ret
	}
	return *o.FromCurrencyId
}

// GetFromCurrencyIdOk returns a tuple with the FromCurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetFromCurrencyIdOk() (*int32, bool) {
	if o == nil || o.FromCurrencyId == nil {
		return nil, false
	}
	return o.FromCurrencyId, true
}

// HasFromCurrencyId returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasFromCurrencyId() bool {
	if o != nil && o.FromCurrencyId != nil {
		return true
	}

	return false
}

// SetFromCurrencyId gets a reference to the given int32 and assigns it to the FromCurrencyId field.
func (o *ExchangeRateAttributes) SetFromCurrencyId(v int32) {
	o.FromCurrencyId = &v
}

// GetFromCurrencyName returns the FromCurrencyName field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetFromCurrencyName() string {
	if o == nil || o.FromCurrencyName == nil {
		var ret string
		return ret
	}
	return *o.FromCurrencyName
}

// GetFromCurrencyNameOk returns a tuple with the FromCurrencyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetFromCurrencyNameOk() (*string, bool) {
	if o == nil || o.FromCurrencyName == nil {
		return nil, false
	}
	return o.FromCurrencyName, true
}

// HasFromCurrencyName returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasFromCurrencyName() bool {
	if o != nil && o.FromCurrencyName != nil {
		return true
	}

	return false
}

// SetFromCurrencyName gets a reference to the given string and assigns it to the FromCurrencyName field.
func (o *ExchangeRateAttributes) SetFromCurrencyName(v string) {
	o.FromCurrencyName = &v
}

// GetFromCurrencyCode returns the FromCurrencyCode field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetFromCurrencyCode() string {
	if o == nil || o.FromCurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.FromCurrencyCode
}

// GetFromCurrencyCodeOk returns a tuple with the FromCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetFromCurrencyCodeOk() (*string, bool) {
	if o == nil || o.FromCurrencyCode == nil {
		return nil, false
	}
	return o.FromCurrencyCode, true
}

// HasFromCurrencyCode returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasFromCurrencyCode() bool {
	if o != nil && o.FromCurrencyCode != nil {
		return true
	}

	return false
}

// SetFromCurrencyCode gets a reference to the given string and assigns it to the FromCurrencyCode field.
func (o *ExchangeRateAttributes) SetFromCurrencyCode(v string) {
	o.FromCurrencyCode = &v
}

// GetFromCurrencySymbol returns the FromCurrencySymbol field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetFromCurrencySymbol() string {
	if o == nil || o.FromCurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.FromCurrencySymbol
}

// GetFromCurrencySymbolOk returns a tuple with the FromCurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetFromCurrencySymbolOk() (*string, bool) {
	if o == nil || o.FromCurrencySymbol == nil {
		return nil, false
	}
	return o.FromCurrencySymbol, true
}

// HasFromCurrencySymbol returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasFromCurrencySymbol() bool {
	if o != nil && o.FromCurrencySymbol != nil {
		return true
	}

	return false
}

// SetFromCurrencySymbol gets a reference to the given string and assigns it to the FromCurrencySymbol field.
func (o *ExchangeRateAttributes) SetFromCurrencySymbol(v string) {
	o.FromCurrencySymbol = &v
}

// GetFromCurrencyDecimalPlaces returns the FromCurrencyDecimalPlaces field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetFromCurrencyDecimalPlaces() int32 {
	if o == nil || o.FromCurrencyDecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.FromCurrencyDecimalPlaces
}

// GetFromCurrencyDecimalPlacesOk returns a tuple with the FromCurrencyDecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetFromCurrencyDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.FromCurrencyDecimalPlaces == nil {
		return nil, false
	}
	return o.FromCurrencyDecimalPlaces, true
}

// HasFromCurrencyDecimalPlaces returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasFromCurrencyDecimalPlaces() bool {
	if o != nil && o.FromCurrencyDecimalPlaces != nil {
		return true
	}

	return false
}

// SetFromCurrencyDecimalPlaces gets a reference to the given int32 and assigns it to the FromCurrencyDecimalPlaces field.
func (o *ExchangeRateAttributes) SetFromCurrencyDecimalPlaces(v int32) {
	o.FromCurrencyDecimalPlaces = &v
}

// GetToCurrencyId returns the ToCurrencyId field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetToCurrencyId() int32 {
	if o == nil || o.ToCurrencyId == nil {
		var ret int32
		return ret
	}
	return *o.ToCurrencyId
}

// GetToCurrencyIdOk returns a tuple with the ToCurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetToCurrencyIdOk() (*int32, bool) {
	if o == nil || o.ToCurrencyId == nil {
		return nil, false
	}
	return o.ToCurrencyId, true
}

// HasToCurrencyId returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasToCurrencyId() bool {
	if o != nil && o.ToCurrencyId != nil {
		return true
	}

	return false
}

// SetToCurrencyId gets a reference to the given int32 and assigns it to the ToCurrencyId field.
func (o *ExchangeRateAttributes) SetToCurrencyId(v int32) {
	o.ToCurrencyId = &v
}

// GetToCurrencyCode returns the ToCurrencyCode field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetToCurrencyCode() string {
	if o == nil || o.ToCurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.ToCurrencyCode
}

// GetToCurrencyCodeOk returns a tuple with the ToCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetToCurrencyCodeOk() (*string, bool) {
	if o == nil || o.ToCurrencyCode == nil {
		return nil, false
	}
	return o.ToCurrencyCode, true
}

// HasToCurrencyCode returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasToCurrencyCode() bool {
	if o != nil && o.ToCurrencyCode != nil {
		return true
	}

	return false
}

// SetToCurrencyCode gets a reference to the given string and assigns it to the ToCurrencyCode field.
func (o *ExchangeRateAttributes) SetToCurrencyCode(v string) {
	o.ToCurrencyCode = &v
}

// GetToCurrencySymbol returns the ToCurrencySymbol field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetToCurrencySymbol() string {
	if o == nil || o.ToCurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.ToCurrencySymbol
}

// GetToCurrencySymbolOk returns a tuple with the ToCurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetToCurrencySymbolOk() (*string, bool) {
	if o == nil || o.ToCurrencySymbol == nil {
		return nil, false
	}
	return o.ToCurrencySymbol, true
}

// HasToCurrencySymbol returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasToCurrencySymbol() bool {
	if o != nil && o.ToCurrencySymbol != nil {
		return true
	}

	return false
}

// SetToCurrencySymbol gets a reference to the given string and assigns it to the ToCurrencySymbol field.
func (o *ExchangeRateAttributes) SetToCurrencySymbol(v string) {
	o.ToCurrencySymbol = &v
}

// GetToCurrencyDecimalPlaces returns the ToCurrencyDecimalPlaces field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetToCurrencyDecimalPlaces() int32 {
	if o == nil || o.ToCurrencyDecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.ToCurrencyDecimalPlaces
}

// GetToCurrencyDecimalPlacesOk returns a tuple with the ToCurrencyDecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetToCurrencyDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.ToCurrencyDecimalPlaces == nil {
		return nil, false
	}
	return o.ToCurrencyDecimalPlaces, true
}

// HasToCurrencyDecimalPlaces returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasToCurrencyDecimalPlaces() bool {
	if o != nil && o.ToCurrencyDecimalPlaces != nil {
		return true
	}

	return false
}

// SetToCurrencyDecimalPlaces gets a reference to the given int32 and assigns it to the ToCurrencyDecimalPlaces field.
func (o *ExchangeRateAttributes) SetToCurrencyDecimalPlaces(v int32) {
	o.ToCurrencyDecimalPlaces = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ExchangeRateAttributes) SetDate(v string) {
	o.Date = &v
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetRate() float32 {
	if o == nil || o.Rate == nil {
		var ret float32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetRateOk() (*float32, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given float32 and assigns it to the Rate field.
func (o *ExchangeRateAttributes) SetRate(v float32) {
	o.Rate = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *ExchangeRateAttributes) GetAmount() string {
	if o == nil || o.Amount == nil {
		var ret string
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRateAttributes) GetAmountOk() (*string, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *ExchangeRateAttributes) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given string and assigns it to the Amount field.
func (o *ExchangeRateAttributes) SetAmount(v string) {
	o.Amount = &v
}

func (o ExchangeRateAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.FromCurrencyId != nil {
		toSerialize["from_currency_id"] = o.FromCurrencyId
	}
	if o.FromCurrencyName != nil {
		toSerialize["from_currency_name"] = o.FromCurrencyName
	}
	if o.FromCurrencyCode != nil {
		toSerialize["from_currency_code"] = o.FromCurrencyCode
	}
	if o.FromCurrencySymbol != nil {
		toSerialize["from_currency_symbol"] = o.FromCurrencySymbol
	}
	if o.FromCurrencyDecimalPlaces != nil {
		toSerialize["from_currency_decimal_places"] = o.FromCurrencyDecimalPlaces
	}
	if o.ToCurrencyId != nil {
		toSerialize["to_currency_id"] = o.ToCurrencyId
	}
	if o.ToCurrencyCode != nil {
		toSerialize["to_currency_code"] = o.ToCurrencyCode
	}
	if o.ToCurrencySymbol != nil {
		toSerialize["to_currency_symbol"] = o.ToCurrencySymbol
	}
	if o.ToCurrencyDecimalPlaces != nil {
		toSerialize["to_currency_decimal_places"] = o.ToCurrencyDecimalPlaces
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeRateAttributes struct {
	value *ExchangeRateAttributes
	isSet bool
}

func (v NullableExchangeRateAttributes) Get() *ExchangeRateAttributes {
	return v.value
}

func (v *NullableExchangeRateAttributes) Set(val *ExchangeRateAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRateAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRateAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRateAttributes(val *ExchangeRateAttributes) *NullableExchangeRateAttributes {
	return &NullableExchangeRateAttributes{value: val, isSet: true}
}

func (v NullableExchangeRateAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRateAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


