/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
	"time"
)

// Account struct for Account
type Account struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Name string `json:"name"`
	// Can only be one one these account types. import, initial-balance and reconciliation cannot be set manually.
	Type string `json:"type"`
	Iban *string `json:"iban,omitempty"`
	Bic *string `json:"bic,omitempty"`
	AccountNumber *string `json:"account_number,omitempty"`
	OpeningBalance *string `json:"opening_balance,omitempty"`
	OpeningBalanceDate *string `json:"opening_balance_date,omitempty"`
	VirtualBalance *string `json:"virtual_balance,omitempty"`
	CurrentBalance *string `json:"current_balance,omitempty"`
	CurrentBalanceDate *string `json:"current_balance_date,omitempty"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyId *int32 `json:"currency_id,omitempty"`
	// Use either currency_id or currency_code. Defaults to the user's default currency.
	CurrencyCode *string `json:"currency_code,omitempty"`
	CurrencySymbol *string `json:"currency_symbol,omitempty"`
	CurrencyDecimalPlaces *int32 `json:"currency_decimal_places,omitempty"`
	// If omitted, defaults to true.
	Active *bool `json:"active,omitempty"`
	// Order of the account
	Order *int32 `json:"order,omitempty"`
	// If omitted, defaults to true.
	IncludeNetWorth *bool `json:"include_net_worth,omitempty"`
	// Is only mandatory when the type is asset.
	AccountRole *string `json:"account_role,omitempty"`
	// Mandatory when the account_role is ccAsset. Can only be monthlyFull.
	CreditCardType NullableString `json:"credit_card_type,omitempty"`
	// Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.
	MonthlyPaymentDate NullableString `json:"monthly_payment_date,omitempty"`
	// Mandatory when type is liability. Specifies the exact type.
	LiabilityType *string `json:"liability_type,omitempty"`
	// Mandatory when type is liability. Amount of money in the liability. Must be positive.
	LiabilityAmount *string `json:"liability_amount,omitempty"`
	// Mandatory when type is liability. Start date for the liability.
	LiabilityStartDate *string `json:"liability_start_date,omitempty"`
	// Mandatory when type is liability. Interest percentage.
	Interest *string `json:"interest,omitempty"`
	// Mandatory when type is liability. Period over which the interest is calculated.
	InterestPeriod *string `json:"interest_period,omitempty"`
	Notes *string `json:"notes,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(name string, type_ string) *Account {
	this := Account{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Account) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Account) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Account) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Account) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Account) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Account) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetName returns the Name field value
func (o *Account) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Account) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *Account) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Account) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Account) SetType(v string) {
	o.Type = v
}

// GetIban returns the Iban field value if set, zero value otherwise.
func (o *Account) GetIban() string {
	if o == nil || o.Iban == nil {
		var ret string
		return ret
	}
	return *o.Iban
}

// GetIbanOk returns a tuple with the Iban field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIbanOk() (*string, bool) {
	if o == nil || o.Iban == nil {
		return nil, false
	}
	return o.Iban, true
}

// HasIban returns a boolean if a field has been set.
func (o *Account) HasIban() bool {
	if o != nil && o.Iban != nil {
		return true
	}

	return false
}

// SetIban gets a reference to the given string and assigns it to the Iban field.
func (o *Account) SetIban(v string) {
	o.Iban = &v
}

// GetBic returns the Bic field value if set, zero value otherwise.
func (o *Account) GetBic() string {
	if o == nil || o.Bic == nil {
		var ret string
		return ret
	}
	return *o.Bic
}

// GetBicOk returns a tuple with the Bic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetBicOk() (*string, bool) {
	if o == nil || o.Bic == nil {
		return nil, false
	}
	return o.Bic, true
}

// HasBic returns a boolean if a field has been set.
func (o *Account) HasBic() bool {
	if o != nil && o.Bic != nil {
		return true
	}

	return false
}

// SetBic gets a reference to the given string and assigns it to the Bic field.
func (o *Account) SetBic(v string) {
	o.Bic = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise.
func (o *Account) GetAccountNumber() string {
	if o == nil || o.AccountNumber == nil {
		var ret string
		return ret
	}
	return *o.AccountNumber
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountNumberOk() (*string, bool) {
	if o == nil || o.AccountNumber == nil {
		return nil, false
	}
	return o.AccountNumber, true
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *Account) HasAccountNumber() bool {
	if o != nil && o.AccountNumber != nil {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given string and assigns it to the AccountNumber field.
func (o *Account) SetAccountNumber(v string) {
	o.AccountNumber = &v
}

// GetOpeningBalance returns the OpeningBalance field value if set, zero value otherwise.
func (o *Account) GetOpeningBalance() string {
	if o == nil || o.OpeningBalance == nil {
		var ret string
		return ret
	}
	return *o.OpeningBalance
}

// GetOpeningBalanceOk returns a tuple with the OpeningBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetOpeningBalanceOk() (*string, bool) {
	if o == nil || o.OpeningBalance == nil {
		return nil, false
	}
	return o.OpeningBalance, true
}

// HasOpeningBalance returns a boolean if a field has been set.
func (o *Account) HasOpeningBalance() bool {
	if o != nil && o.OpeningBalance != nil {
		return true
	}

	return false
}

// SetOpeningBalance gets a reference to the given string and assigns it to the OpeningBalance field.
func (o *Account) SetOpeningBalance(v string) {
	o.OpeningBalance = &v
}

// GetOpeningBalanceDate returns the OpeningBalanceDate field value if set, zero value otherwise.
func (o *Account) GetOpeningBalanceDate() string {
	if o == nil || o.OpeningBalanceDate == nil {
		var ret string
		return ret
	}
	return *o.OpeningBalanceDate
}

// GetOpeningBalanceDateOk returns a tuple with the OpeningBalanceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetOpeningBalanceDateOk() (*string, bool) {
	if o == nil || o.OpeningBalanceDate == nil {
		return nil, false
	}
	return o.OpeningBalanceDate, true
}

// HasOpeningBalanceDate returns a boolean if a field has been set.
func (o *Account) HasOpeningBalanceDate() bool {
	if o != nil && o.OpeningBalanceDate != nil {
		return true
	}

	return false
}

// SetOpeningBalanceDate gets a reference to the given string and assigns it to the OpeningBalanceDate field.
func (o *Account) SetOpeningBalanceDate(v string) {
	o.OpeningBalanceDate = &v
}

// GetVirtualBalance returns the VirtualBalance field value if set, zero value otherwise.
func (o *Account) GetVirtualBalance() string {
	if o == nil || o.VirtualBalance == nil {
		var ret string
		return ret
	}
	return *o.VirtualBalance
}

// GetVirtualBalanceOk returns a tuple with the VirtualBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetVirtualBalanceOk() (*string, bool) {
	if o == nil || o.VirtualBalance == nil {
		return nil, false
	}
	return o.VirtualBalance, true
}

// HasVirtualBalance returns a boolean if a field has been set.
func (o *Account) HasVirtualBalance() bool {
	if o != nil && o.VirtualBalance != nil {
		return true
	}

	return false
}

// SetVirtualBalance gets a reference to the given string and assigns it to the VirtualBalance field.
func (o *Account) SetVirtualBalance(v string) {
	o.VirtualBalance = &v
}

// GetCurrentBalance returns the CurrentBalance field value if set, zero value otherwise.
func (o *Account) GetCurrentBalance() string {
	if o == nil || o.CurrentBalance == nil {
		var ret string
		return ret
	}
	return *o.CurrentBalance
}

// GetCurrentBalanceOk returns a tuple with the CurrentBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrentBalanceOk() (*string, bool) {
	if o == nil || o.CurrentBalance == nil {
		return nil, false
	}
	return o.CurrentBalance, true
}

// HasCurrentBalance returns a boolean if a field has been set.
func (o *Account) HasCurrentBalance() bool {
	if o != nil && o.CurrentBalance != nil {
		return true
	}

	return false
}

// SetCurrentBalance gets a reference to the given string and assigns it to the CurrentBalance field.
func (o *Account) SetCurrentBalance(v string) {
	o.CurrentBalance = &v
}

// GetCurrentBalanceDate returns the CurrentBalanceDate field value if set, zero value otherwise.
func (o *Account) GetCurrentBalanceDate() string {
	if o == nil || o.CurrentBalanceDate == nil {
		var ret string
		return ret
	}
	return *o.CurrentBalanceDate
}

// GetCurrentBalanceDateOk returns a tuple with the CurrentBalanceDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrentBalanceDateOk() (*string, bool) {
	if o == nil || o.CurrentBalanceDate == nil {
		return nil, false
	}
	return o.CurrentBalanceDate, true
}

// HasCurrentBalanceDate returns a boolean if a field has been set.
func (o *Account) HasCurrentBalanceDate() bool {
	if o != nil && o.CurrentBalanceDate != nil {
		return true
	}

	return false
}

// SetCurrentBalanceDate gets a reference to the given string and assigns it to the CurrentBalanceDate field.
func (o *Account) SetCurrentBalanceDate(v string) {
	o.CurrentBalanceDate = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise.
func (o *Account) GetCurrencyId() int32 {
	if o == nil || o.CurrencyId == nil {
		var ret int32
		return ret
	}
	return *o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrencyIdOk() (*int32, bool) {
	if o == nil || o.CurrencyId == nil {
		return nil, false
	}
	return o.CurrencyId, true
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *Account) HasCurrencyId() bool {
	if o != nil && o.CurrencyId != nil {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given int32 and assigns it to the CurrencyId field.
func (o *Account) SetCurrencyId(v int32) {
	o.CurrencyId = &v
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *Account) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || o.CurrencyCode == nil {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *Account) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode != nil {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *Account) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetCurrencySymbol returns the CurrencySymbol field value if set, zero value otherwise.
func (o *Account) GetCurrencySymbol() string {
	if o == nil || o.CurrencySymbol == nil {
		var ret string
		return ret
	}
	return *o.CurrencySymbol
}

// GetCurrencySymbolOk returns a tuple with the CurrencySymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrencySymbolOk() (*string, bool) {
	if o == nil || o.CurrencySymbol == nil {
		return nil, false
	}
	return o.CurrencySymbol, true
}

// HasCurrencySymbol returns a boolean if a field has been set.
func (o *Account) HasCurrencySymbol() bool {
	if o != nil && o.CurrencySymbol != nil {
		return true
	}

	return false
}

// SetCurrencySymbol gets a reference to the given string and assigns it to the CurrencySymbol field.
func (o *Account) SetCurrencySymbol(v string) {
	o.CurrencySymbol = &v
}

// GetCurrencyDecimalPlaces returns the CurrencyDecimalPlaces field value if set, zero value otherwise.
func (o *Account) GetCurrencyDecimalPlaces() int32 {
	if o == nil || o.CurrencyDecimalPlaces == nil {
		var ret int32
		return ret
	}
	return *o.CurrencyDecimalPlaces
}

// GetCurrencyDecimalPlacesOk returns a tuple with the CurrencyDecimalPlaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrencyDecimalPlacesOk() (*int32, bool) {
	if o == nil || o.CurrencyDecimalPlaces == nil {
		return nil, false
	}
	return o.CurrencyDecimalPlaces, true
}

// HasCurrencyDecimalPlaces returns a boolean if a field has been set.
func (o *Account) HasCurrencyDecimalPlaces() bool {
	if o != nil && o.CurrencyDecimalPlaces != nil {
		return true
	}

	return false
}

// SetCurrencyDecimalPlaces gets a reference to the given int32 and assigns it to the CurrencyDecimalPlaces field.
func (o *Account) SetCurrencyDecimalPlaces(v int32) {
	o.CurrencyDecimalPlaces = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Account) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Account) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Account) SetActive(v bool) {
	o.Active = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Account) GetOrder() int32 {
	if o == nil || o.Order == nil {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetOrderOk() (*int32, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Account) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *Account) SetOrder(v int32) {
	o.Order = &v
}

// GetIncludeNetWorth returns the IncludeNetWorth field value if set, zero value otherwise.
func (o *Account) GetIncludeNetWorth() bool {
	if o == nil || o.IncludeNetWorth == nil {
		var ret bool
		return ret
	}
	return *o.IncludeNetWorth
}

// GetIncludeNetWorthOk returns a tuple with the IncludeNetWorth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIncludeNetWorthOk() (*bool, bool) {
	if o == nil || o.IncludeNetWorth == nil {
		return nil, false
	}
	return o.IncludeNetWorth, true
}

// HasIncludeNetWorth returns a boolean if a field has been set.
func (o *Account) HasIncludeNetWorth() bool {
	if o != nil && o.IncludeNetWorth != nil {
		return true
	}

	return false
}

// SetIncludeNetWorth gets a reference to the given bool and assigns it to the IncludeNetWorth field.
func (o *Account) SetIncludeNetWorth(v bool) {
	o.IncludeNetWorth = &v
}

// GetAccountRole returns the AccountRole field value if set, zero value otherwise.
func (o *Account) GetAccountRole() string {
	if o == nil || o.AccountRole == nil {
		var ret string
		return ret
	}
	return *o.AccountRole
}

// GetAccountRoleOk returns a tuple with the AccountRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountRoleOk() (*string, bool) {
	if o == nil || o.AccountRole == nil {
		return nil, false
	}
	return o.AccountRole, true
}

// HasAccountRole returns a boolean if a field has been set.
func (o *Account) HasAccountRole() bool {
	if o != nil && o.AccountRole != nil {
		return true
	}

	return false
}

// SetAccountRole gets a reference to the given string and assigns it to the AccountRole field.
func (o *Account) SetAccountRole(v string) {
	o.AccountRole = &v
}

// GetCreditCardType returns the CreditCardType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Account) GetCreditCardType() string {
	if o == nil || o.CreditCardType.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreditCardType.Get()
}

// GetCreditCardTypeOk returns a tuple with the CreditCardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Account) GetCreditCardTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreditCardType.Get(), o.CreditCardType.IsSet()
}

// HasCreditCardType returns a boolean if a field has been set.
func (o *Account) HasCreditCardType() bool {
	if o != nil && o.CreditCardType.IsSet() {
		return true
	}

	return false
}

// SetCreditCardType gets a reference to the given NullableString and assigns it to the CreditCardType field.
func (o *Account) SetCreditCardType(v string) {
	o.CreditCardType.Set(&v)
}
// SetCreditCardTypeNil sets the value for CreditCardType to be an explicit nil
func (o *Account) SetCreditCardTypeNil() {
	o.CreditCardType.Set(nil)
}

// UnsetCreditCardType ensures that no value is present for CreditCardType, not even an explicit nil
func (o *Account) UnsetCreditCardType() {
	o.CreditCardType.Unset()
}

// GetMonthlyPaymentDate returns the MonthlyPaymentDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Account) GetMonthlyPaymentDate() string {
	if o == nil || o.MonthlyPaymentDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.MonthlyPaymentDate.Get()
}

// GetMonthlyPaymentDateOk returns a tuple with the MonthlyPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Account) GetMonthlyPaymentDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MonthlyPaymentDate.Get(), o.MonthlyPaymentDate.IsSet()
}

// HasMonthlyPaymentDate returns a boolean if a field has been set.
func (o *Account) HasMonthlyPaymentDate() bool {
	if o != nil && o.MonthlyPaymentDate.IsSet() {
		return true
	}

	return false
}

// SetMonthlyPaymentDate gets a reference to the given NullableString and assigns it to the MonthlyPaymentDate field.
func (o *Account) SetMonthlyPaymentDate(v string) {
	o.MonthlyPaymentDate.Set(&v)
}
// SetMonthlyPaymentDateNil sets the value for MonthlyPaymentDate to be an explicit nil
func (o *Account) SetMonthlyPaymentDateNil() {
	o.MonthlyPaymentDate.Set(nil)
}

// UnsetMonthlyPaymentDate ensures that no value is present for MonthlyPaymentDate, not even an explicit nil
func (o *Account) UnsetMonthlyPaymentDate() {
	o.MonthlyPaymentDate.Unset()
}

// GetLiabilityType returns the LiabilityType field value if set, zero value otherwise.
func (o *Account) GetLiabilityType() string {
	if o == nil || o.LiabilityType == nil {
		var ret string
		return ret
	}
	return *o.LiabilityType
}

// GetLiabilityTypeOk returns a tuple with the LiabilityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetLiabilityTypeOk() (*string, bool) {
	if o == nil || o.LiabilityType == nil {
		return nil, false
	}
	return o.LiabilityType, true
}

// HasLiabilityType returns a boolean if a field has been set.
func (o *Account) HasLiabilityType() bool {
	if o != nil && o.LiabilityType != nil {
		return true
	}

	return false
}

// SetLiabilityType gets a reference to the given string and assigns it to the LiabilityType field.
func (o *Account) SetLiabilityType(v string) {
	o.LiabilityType = &v
}

// GetLiabilityAmount returns the LiabilityAmount field value if set, zero value otherwise.
func (o *Account) GetLiabilityAmount() string {
	if o == nil || o.LiabilityAmount == nil {
		var ret string
		return ret
	}
	return *o.LiabilityAmount
}

// GetLiabilityAmountOk returns a tuple with the LiabilityAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetLiabilityAmountOk() (*string, bool) {
	if o == nil || o.LiabilityAmount == nil {
		return nil, false
	}
	return o.LiabilityAmount, true
}

// HasLiabilityAmount returns a boolean if a field has been set.
func (o *Account) HasLiabilityAmount() bool {
	if o != nil && o.LiabilityAmount != nil {
		return true
	}

	return false
}

// SetLiabilityAmount gets a reference to the given string and assigns it to the LiabilityAmount field.
func (o *Account) SetLiabilityAmount(v string) {
	o.LiabilityAmount = &v
}

// GetLiabilityStartDate returns the LiabilityStartDate field value if set, zero value otherwise.
func (o *Account) GetLiabilityStartDate() string {
	if o == nil || o.LiabilityStartDate == nil {
		var ret string
		return ret
	}
	return *o.LiabilityStartDate
}

// GetLiabilityStartDateOk returns a tuple with the LiabilityStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetLiabilityStartDateOk() (*string, bool) {
	if o == nil || o.LiabilityStartDate == nil {
		return nil, false
	}
	return o.LiabilityStartDate, true
}

// HasLiabilityStartDate returns a boolean if a field has been set.
func (o *Account) HasLiabilityStartDate() bool {
	if o != nil && o.LiabilityStartDate != nil {
		return true
	}

	return false
}

// SetLiabilityStartDate gets a reference to the given string and assigns it to the LiabilityStartDate field.
func (o *Account) SetLiabilityStartDate(v string) {
	o.LiabilityStartDate = &v
}

// GetInterest returns the Interest field value if set, zero value otherwise.
func (o *Account) GetInterest() string {
	if o == nil || o.Interest == nil {
		var ret string
		return ret
	}
	return *o.Interest
}

// GetInterestOk returns a tuple with the Interest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetInterestOk() (*string, bool) {
	if o == nil || o.Interest == nil {
		return nil, false
	}
	return o.Interest, true
}

// HasInterest returns a boolean if a field has been set.
func (o *Account) HasInterest() bool {
	if o != nil && o.Interest != nil {
		return true
	}

	return false
}

// SetInterest gets a reference to the given string and assigns it to the Interest field.
func (o *Account) SetInterest(v string) {
	o.Interest = &v
}

// GetInterestPeriod returns the InterestPeriod field value if set, zero value otherwise.
func (o *Account) GetInterestPeriod() string {
	if o == nil || o.InterestPeriod == nil {
		var ret string
		return ret
	}
	return *o.InterestPeriod
}

// GetInterestPeriodOk returns a tuple with the InterestPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetInterestPeriodOk() (*string, bool) {
	if o == nil || o.InterestPeriod == nil {
		return nil, false
	}
	return o.InterestPeriod, true
}

// HasInterestPeriod returns a boolean if a field has been set.
func (o *Account) HasInterestPeriod() bool {
	if o != nil && o.InterestPeriod != nil {
		return true
	}

	return false
}

// SetInterestPeriod gets a reference to the given string and assigns it to the InterestPeriod field.
func (o *Account) SetInterestPeriod(v string) {
	o.InterestPeriod = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Account) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Account) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Account) SetNotes(v string) {
	o.Notes = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Iban != nil {
		toSerialize["iban"] = o.Iban
	}
	if o.Bic != nil {
		toSerialize["bic"] = o.Bic
	}
	if o.AccountNumber != nil {
		toSerialize["account_number"] = o.AccountNumber
	}
	if o.OpeningBalance != nil {
		toSerialize["opening_balance"] = o.OpeningBalance
	}
	if o.OpeningBalanceDate != nil {
		toSerialize["opening_balance_date"] = o.OpeningBalanceDate
	}
	if o.VirtualBalance != nil {
		toSerialize["virtual_balance"] = o.VirtualBalance
	}
	if o.CurrentBalance != nil {
		toSerialize["current_balance"] = o.CurrentBalance
	}
	if o.CurrentBalanceDate != nil {
		toSerialize["current_balance_date"] = o.CurrentBalanceDate
	}
	if o.CurrencyId != nil {
		toSerialize["currency_id"] = o.CurrencyId
	}
	if o.CurrencyCode != nil {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if o.CurrencySymbol != nil {
		toSerialize["currency_symbol"] = o.CurrencySymbol
	}
	if o.CurrencyDecimalPlaces != nil {
		toSerialize["currency_decimal_places"] = o.CurrencyDecimalPlaces
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.IncludeNetWorth != nil {
		toSerialize["include_net_worth"] = o.IncludeNetWorth
	}
	if o.AccountRole != nil {
		toSerialize["account_role"] = o.AccountRole
	}
	if o.CreditCardType.IsSet() {
		toSerialize["credit_card_type"] = o.CreditCardType.Get()
	}
	if o.MonthlyPaymentDate.IsSet() {
		toSerialize["monthly_payment_date"] = o.MonthlyPaymentDate.Get()
	}
	if o.LiabilityType != nil {
		toSerialize["liability_type"] = o.LiabilityType
	}
	if o.LiabilityAmount != nil {
		toSerialize["liability_amount"] = o.LiabilityAmount
	}
	if o.LiabilityStartDate != nil {
		toSerialize["liability_start_date"] = o.LiabilityStartDate
	}
	if o.Interest != nil {
		toSerialize["interest"] = o.Interest
	}
	if o.InterestPeriod != nil {
		toSerialize["interest_period"] = o.InterestPeriod
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	return json.Marshal(toSerialize)
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


