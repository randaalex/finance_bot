/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// LinkTypeSingle struct for LinkTypeSingle
type LinkTypeSingle struct {
	Data LinkTypeRead `json:"data"`
}

// NewLinkTypeSingle instantiates a new LinkTypeSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkTypeSingle(data LinkTypeRead) *LinkTypeSingle {
	this := LinkTypeSingle{}
	this.Data = data
	return &this
}

// NewLinkTypeSingleWithDefaults instantiates a new LinkTypeSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkTypeSingleWithDefaults() *LinkTypeSingle {
	this := LinkTypeSingle{}
	return &this
}

// GetData returns the Data field value
func (o *LinkTypeSingle) GetData() LinkTypeRead {
	if o == nil {
		var ret LinkTypeRead
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *LinkTypeSingle) GetDataOk() (*LinkTypeRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *LinkTypeSingle) SetData(v LinkTypeRead) {
	o.Data = v
}

func (o LinkTypeSingle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableLinkTypeSingle struct {
	value *LinkTypeSingle
	isSet bool
}

func (v NullableLinkTypeSingle) Get() *LinkTypeSingle {
	return v.value
}

func (v *NullableLinkTypeSingle) Set(val *LinkTypeSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkTypeSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkTypeSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkTypeSingle(val *LinkTypeSingle) *NullableLinkTypeSingle {
	return &NullableLinkTypeSingle{value: val, isSet: true}
}

func (v NullableLinkTypeSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkTypeSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


