/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// TransactionLinkStore struct for TransactionLinkStore
type TransactionLinkStore struct {
	// The link type ID to use. You can also use the link_type_name field.
	LinkTypeId string `json:"link_type_id"`
	// The link type name to use. You can also use the link_type_id field.
	LinkTypeName *string `json:"link_type_name,omitempty"`
	// The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set.
	InwardId string `json:"inward_id"`
	// The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set.
	OutwardId string `json:"outward_id"`
	// Optional. Some notes.
	Notes NullableString `json:"notes,omitempty"`
}

// NewTransactionLinkStore instantiates a new TransactionLinkStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionLinkStore(linkTypeId string, inwardId string, outwardId string) *TransactionLinkStore {
	this := TransactionLinkStore{}
	this.LinkTypeId = linkTypeId
	this.InwardId = inwardId
	this.OutwardId = outwardId
	return &this
}

// NewTransactionLinkStoreWithDefaults instantiates a new TransactionLinkStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionLinkStoreWithDefaults() *TransactionLinkStore {
	this := TransactionLinkStore{}
	return &this
}

// GetLinkTypeId returns the LinkTypeId field value
func (o *TransactionLinkStore) GetLinkTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkTypeId
}

// GetLinkTypeIdOk returns a tuple with the LinkTypeId field value
// and a boolean to check if the value has been set.
func (o *TransactionLinkStore) GetLinkTypeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LinkTypeId, true
}

// SetLinkTypeId sets field value
func (o *TransactionLinkStore) SetLinkTypeId(v string) {
	o.LinkTypeId = v
}

// GetLinkTypeName returns the LinkTypeName field value if set, zero value otherwise.
func (o *TransactionLinkStore) GetLinkTypeName() string {
	if o == nil || o.LinkTypeName == nil {
		var ret string
		return ret
	}
	return *o.LinkTypeName
}

// GetLinkTypeNameOk returns a tuple with the LinkTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionLinkStore) GetLinkTypeNameOk() (*string, bool) {
	if o == nil || o.LinkTypeName == nil {
		return nil, false
	}
	return o.LinkTypeName, true
}

// HasLinkTypeName returns a boolean if a field has been set.
func (o *TransactionLinkStore) HasLinkTypeName() bool {
	if o != nil && o.LinkTypeName != nil {
		return true
	}

	return false
}

// SetLinkTypeName gets a reference to the given string and assigns it to the LinkTypeName field.
func (o *TransactionLinkStore) SetLinkTypeName(v string) {
	o.LinkTypeName = &v
}

// GetInwardId returns the InwardId field value
func (o *TransactionLinkStore) GetInwardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InwardId
}

// GetInwardIdOk returns a tuple with the InwardId field value
// and a boolean to check if the value has been set.
func (o *TransactionLinkStore) GetInwardIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InwardId, true
}

// SetInwardId sets field value
func (o *TransactionLinkStore) SetInwardId(v string) {
	o.InwardId = v
}

// GetOutwardId returns the OutwardId field value
func (o *TransactionLinkStore) GetOutwardId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OutwardId
}

// GetOutwardIdOk returns a tuple with the OutwardId field value
// and a boolean to check if the value has been set.
func (o *TransactionLinkStore) GetOutwardIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OutwardId, true
}

// SetOutwardId sets field value
func (o *TransactionLinkStore) SetOutwardId(v string) {
	o.OutwardId = v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionLinkStore) GetNotes() string {
	if o == nil || o.Notes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionLinkStore) GetNotesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *TransactionLinkStore) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *TransactionLinkStore) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *TransactionLinkStore) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *TransactionLinkStore) UnsetNotes() {
	o.Notes.Unset()
}

func (o TransactionLinkStore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["link_type_id"] = o.LinkTypeId
	}
	if o.LinkTypeName != nil {
		toSerialize["link_type_name"] = o.LinkTypeName
	}
	if true {
		toSerialize["inward_id"] = o.InwardId
	}
	if true {
		toSerialize["outward_id"] = o.OutwardId
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionLinkStore struct {
	value *TransactionLinkStore
	isSet bool
}

func (v NullableTransactionLinkStore) Get() *TransactionLinkStore {
	return v.value
}

func (v *NullableTransactionLinkStore) Set(val *TransactionLinkStore) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionLinkStore) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionLinkStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionLinkStore(val *TransactionLinkStore) *NullableTransactionLinkStore {
	return &NullableTransactionLinkStore{value: val, isSet: true}
}

func (v NullableTransactionLinkStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionLinkStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


