/*
 * Firefly III API
 *
 * This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the \"Authorize\" button to try the API below. 
 *
 * API version: 1.4.0
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// RuleGroupSingle struct for RuleGroupSingle
type RuleGroupSingle struct {
	Data RuleGroupRead `json:"data"`
}

// NewRuleGroupSingle instantiates a new RuleGroupSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleGroupSingle(data RuleGroupRead) *RuleGroupSingle {
	this := RuleGroupSingle{}
	this.Data = data
	return &this
}

// NewRuleGroupSingleWithDefaults instantiates a new RuleGroupSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleGroupSingleWithDefaults() *RuleGroupSingle {
	this := RuleGroupSingle{}
	return &this
}

// GetData returns the Data field value
func (o *RuleGroupSingle) GetData() RuleGroupRead {
	if o == nil {
		var ret RuleGroupRead
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *RuleGroupSingle) GetDataOk() (*RuleGroupRead, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *RuleGroupSingle) SetData(v RuleGroupRead) {
	o.Data = v
}

func (o RuleGroupSingle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableRuleGroupSingle struct {
	value *RuleGroupSingle
	isSet bool
}

func (v NullableRuleGroupSingle) Get() *RuleGroupSingle {
	return v.value
}

func (v *NullableRuleGroupSingle) Set(val *RuleGroupSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleGroupSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleGroupSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleGroupSingle(val *RuleGroupSingle) *NullableRuleGroupSingle {
	return &NullableRuleGroupSingle{value: val, isSet: true}
}

func (v NullableRuleGroupSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleGroupSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


