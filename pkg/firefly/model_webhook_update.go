/*
 * Firefly III API v1.5.2
 *
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2021-05-14T15:49:56+00:00 
 *
 * API version: 1.5.2
 * Contact: james@firefly-iii.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package firefly

import (
	"encoding/json"
)

// WebhookUpdate struct for WebhookUpdate
type WebhookUpdate struct {
	// Boolean to indicate if the webhook is active
	Active *bool `json:"active,omitempty"`
	// A title for the webhook for easy recognition.
	Title *string `json:"title,omitempty"`
	// A 24-character secret for the webhook. It's generated by Firefly III when saving a new webhook. If you submit a new secret through the PUT endpoint it will generate a new secret for the selected webhook, a new secret bearing no relation to whatever you just submitted.
	Secret *string `json:"secret,omitempty"`
	// The trigger for the webhook.
	Trigger *string `json:"trigger,omitempty"`
	// Indicator for what Firefly III will deliver to the webhook URL.
	Response *string `json:"response,omitempty"`
	// Format of the delivered response.
	Delivery *string `json:"delivery,omitempty"`
	// The URL of the webhook. Has to start with `https`.
	Url *string `json:"url,omitempty"`
}

// NewWebhookUpdate instantiates a new WebhookUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookUpdate() *WebhookUpdate {
	this := WebhookUpdate{}
	return &this
}

// NewWebhookUpdateWithDefaults instantiates a new WebhookUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookUpdateWithDefaults() *WebhookUpdate {
	this := WebhookUpdate{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *WebhookUpdate) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdate) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *WebhookUpdate) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *WebhookUpdate) SetActive(v bool) {
	o.Active = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *WebhookUpdate) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdate) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *WebhookUpdate) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *WebhookUpdate) SetTitle(v string) {
	o.Title = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *WebhookUpdate) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdate) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *WebhookUpdate) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *WebhookUpdate) SetSecret(v string) {
	o.Secret = &v
}

// GetTrigger returns the Trigger field value if set, zero value otherwise.
func (o *WebhookUpdate) GetTrigger() string {
	if o == nil || o.Trigger == nil {
		var ret string
		return ret
	}
	return *o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdate) GetTriggerOk() (*string, bool) {
	if o == nil || o.Trigger == nil {
		return nil, false
	}
	return o.Trigger, true
}

// HasTrigger returns a boolean if a field has been set.
func (o *WebhookUpdate) HasTrigger() bool {
	if o != nil && o.Trigger != nil {
		return true
	}

	return false
}

// SetTrigger gets a reference to the given string and assigns it to the Trigger field.
func (o *WebhookUpdate) SetTrigger(v string) {
	o.Trigger = &v
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *WebhookUpdate) GetResponse() string {
	if o == nil || o.Response == nil {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdate) GetResponseOk() (*string, bool) {
	if o == nil || o.Response == nil {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *WebhookUpdate) HasResponse() bool {
	if o != nil && o.Response != nil {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *WebhookUpdate) SetResponse(v string) {
	o.Response = &v
}

// GetDelivery returns the Delivery field value if set, zero value otherwise.
func (o *WebhookUpdate) GetDelivery() string {
	if o == nil || o.Delivery == nil {
		var ret string
		return ret
	}
	return *o.Delivery
}

// GetDeliveryOk returns a tuple with the Delivery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdate) GetDeliveryOk() (*string, bool) {
	if o == nil || o.Delivery == nil {
		return nil, false
	}
	return o.Delivery, true
}

// HasDelivery returns a boolean if a field has been set.
func (o *WebhookUpdate) HasDelivery() bool {
	if o != nil && o.Delivery != nil {
		return true
	}

	return false
}

// SetDelivery gets a reference to the given string and assigns it to the Delivery field.
func (o *WebhookUpdate) SetDelivery(v string) {
	o.Delivery = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *WebhookUpdate) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookUpdate) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *WebhookUpdate) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *WebhookUpdate) SetUrl(v string) {
	o.Url = &v
}

func (o WebhookUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.Trigger != nil {
		toSerialize["trigger"] = o.Trigger
	}
	if o.Response != nil {
		toSerialize["response"] = o.Response
	}
	if o.Delivery != nil {
		toSerialize["delivery"] = o.Delivery
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableWebhookUpdate struct {
	value *WebhookUpdate
	isSet bool
}

func (v NullableWebhookUpdate) Get() *WebhookUpdate {
	return v.value
}

func (v *NullableWebhookUpdate) Set(val *WebhookUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookUpdate(val *WebhookUpdate) *NullableWebhookUpdate {
	return &NullableWebhookUpdate{value: val, isSet: true}
}

func (v NullableWebhookUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


