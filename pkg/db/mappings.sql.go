// Code generated by sqlc. DO NOT EDIT.
// source: mappings.sql

package db

import (
	"context"
)

const createMapping = `-- name: CreateMapping :one
INSERT INTO mappings (
  transaction_details,
  category_id
) VALUES (
  $1, $2
)  ON CONFLICT (transaction_details) DO UPDATE SET category_id = $2
RETURNING id, transaction_details, category_id, created_at, updated_at
`

type CreateMappingParams struct {
	TransactionDetails string `json:"transaction_details"`
	CategoryID         int32  `json:"category_id"`
}

func (q *Queries) CreateMapping(ctx context.Context, arg CreateMappingParams) (Mapping, error) {
	row := q.queryRow(ctx, q.createMappingStmt, createMapping, arg.TransactionDetails, arg.CategoryID)
	var i Mapping
	err := row.Scan(
		&i.ID,
		&i.TransactionDetails,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMappingByTransactionDetails = `-- name: GetMappingByTransactionDetails :one
SELECT id, transaction_details, category_id, created_at, updated_at FROM mappings
WHERE transaction_details = $1
LIMIT 1
`

func (q *Queries) GetMappingByTransactionDetails(ctx context.Context, transactionDetails string) (Mapping, error) {
	row := q.queryRow(ctx, q.getMappingByTransactionDetailsStmt, getMappingByTransactionDetails, transactionDetails)
	var i Mapping
	err := row.Scan(
		&i.ID,
		&i.TransactionDetails,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
