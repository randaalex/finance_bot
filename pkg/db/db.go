// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createMappingStmt, err = db.PrepareContext(ctx, createMapping); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMapping: %w", err)
	}
	if q.createProcessedTransactionStmt, err = db.PrepareContext(ctx, createProcessedTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProcessedTransaction: %w", err)
	}
	if q.getMappingByTransactionDetailsStmt, err = db.PrepareContext(ctx, getMappingByTransactionDetails); err != nil {
		return nil, fmt.Errorf("error preparing query GetMappingByTransactionDetails: %w", err)
	}
	if q.getProcessedTransactionByFireflyIDStmt, err = db.PrepareContext(ctx, getProcessedTransactionByFireflyID); err != nil {
		return nil, fmt.Errorf("error preparing query GetProcessedTransactionByFireflyID: %w", err)
	}
	if q.getProcessedTransactionByHashStmt, err = db.PrepareContext(ctx, getProcessedTransactionByHash); err != nil {
		return nil, fmt.Errorf("error preparing query GetProcessedTransactionByHash: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createMappingStmt != nil {
		if cerr := q.createMappingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMappingStmt: %w", cerr)
		}
	}
	if q.createProcessedTransactionStmt != nil {
		if cerr := q.createProcessedTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProcessedTransactionStmt: %w", cerr)
		}
	}
	if q.getMappingByTransactionDetailsStmt != nil {
		if cerr := q.getMappingByTransactionDetailsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMappingByTransactionDetailsStmt: %w", cerr)
		}
	}
	if q.getProcessedTransactionByFireflyIDStmt != nil {
		if cerr := q.getProcessedTransactionByFireflyIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProcessedTransactionByFireflyIDStmt: %w", cerr)
		}
	}
	if q.getProcessedTransactionByHashStmt != nil {
		if cerr := q.getProcessedTransactionByHashStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProcessedTransactionByHashStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                     DBTX
	tx                                     *sql.Tx
	createMappingStmt                      *sql.Stmt
	createProcessedTransactionStmt         *sql.Stmt
	getMappingByTransactionDetailsStmt     *sql.Stmt
	getProcessedTransactionByFireflyIDStmt *sql.Stmt
	getProcessedTransactionByHashStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                     tx,
		tx:                                     tx,
		createMappingStmt:                      q.createMappingStmt,
		createProcessedTransactionStmt:         q.createProcessedTransactionStmt,
		getMappingByTransactionDetailsStmt:     q.getMappingByTransactionDetailsStmt,
		getProcessedTransactionByFireflyIDStmt: q.getProcessedTransactionByFireflyIDStmt,
		getProcessedTransactionByHashStmt:      q.getProcessedTransactionByHashStmt,
	}
}
